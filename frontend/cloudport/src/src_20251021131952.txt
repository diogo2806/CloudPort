----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\styles.css ----- 
body {
  background: linear-gradient(to right,  #234986);
  background-image: url('./assets/images/background.png');
  background-repeat: no-repeat;
  background-size: cover; /* isso fará a imagem cobrir todo o corpo */
  margin: 0;
  height: 100%;

}

html, body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\index.html ----- 
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Cloudport</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="mat-typography">
  <app-root></app-root> 
</body>
</html>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\main.ts ----- 
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { CONFIGURACAO_APLICACAO_TOKEN, ConfiguracaoAplicacao } from './app/configuracao/configuracao-aplicacao.service';

async function iniciarAplicacao(): Promise<void> {
  try {
    const configuracao = await carregarConfiguracaoAplicacao();
    await platformBrowserDynamic([
      { provide: CONFIGURACAO_APLICACAO_TOKEN, useValue: configuracao }
    ]).bootstrapModule(AppModule);
  } catch (erro) {
    console.error('Falha ao iniciar a aplicação.', erro);
    exibirMensagemErro('Não foi possível iniciar a aplicação porque a configuração não pôde ser carregada. Verifique se o arquivo "assets/configuracao.json" está presente e possui o campo "baseApiUrl".');
  }
}

async function carregarConfiguracaoAplicacao(): Promise<ConfiguracaoAplicacao> {
  const resposta = await fetch('assets/configuracao.json', { cache: 'no-store' });
  if (!resposta.ok) {
    throw new Error(`Arquivo de configuração ausente ou inacessível (status ${resposta.status}).`);
  }
  let conteudo: unknown;
  try {
    conteudo = await resposta.json();
  } catch (erro) {
    throw new Error('Conteúdo do arquivo de configuração inválido. Certifique-se de que o JSON é válido.');
  }
  return validarConfiguracaoAplicacao(conteudo);
}

function validarConfiguracaoAplicacao(dados: any): ConfiguracaoAplicacao {
  const baseApiUrl = typeof dados?.baseApiUrl === 'string' ? dados.baseApiUrl.trim() : '';
  if (!baseApiUrl) {
    throw new Error('O campo "baseApiUrl" não foi informado no arquivo de configuração.');
  }
  return { baseApiUrl };
}

function exibirMensagemErro(mensagem: string): void {
  const corpo = document.body;
  if (!corpo) {
    return;
  }
  corpo.innerHTML = '';
  const container = document.createElement('div');
  container.style.display = 'flex';
  container.style.justifyContent = 'center';
  container.style.alignItems = 'center';
  container.style.height = '100vh';
  container.style.padding = '2rem';
  container.style.backgroundColor = '#0b1e39';
  container.style.color = '#ffffff';
  container.style.fontFamily = 'Arial, Helvetica, sans-serif';
  container.style.textAlign = 'center';
  container.style.fontSize = '1.25rem';
  container.style.lineHeight = '1.6';
  container.textContent = mensagem;
  corpo.appendChild(container);
}

iniciarAplicacao();
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app.component.css ----- 
body {
  background: linear-gradient(120deg, #a1c4fd, #c2e9fb);
}

main {
  margin: 0; /* Remove a margem */
  padding: 0; /* Remove o padding */
  height: calc(100vh - 50px); /* Define a altura para ocupar toda a viewport menos a altura do cabeçalho */
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app.component.html ----- 
<app-header *ngIf="showChrome"></app-header>

<main>
    <router-outlet></router-outlet>
</main>

<app-footer *ngIf="showChrome"></app-footer>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app-routing.module.ts ----- 
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './componentes/login/login.component';
import { HomeComponent } from './componentes/home/home.component';
import { RoleTabelaComponent } from './componentes/role/role-tabela/role-tabela.component';
import { AuthGuard } from './componentes/service/servico-autenticacao/auth.guard';
import { SegurancaComponent } from './componentes/seguranca/seguranca.component';
import { NotificacoesComponent } from './componentes/notificacoes/notificacoes.component';
import { PrivacidadeComponent } from './componentes/privacidade/privacidade.component';
import { UsuariosListaComponent } from './componentes/usuarios-lista/usuarios-lista.component';

const homeChildRoutes: Routes = [
  {
    path: '',
    pathMatch: 'full',
    redirectTo: 'role'
  },
  {
    path: 'role',
    component: RoleTabelaComponent
  },
  {
    path: 'seguranca',
    component: SegurancaComponent
  },
  {
    path: 'notificacoes',
    component: NotificacoesComponent
  },
  {
    path: 'privacidade',
    component: PrivacidadeComponent
  },
  {
    path: 'lista-de-usuarios',
    component: UsuariosListaComponent
  },
  {
    path: 'gate',
    loadChildren: () => import('./componentes/gate/gate.module').then(m => m.GateModule)
  },
  {
    path: 'ferrovia',
    canActivate: [AuthGuard],
    canLoad: [AuthGuard],
    loadChildren: () => import('./componentes/ferrovia/ferrovia.module').then(m => m.FerroviaModule)
  },
  {
    path: 'patio',
    canActivate: [AuthGuard],
    canLoad: [AuthGuard],
    loadChildren: () => import('./componentes/patio/patio.module').then(m => m.PatioModule)
  }
];

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  {
    path: 'home',
    component: HomeComponent,
    canActivate: [AuthGuard],
    canActivateChild: [AuthGuard],
    children: homeChildRoutes
  },
  { path: '', redirectTo: 'home', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app.component.spec.ts ----- 
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'cloudport'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('cloudport');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('cloudport app is running!');
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app.component.ts ----- 
import { Component, OnDestroy } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnDestroy {
  title = 'cloudport';
  showChrome = true;
  private readonly destroy$ = new Subject<void>();

  constructor(private router: Router, private translate: TranslateService) {
    this.updateChromeVisibility(this.router.url);
    this.translate.addLangs(['pt', 'en', 'es']);
    this.translate.setDefaultLang('pt');
    const browserLang = this.translate.getBrowserLang();
    const fallback = browserLang && ['pt', 'en', 'es'].includes(browserLang) ? browserLang : 'pt';
    this.translate.use(fallback);

    this.router.events
      .pipe(
        filter((event): event is NavigationEnd => event instanceof NavigationEnd),
        takeUntil(this.destroy$)
      )
      .subscribe((event: NavigationEnd) => {
        this.updateChromeVisibility(event.urlAfterRedirects ?? event.url);
      });
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateChromeVisibility(url: string): void {
    const normalizedUrl = url.startsWith('/') ? url : `/${url}`;
    this.showChrome = !normalizedUrl.startsWith('/login');
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\app.module.ts ----- 
/* app.module.ts */
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginComponent } from './componentes/login/login.component';
import { TranslateLoader, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { HTTP_INTERCEPTORS, HttpClient, HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HomeComponent } from './componentes/home/home.component';
import { HeaderComponent } from './componentes/header/header.component';
import { FooterComponent } from './componentes/footer/footer.component';
import { NavbarComponent } from './componentes/navbar/navbar.component';
import { RoleTabelaComponent } from './componentes/role/role-tabela/role-tabela.component';
import { ContextMenuComponent } from './componentes/context-menu/context-menu.component';
import { AgGridModule } from 'ag-grid-angular';
import { CustomReuseStrategy } from './componentes/tab-content/customreusestrategy';
import { RouteReuseStrategy } from '@angular/router';
import { JwtInterceptor } from './componentes/service/servico-autenticacao/jwt.interceptor';
import { ModalComponent } from './componentes/modal/modal.component';
import { RoleCadastroComponent } from './componentes/role/role-cadastro/role-cadastro.component';
import { SegurancaComponent } from './componentes/seguranca/seguranca.component';
import { NotificacoesComponent } from './componentes/notificacoes/notificacoes.component';
import { PrivacidadeComponent } from './componentes/privacidade/privacidade.component';
import { UsuariosListaComponent } from './componentes/usuarios-lista/usuarios-lista.component';
import { DynamicTableModule } from './componentes/dynamic-table/dynamic-table.module';
import { ConfirmacaoModalComponent } from './componentes/modal/confirmacao-modal/confirmacao-modal.component';
import { TextoSeguroPipe } from './componentes/pipes/texto-seguro.pipe';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    HomeComponent,
    HeaderComponent,
    FooterComponent,
    NavbarComponent,
    RoleTabelaComponent,
    ContextMenuComponent,
    ModalComponent,
    ConfirmacaoModalComponent,
    RoleCadastroComponent,
    SegurancaComponent,
    NotificacoesComponent,
    PrivacidadeComponent,
    UsuariosListaComponent,
    TextoSeguroPipe,

  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    ReactiveFormsModule,
    FormsModule,
    HttpClientModule,
    TranslateModule.forRoot({
      loader: {
        provide: TranslateLoader,
        useFactory: HttpLoaderFactory,
        deps: [HttpClient]
      },
      defaultLanguage: 'pt'
    }),
    AgGridModule,
    DynamicTableModule
  ],
  providers: [
    { provide: RouteReuseStrategy, useClass: CustomReuseStrategy },
    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

export function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {
  return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\context-menu\context-menu.component.css ----- 
.context-menu {
    position: absolute;
    border: 1px solid #ddd; /* alinhado com a cor da borda da tabela */
    background-color: #fff;
    z-index: 1000;
    border-radius: 10px; /* alinhado com o raio da borda do container */
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1); /* alinhado com a sombra do container */
    overflow: hidden; /* esconde as bordas internas no caso de borda arredondada */
}

.context-menu-option {
    display: block;
    width: 100%;
    padding: 0.5em 1.5em; /* alinhado com o preenchimento das células da tabela */
    border-bottom: 1px solid #ddd; /* alinhado com a cor da borda da tabela */
    cursor: pointer;
    color: #333; /* alinhado com a cor do texto da tabela */
    text-align: center; /* alinhado com o alinhamento de texto da tabela */
}

.context-menu-option:hover {
    background-color: #f8f8f8; /* alinhado com a cor de fundo do cabeçalho da tabela */
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\context-menu\context-menu.component.html ----- 
<div class="context-menu" [style.top.px]="position.y" [style.left.px]="position.x" *ngIf="isOpen">
    <div class="context-menu-option" *ngFor="let option of menuOptions" (click)="optionSelected.emit(option)">
        {{ option }}
    </div>
</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\context-menu\context-menu.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ContextMenuComponent } from './context-menu.component';

describe('ContextMenuComponent', () => {
  let component: ContextMenuComponent;
  let fixture: ComponentFixture<ContextMenuComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ContextMenuComponent]
    });
    fixture = TestBed.createComponent(ContextMenuComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\context-menu\context-menu.component.ts ----- 
import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';



function logMethod(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Classe ${target.constructor.name}: Método ${key} chamado.`);
    return originalMethod.apply(this, args);
  };
  return descriptor;
}




@Component({
  selector: 'app-context-menu',
  templateUrl: './context-menu.component.html',
  styleUrls: ['./context-menu.component.css']
})
export class ContextMenuComponent {
  @Output() optionSelected = new EventEmitter<string>();
  @Input() position = { x: 0, y: 0 };
  @Input() isOpen = false;
  @Input() selectedRole = null;
  @Input() menuOptions: string[] = [];

  constructor(public elementRef: ElementRef) {}
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\dynamic-table.component.css ----- 
.role-container {
    max-width: 960px;
    margin: 3em auto;
    padding: 2em;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.role-container h1 {
    color: #303030;
    font-size: 2em;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    margin-bottom: 1em;
}

.role-form label,
.role-form input,
.role-form button {
    display: block;
    margin-bottom: 1em;
}

.role-form button {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.table {
    width: 100%;
    margin-top: 1em;
    border-collapse: collapse;
}

.table th,
.table td {
    padding: 0.5em;  /* alterado o valor de padding para diminuir a altura das linhas */
    border: 1px solid #ddd;
    text-align: center;
    vertical-align: middle;
}

.table th {
    background-color: #f8f8f8;
    color: #333;
}

.table td {
    color: #333;
}

.table tr:hover {
    background-color: #f5f5f5;
}

.table tr.selected {
    background-color: #23498657;
  }
  

.btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
}

.btn {
    padding: 0.5em 1em;
    text-decoration: none;
    border-radius: 4px;
    cursor: pointer;
}

.btn-primary:hover {
    background-color: #0069d9;
    border-color: #0062cc;
}

.btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

.invalid-feedback {
    color: red;
}

.alert {
    margin-top: 15px;
}

.spaced-button {
    margin-right: 10px; /* Altere para a quantidade de espaço que você deseja */
}

.grid-container {
    height: 100%;
  }
  
  ag-grid-angular {
    width: 100%;
    height: 100%;
  }
  
  .ag-layout-auto-height {
    height: 100%;
}




.icon {
    margin-left: 5px;
    margin-right: 5px;
    margin-top: 5px;
    margin-bottom: 5px;
    transition: all 0.3s ease; /* Transição suave para todas as mudanças */
  }
  
  .icon:hover {
    transform: scale(1.4); /* Aumenta o tamanho em 20% ao passar o mouse */
  }
  
  .icon:active {
    animation: clickAnimation 0.3s; /* Animação ao clicar */
  }
  
  @keyframes clickAnimation {
    0% { transform: scale(1); }
    50% { transform: scale(0.9); } /* Reduz o tamanho em 10% no meio da animação */
    100% { transform: scale(1); } /* Volta ao tamanho original */
  }
   
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\dynamic-table.component.html ----- 
<!--dynamic-table.component.html-->
<div class="grid-container"
(click)="closeContextMenu($event)"
>
  <div class="btn-group" role="group" aria-label="Basic example">
    <img class="icon" src="../../../assets/images/excel-4954.svg" alt="Excel" width="20" height="20" (click)="onBtExport()"/>
    <img class="icon" src="../../../assets/icons/plus-circle.svg" alt="Excel" width="20" height="20" (click)="createEntity('role')"/>
    <img class="icon" src="../../../assets/icons/edit.svg" alt="Excel" width="20" height="20"/>
    <img class="icon" src="../../../assets/icons/minus-circle.svg" alt="Excel" width="20" height="20"/>
  </div>


  <ag-grid-angular
      #gridTable
      style="width: 100%; height: 100%;"
      class="ag-theme-alpine"
      
      [rowData]="filteredData"
      [columnDefs]="columnDefinitions"
      [defaultColDef]="defaultColDef"
      [domLayout]="'autoHeight'"
      [animateRows]="true"
      [rowSelection]="'multiple'"
      [getContextMenuItems]="getContextMenuItems"
      (contextmenu)="onContextMenu($event)"
      (gridReady)="onGridReady($event)"
      (cellClicked)="onCellClicked($event)"
      (cellDoubleClicked)="onCellDoubleClicked($event)"
      (rowClicked)="onRowClicked($event)"
      (cellContextMenu)="onCellContextMenu($event)"
    >
  </ag-grid-angular>

  <!--
<div class="grid-container"></div>   -->
<app-modal (close)="closePopup()"></app-modal>


 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\dynamic-table.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DynamicTableComponent } from './dynamic-table.component';

describe('DynamicTableComponent', () => {
  let component: DynamicTableComponent;
  let fixture: ComponentFixture<DynamicTableComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [DynamicTableComponent]
    });
    fixture = TestBed.createComponent(DynamicTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\dynamic-table.component.ts ----- 
/* dynamic-table.component.ts */
import { ViewChild, ElementRef } from '@angular/core';
import { Component, Input, OnInit, Output, EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import * as XLSX from 'xlsx';
import { ColDef, GridApi, GridOptions, GridReadyEvent, IDateFilterParams, IMultiFilterParams, ISetFilterParams } from 'ag-grid-community';
import { TabStateService } from './tab-state.service';
import { PopupService } from '../service/popupService';


function logMethod(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Classe ${target.constructor.name}: Método ${key} chamado.`);
    return originalMethod.apply(this, args);
  };
  return descriptor;
}



@Component({
  selector: 'app-dynamic-table',
  templateUrl: './dynamic-table.component.html',
  styleUrls: ['./dynamic-table.component.css']
})
export class DynamicTableComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {

  private _data: any[] = [];
  private gridApi!: GridApi;

  @Input() columns: string[] = [];
  //@Input() data: any[] = [];
  
  @Input() 
  set data(value: any[]) {
    this._data = value;
    this.filteredData = [...this._data];
    if (this.gridApi) {
      this.gridApi.setRowData(this.filteredData);
    }
  }
  @Input() selectedRoleIds: number[] = [];
  @Output() mouseDown = new EventEmitter<any>();
  @Output() mouseUp = new EventEmitter<any>();
  @Output() mouseOver = new EventEmitter<any>();
  @Output() rightClick = new EventEmitter<any>();
  @Input() selectedTab: string = '';
  @ViewChild('gridTable') gridTable!: ElementRef;
  @Output() gridReady = new EventEmitter<GridReadyEvent>();
  @Output() rowClicked = new EventEmitter<any>();
  @Output() rowDoubleClicked = new EventEmitter<any>();

  @Output() createRole = new EventEmitter<void>();

  filteredData: any[] = [];
  filters: { [key: string]: string } = {};
  private boundHandleTableContextMenu: any;
 
  columnDefinitions: ColDef[] = [];
  dragging: boolean = false;

  tabela: boolean = false;
  constructor(
    private tabStateService: TabStateService,
    private popupService: PopupService
  ) {}

  


  ngOnInit(): void {
    console.log('Classe DynamicTableComponent: : Método ngOnInit iniciado.');

    this.updateColumnDefinitions();
    this.filteredData = [...this.data];
  
   // this.gridTable.nativeElement.addEventListener('contextmenu', this.handleTableContextMenu.bind(this));

    console.log('Classe DynamicTableComponent: : Método ngOnInit finalizado.');
   // document.addEventListener('click', this.closeContextMenu.bind(this));
   //this.gridTable.nativeElement.removeEventListener('contextmenu', this.handleTableContextMenu.bind(this));
   //this.boundHandleTableContextMenu = this.handleTableContextMenu.bind(this);
   //document.addEventListener('contextmenu', this.boundHandleTableContextMenu);


  }
  
  onContextMenu(event: MouseEvent): void {
    event.preventDefault(); // Previne o menu de contexto padrão
  }
  

  ngAfterViewInit(): void {
    console.log('Classe DynamicTableComponent: : Método ngAfterViewInit iniciado.');
    // Adicione o manipulador de eventos para o evento 'contextmenu'
   // this.gridTable.nativeElement.addEventListener('contextmenu', this.handleTableContextMenu.bind(this));
    console.log('Classe DynamicTableComponent: : Método ngAfterViewInit finalizado.');
  }


  handleTableContextMenu(event: any): void {
    
    //document.addEventListener('contextmenu', this.handleTableContextMenu.bind(this));
    //document.removeEventListener('contextmenu', this.handleTableContextMenu.bind(this));
    event.preventDefault();
    //console.log("DynamicTableComponent handleTableContextMenu event: ",event);
    const row = 0; // Acessa os dados da linha clicada
    console.log('DynamicTableComponent handleTableContextMenu event row: Emitindo evento de clique com o botão direito do mouse', { event: event, row }); // Depuração

/*

      console.log(event)

    
    if(event==null){
      console.log("handleTableContextMenu: event.row==null")

    }
   if (this.gridTable && this.gridTable.nativeElement) {
     console.log("handleTableContextMenu: oi")
  }

  if (this.gridTable) {
    console.log("handleTableContextMenu: this.gridTable")
 }
 
 if (this.gridTable==null) {
  console.log("handleTableContextMenu: this.gridTable==null")
}
console.log("handleTableContextMenu: ", event)
      event.preventDefault(); // Previne o menu de contexto padrão dentro da tabela

      */
  }



 // @logMethod
 // ngAfterViewInit(): void {
   // if (this.gridTable && this.gridTable.nativeElement) {
   //   this.gridTable.nativeElement.addEventListener('contextmenu', this.handleTableContextMenu.bind(this));
  // }
  //}
  
  

  


  ngOnDestroy() {
    if (this.gridTable && this.gridTable.nativeElement) {
      this.gridTable.nativeElement.removeEventListener('contextmenu', this.handleTableContextMenu.bind(this));
    }
  }
  

  onCellContextMenu(event: any): void {
    const mouseEvent = event.event as MouseEvent;
    mouseEvent.preventDefault(); // Previne o menu de contexto padrão dentro da tabela

    if (mouseEvent.button !== 2) {
      return; // Ignora se não for o botão direito do mouse
    }

    mouseEvent.stopPropagation();

    const row = event.data; // Acessa os dados da linha clicada
    console.log('DynamicTableComponent onCellContextMenu: Emitindo evento de clique com o botão direito do mouse', { event: mouseEvent, row }); // Depuração
    this.rightClick.emit({ event: mouseEvent, row });
  }






  getContextMenuItems(params: any): any[] {
    return []; // Desativa o menu de contexto
  }
  

 // @logMethod
//preventRightClickDefault(event: MouseEvent): void {
  //console.log("preventRightClickDefault: "+event.target?.dispatchEvent)
  /*
  if (this.gridTable && this.gridTable.nativeElement.contains(event.target as Node)) {
    console.log('CLIQUE DENTRO DA TABELA');
    event.preventDefault();
    //this.rightClick.emit(null); // Emita um evento nulo para fechar o menu
  } else {
    console.log('CLIQUE FORA DA TABELA');
    //event.preventDefault();
    //this.rightClick.emit(null); // Emita um evento nulo para fechar o menu
  }
  */
//}



  closeContextMenu(event: MouseEvent): void {
    if (!event) {
      return;
    }

    const target = event.target as Node | null;
    const gridElement = this.gridTable?.nativeElement as HTMLElement | undefined;
    const contextMenuElement = document.querySelector('.context-menu') as HTMLElement | null;
    const eventPath: EventTarget[] = typeof event.composedPath === 'function' ? event.composedPath() : [];

    const clickedInsideGrid = !!(
      target &&
      gridElement &&
      (gridElement.contains(target) || eventPath.includes(gridElement))
    );

    const clickedInsideMenu = !!(
      target &&
      contextMenuElement &&
      (contextMenuElement.contains(target) || eventPath.includes(contextMenuElement))
    );

    if (!clickedInsideGrid && !clickedInsideMenu) {
      this.rightClick.emit(null);
    }
  }
  

  

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
   // this.gridTable.nativeElement.addEventListener('contextmenu', this.handleTableContextMenu.bind(this));

    this.gridReady.emit(params);

}




onBtExport() {
  try {
    // Coletar todas as linhas filtradas (mesmo que não estejam renderizadas na tela)
    const dadosFiltrados: any[] = [];
    const coletarNos: (callback: (node: any) => void) => void =
      this.gridApi.forEachNodeAfterFilterAndSort?.bind(this.gridApi) ??
      this.gridApi.forEachNodeAfterFilter.bind(this.gridApi);

    coletarNos((node: any) => {
      if (node.data) {
        dadosFiltrados.push({ ...node.data });
      }
    });

    // Converter os dados coletados para JSON antes da exportação
    const jsonData = dadosFiltrados.map((linha) => JSON.parse(JSON.stringify(linha)));

    // Preparar estrutura padrão caso não haja dados filtrados
    const exportData = jsonData.length
      ? jsonData
      : [this.columns.reduce((acc, column) => ({ ...acc, [column]: '' }), {})];

    // Usar a biblioteca XLSX para exportar os dados
    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(exportData);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
    XLSX.writeFile(wb, 'data.xlsx');
    console.log("DynamicTableComponent onBtExport: Exportação bem-sucedida");
  } catch (error) {
    // Tratar err
  }
}






  onCellClicked(event: any) {
    if (!event.node.isSelected()) {
     // event.node.setSelected(true);
    } else {
      //event.node.setSelected(false);
    }
   // console.log('Célula clicada:', event);
   this.rightClick.emit(null); // Emita um evento nulo para fechar o menu
  // console.log('Célula clicada:', event);
  }

   /*
     @logMethod
  onCellClicked(event: any) {
    if (!event.node.isSelected()) {
      event.node.setSelected(true);
    } else {
      event.node.setSelected(false);
    }
   // console.log('Célula clicada:', event);
  }

    leftClick(event: MouseEvent, role: any) {
      event.preventDefault();

      const index = this.selectedRoleIds.indexOf(role.id);
      
      if (index > -1) {
        // Se o ID já está no array, remova-o
        this.selectedRoleIds.splice(index, 1);
      } else {
        // Se o ID não está no array, adicione-o
        this.selectedRoleIds.push(role.id);
      }
    }

    */


  onCellDoubleClicked(event: any) {
    console.log('DynamicTableComponent onCellDoubleClicked: Célula clicada com o botão direito:', event);
    this.rowDoubleClicked.emit(event);
  }
/*
  @logMethod
  onCellRightClicked(event: any) {
    console.log('onCellRightClicked: ', event);
    const mouseEvent = event.event as MouseEvent;
    const row = event.data; // Acessa os dados da linha clicada
    this.rightClick.emit({ event: mouseEvent, row });

  }
*/
  
  onRowClicked(event: any) {
    console.log('onRowClicked: ', event);
    this.rowClicked.emit(event);
    //this.rightClick.emit({event});
  }
  



  public defaultColDef: ColDef = {
    flex: 1,
    minWidth: 200,
    resizable: true,
    floatingFilter: true,
    menuTabs: ['filterMenuTab'],
  };


  
  get data(): any[] {
    return this._data;
  }

  private updateColumnDefinitions(): void {
    this.columnDefinitions = this.columns.map(column => ({
      headerName: column,
      field: column,
      filter: true,
      sortable: true
    }));
  }
  

  onRowMouseDown(event: MouseEvent, row: any) {
    if (event.button !== 0) return;
    event.preventDefault();
    this.dragging = true;
    this.toggleSelection(row);
    this.mouseDown.emit({ event, row });
    console.log('onRowMouseDown: ', event);
  }


  onRowMouseUp(event: MouseEvent) {
    if (event.button !== 0) return;
    this.dragging = false;
    this.mouseUp.emit(event);
  }

  @logMethod
  onRowMouseOver(event: MouseEvent, row: any) {
    if (!this.dragging) return;
    this.toggleSelection(row);
    this.mouseOver.emit({ event, row });
  }

  @logMethod
  onRowRightClick(event: MouseEvent, row: any) {
    event.preventDefault();
    this.rightClick.emit({ event, row });
  }



  @logMethod
  isRowSelected(row: any): boolean {
    return this.selectedRoleIds.includes(row['Role ID']);
  }

  @logMethod
  toggleSelection(row: any): void {
    const index = this.selectedRoleIds.indexOf(row['Role ID']);
    if (index > -1) {
      this.selectedRoleIds.splice(index, 1);
    } else {
      this.selectedRoleIds.push(row['Role ID']);
    }
  }

  
  showModal = false;

  @logMethod
  createEntity(entityType: string) {
    if (entityType === 'role') {
      this.popupService.openPopup('role'); // Abre o modal
    }
  }

  @logMethod
  closePopup() {
    this.showModal = false; // Fecha o modal
  }

  
}
  ngOnChanges(changes: SimpleChanges): void {
    if (changes['columns']) {
      this.updateColumnDefinitions();
      if (this.gridApi && this.filteredData) {
        this.gridApi.setColumnDefs(this.columnDefinitions);
        this.gridApi.refreshClientSideRowModel('everything');
      }
    }
  }

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\dynamic-table.module.ts ----- 
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AgGridModule } from 'ag-grid-angular';
import { DynamicTableComponent } from './dynamic-table.component';

@NgModule({
  declarations: [DynamicTableComponent],
  imports: [CommonModule, AgGridModule],
  exports: [DynamicTableComponent]
})
export class DynamicTableModule {}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\tab-state.service.spec.ts ----- 
import { TestBed } from '@angular/core/testing';

import { TabStateService } from './tab-state.service';

describe('TabStateService', () => {
  let service: TabStateService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(TabStateService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\dynamic-table\tab-state.service.ts ----- 
// tab-state.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class TabStateService {
  private tabState = new BehaviorSubject<{ [key: string]: any }>({});

  get state() {
    return this.tabState.asObservable();
  }

  setTabState(tabName: string, state: any) {
    const currentState = this.tabState.value;
    currentState[tabName] = state;
    this.tabState.next(currentState);
  }

  getTabState(tabName: string) {
    return this.tabState.value[tabName];
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\ferrovia-routing.module.ts ----- 
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListaVisitasTremComponent } from './componentes/lista-visitas-trem/lista-visitas-trem.component';
import { DetalheVisitaTremComponent } from './componentes/detalhe-visita-trem/detalhe-visita-trem.component';
import { ListaTrabalhoTremComponent } from './componentes/lista-trabalho-trem/lista-trabalho-trem.component';

const routes: Routes = [
  {
    path: '',
    pathMatch: 'full',
    redirectTo: 'visitas'
  },
  {
    path: 'visitas',
    component: ListaVisitasTremComponent
  },
  {
    path: 'visitas/:id/lista-trabalho',
    component: ListaTrabalhoTremComponent
  },
  {
    path: 'visitas/:id',
    component: DetalheVisitaTremComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class FerroviaRoutingModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\ferrovia.module.ts ----- 
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FerroviaRoutingModule } from './ferrovia-routing.module';
import { ListaVisitasTremComponent } from './componentes/lista-visitas-trem/lista-visitas-trem.component';
import { DetalheVisitaTremComponent } from './componentes/detalhe-visita-trem/detalhe-visita-trem.component';
import { ListaTrabalhoTremComponent } from './componentes/lista-trabalho-trem/lista-trabalho-trem.component';

@NgModule({
  declarations: [
    ListaVisitasTremComponent,
    DetalheVisitaTremComponent,
    ListaTrabalhoTremComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    FerroviaRoutingModule
  ]
})
export class FerroviaModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\detalhe-visita-trem\detalhe-visita-trem.component.css ----- 
.detalhe-visita-trem {
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.detalhe-visita-trem header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 12px;
}

.detalhe-visita-trem h1 {
  margin: 0;
  font-size: 1.6rem;
}

.botao-voltar {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  background-color: #4a4a4a;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.botao-voltar:hover,
.botao-voltar:focus {
  background-color: #2f2f2f;
}

.botao-trabalho {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  background-color: #1976d2;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.botao-trabalho:hover,
.botao-trabalho:focus {
  background-color: #0d47a1;
}

.estado-informativo {
  padding: 12px;
  background-color: #eef5ff;
  border-left: 4px solid #005f9e;
  color: #003b63;
}

.estado-erro {
  padding: 12px;
  background-color: #ffecec;
  border-left: 4px solid #c62828;
  color: #7f1d1d;
}

.cartao-detalhe {
  border: 1px solid #dcdcdc;
  border-radius: 8px;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.cartao-detalhe dl {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 16px;
  margin: 0;
}

.cartao-detalhe dt {
  font-weight: 600;
  margin-bottom: 4px;
  color: #333;
}

.cartao-detalhe dd {
  margin: 0;
  color: #111;
  font-size: 1.05rem;
}

.observacao {
  margin-top: 20px;
  color: #555;
  font-style: italic;
}

.painel-operacoes {
  border: 1px solid #dcdcdc;
  border-radius: 8px;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.painel-operacoes h2 {
  margin: 0;
  font-size: 1.4rem;
  color: #1d1d1d;
}

.abas-operacoes {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
}

.abas-operacoes button {
  padding: 8px 16px;
  border: 1px solid #d0d0d0;
  border-radius: 20px;
  background-color: #f5f5f5;
  color: #333;
  cursor: pointer;
  transition: all 0.2s ease;
}

.abas-operacoes button.ativa {
  background-color: #005f9e;
  color: #fff;
  border-color: #005f9e;
}

.abas-operacoes button:not(.ativa):hover,
.abas-operacoes button:not(.ativa):focus {
  background-color: #e0e0e0;
}

.lista-operacoes {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.linha-operacao {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 16px;
  border: 1px solid #e3e3e3;
  border-radius: 6px;
  background-color: #fafafa;
  gap: 16px;
  flex-wrap: wrap;
}

.informacoes-conteiner {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.informacoes-conteiner .identificador {
  font-weight: 600;
  color: #222;
}

.informacoes-conteiner .status {
  font-size: 0.95rem;
  font-weight: 500;
  color: #9c6b00;
}

.informacoes-conteiner .status.concluido {
  color: #117a00;
}

.botao-status {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  background-color: #1e88e5;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.botao-status:disabled {
  background-color: #9bbce0;
  cursor: not-allowed;
}

.botao-status:not(:disabled):hover,
.botao-status:not(:disabled):focus {
  background-color: #1565c0;
}

.estado-sucesso {
  padding: 12px;
  background-color: #e7f8ed;
  border-left: 4px solid #2e7d32;
  color: #1b5e20;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\detalhe-visita-trem\detalhe-visita-trem.component.html ----- 
<section class="detalhe-visita-trem">
  <header>
    <h1>Detalhes da Visita do Trem</h1>
    <button type="button" class="botao-voltar" (click)="voltarParaLista()">Voltar para a lista</button>
    <button type="button"
            class="botao-trabalho"
            *ngIf="visita?.statusVisita === 'CHEGOU'"
            (click)="irParaListaTrabalho()">
      Abrir lista de trabalho
    </button>
  </header>

  <div *ngIf="estaCarregando" class="estado-informativo">Carregando informações do trem...</div>

  <div *ngIf="!estaCarregando && erroCarregamento" class="estado-erro">
    {{ textoSeguro(erroCarregamento) }}
  </div>

  <article *ngIf="!estaCarregando && !erroCarregamento && visita" class="cartao-detalhe">
    <dl>
      <div>
        <dt>Trem</dt>
        <dd>{{ textoSeguro(visita.identificadorTrem) }}</dd>
      </div>
      <div>
        <dt>Operadora Ferroviária</dt>
        <dd>{{ textoSeguro(visita.operadoraFerroviaria) }}</dd>
      </div>
      <div>
        <dt>Previsão de Chegada (ETA)</dt>
        <dd>{{ visita.horaChegadaPrevista | date:'dd/MM/yyyy HH:mm' }}</dd>
      </div>
      <div>
        <dt>Previsão de Partida (ETD)</dt>
        <dd>{{ visita.horaPartidaPrevista | date:'dd/MM/yyyy HH:mm' }}</dd>
      </div>
      <div>
        <dt>Status Atual</dt>
        <dd>{{ textoSeguro(visita.statusVisita) }}</dd>
      </div>
    </dl>
    <p class="observacao">Essas informações são atualizadas diretamente pelo sistema operacional da ferrovia.</p>
  </article>

  <section *ngIf="!estaCarregando && !erroCarregamento && visita" class="painel-operacoes">
    <h2>Planejamento de Contêineres</h2>
    <nav class="abas-operacoes" aria-label="Seleção de operações">
      <button type="button"
              [class.ativa]="abaAtiva === 'DESCARGA'"
              (click)="selecionarAba('DESCARGA')">
        Para Descarregar ({{ obterItensAba('DESCARGA').length }})
      </button>
      <button type="button"
              [class.ativa]="abaAtiva === 'CARGA'"
              (click)="selecionarAba('CARGA')">
        Para Carregar ({{ obterItensAba('CARGA').length }})
      </button>
    </nav>

    <div *ngIf="mensagemOperacao" class="estado-sucesso">{{ textoSeguro(mensagemOperacao) }}</div>
    <div *ngIf="erroOperacao" class="estado-erro">{{ textoSeguro(erroOperacao) }}</div>

    <section class="lista-operacoes" *ngIf="obterItensAba(abaAtiva).length > 0; else semItens">
      <article class="linha-operacao" *ngFor="let item of obterItensAba(abaAtiva)">
        <div class="informacoes-conteiner">
          <span class="identificador">Contêiner: {{ textoSeguro(item.codigoConteiner) }}</span>
          <span class="status" [class.concluido]="estaConcluido(item.statusOperacao)">
            {{ textoSeguro(descricaoStatus(item.statusOperacao)) }}
          </span>
        </div>
        <button type="button"
                class="botao-status"
                [disabled]="estaConcluido(item.statusOperacao) || operacaoEmAndamento"
                (click)="marcarComoConcluido(abaAtiva, item.codigoConteiner)">
          Marcar como concluído
        </button>
      </article>
    </section>

    <ng-template #semItens>
      <p class="estado-informativo">Nenhum contêiner planejado para esta operação.</p>
    </ng-template>
  </section>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\detalhe-visita-trem\detalhe-visita-trem.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { finalize } from 'rxjs/operators';
import { SanitizadorConteudoService } from '../../../service/sanitizacao/sanitizador-conteudo.service';
import {
  OperacaoConteinerVisita,
  ServicoFerroviaService,
  StatusOperacaoConteinerVisita,
  VisitaTrem
} from '../../../service/servico-ferrovia/servico-ferrovia.service';

@Component({
  selector: 'app-detalhe-visita-trem',
  templateUrl: './detalhe-visita-trem.component.html',
  styleUrls: ['./detalhe-visita-trem.component.css']
})
export class DetalheVisitaTremComponent implements OnInit {
  visita?: VisitaTrem;
  estaCarregando = false;
  erroCarregamento?: string;
  abaAtiva: 'DESCARGA' | 'CARGA' = 'DESCARGA';
  mensagemOperacao?: string;
  erroOperacao?: string;
  operacaoEmAndamento = false;

  constructor(
    private readonly rotaAtiva: ActivatedRoute,
    private readonly router: Router,
    private readonly servicoFerrovia: ServicoFerroviaService,
    private readonly sanitizadorConteudo: SanitizadorConteudoService
  ) {}

  ngOnInit(): void {
    this.carregarVisita();
  }

  voltarParaLista(): void {
    this.router.navigate(['/home', 'ferrovia', 'visitas']);
  }

  irParaListaTrabalho(): void {
    if (!this.visita || this.visita.id === undefined || this.visita.id === null) {
      return;
    }
    this.router.navigate(['/home', 'ferrovia', 'visitas', this.visita.id, 'lista-trabalho']);
  }

  textoSeguro(valor: string | null | undefined): string {
    return this.sanitizadorConteudo.sanitizar(valor);
  }

  selecionarAba(aba: 'DESCARGA' | 'CARGA'): void {
    this.abaAtiva = aba;
    this.mensagemOperacao = undefined;
    this.erroOperacao = undefined;
  }

  obterItensAba(aba: 'DESCARGA' | 'CARGA'): OperacaoConteinerVisita[] {
    if (!this.visita) {
      return [];
    }
    return aba === 'DESCARGA' ? this.visita.listaDescarga : this.visita.listaCarga;
  }

  descricaoStatus(status: StatusOperacaoConteinerVisita): string {
    return status === 'CONCLUIDO' ? 'Concluído' : 'Pendente';
  }

  estaConcluido(status: StatusOperacaoConteinerVisita): boolean {
    return status === 'CONCLUIDO';
  }

  marcarComoConcluido(aba: 'DESCARGA' | 'CARGA', codigoConteiner: string): void {
    if (!this.visita || this.operacaoEmAndamento) {
      return;
    }

    this.operacaoEmAndamento = true;
    this.erroOperacao = undefined;
    this.mensagemOperacao = undefined;

    const comando = aba === 'DESCARGA'
      ? this.servicoFerrovia.atualizarStatusDescarga(this.visita.id, codigoConteiner, { statusOperacao: 'CONCLUIDO' })
      : this.servicoFerrovia.atualizarStatusCarga(this.visita.id, codigoConteiner, { statusOperacao: 'CONCLUIDO' });

    comando
      .pipe(finalize(() => this.operacaoEmAndamento = false))
      .subscribe({
        next: (visitaAtualizada) => {
          this.visita = visitaAtualizada;
          this.mensagemOperacao = 'Status atualizado com sucesso.';
        },
        error: () => {
          this.erroOperacao = 'Não foi possível atualizar o status do contêiner.';
        }
      });
  }

  private carregarVisita(): void {
    const parametroId = this.rotaAtiva.snapshot.paramMap.get('id');
    const id = parametroId ? Number(parametroId) : NaN;

    if (!Number.isFinite(id) || id <= 0) {
      this.erroCarregamento = 'Identificador da visita inválido.';
      return;
    }

    this.estaCarregando = true;
    this.erroCarregamento = undefined;
    this.mensagemOperacao = undefined;
    this.erroOperacao = undefined;

    this.servicoFerrovia.obterVisita(id)
      .pipe(finalize(() => this.estaCarregando = false))
      .subscribe({
        next: (visita) => {
          this.visita = visita;
        },
        error: () => {
          this.erroCarregamento = 'Não foi possível localizar a visita do trem solicitada.';
          this.visita = undefined;
        }
      });
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-trabalho-trem\lista-trabalho-trem.component.css ----- 
.lista-trabalho-trem {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background-color: #0b1a2a;
  color: #f5f9ff;
  min-height: 100vh;
}

.cabecalho {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.cabecalho h1 {
  font-size: 1.8rem;
  margin: 0;
}

.acoes-cabecalho {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.instrucoes {
  margin: 0;
  font-size: 1rem;
  color: #cdd9f1;
}

.estado {
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  font-weight: 600;
  text-align: center;
}

.estado-informativo {
  background-color: rgba(39, 71, 120, 0.8);
  color: #f5f9ff;
}

.estado-sucesso {
  background-color: rgba(46, 125, 50, 0.9);
  color: #ecffed;
}

.estado-erro {
  background-color: rgba(198, 40, 40, 0.9);
  color: #fff2f2;
}

.estado.pequeno {
  font-size: 0.85rem;
  margin-top: 0.75rem;
}

.lista-ordens {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  gap: 1rem;
}

.cartao-ordem {
  background: rgba(6, 24, 44, 0.95);
  border: 2px solid rgba(123, 176, 255, 0.5);
  border-radius: 0.75rem;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  box-shadow: 0 0.75rem 1.5rem rgba(0, 0, 0, 0.35);
}

.cartao-cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.5rem;
}

.conteiner {
  font-weight: 700;
  font-size: 1.1rem;
}

.status {
  padding: 0.25rem 0.75rem;
  border-radius: 999px;
  font-size: 0.85rem;
  font-weight: 700;
  color: #0b1a2a;
}

.status-pendente {
  background-color: #ffc400;
}

.status-execucao {
  background-color: #00e5ff;
}

.detalhe {
  margin: 0;
  font-size: 0.95rem;
  color: #d2e2ff;
}

.acoes-ordem {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
}

.botao-acao {
  flex: 1 1 150px;
  padding: 0.75rem;
  border-radius: 0.5rem;
  border: none;
  font-size: 1rem;
  font-weight: 700;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.botao-acao:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

.botao-acao:not(:disabled):hover,
.botao-acao:not(:disabled):focus {
  transform: translateY(-2px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.35);
  outline: none;
}

.botao-primario {
  background: linear-gradient(135deg, #2196f3, #1976d2);
  color: #ffffff;
}

.botao-sucesso {
  background: linear-gradient(135deg, #43a047, #2e7d32);
  color: #ffffff;
}

.botao-secundario {
  background: linear-gradient(135deg, #37474f, #263238);
  color: #ffffff;
}

@media (max-width: 600px) {
  .lista-trabalho-trem {
    padding: 1rem;
  }

  .cabecalho h1 {
    font-size: 1.5rem;
  }

  .botao-acao {
    flex: 1 1 100%;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-trabalho-trem\lista-trabalho-trem.component.html ----- 
<section class="lista-trabalho-trem" aria-live="polite">
  <header class="cabecalho">
    <h1>Lista de Trabalho do Trem</h1>
    <div class="acoes-cabecalho">
      <button type="button"
              class="botao-acao botao-secundario"
              (click)="voltarParaDetalhes()">
        Voltar para detalhes
      </button>
      <button type="button"
              class="botao-acao botao-primario"
              (click)="carregarOrdens()"
              [disabled]="estaCarregando">
        Atualizar lista
      </button>
    </div>
  </header>

  <p class="instrucoes">Selecione uma ordem para assumi-la e finalize-a quando o contêiner estiver movimentado.</p>

  <div *ngIf="estaCarregando" class="estado estado-informativo">
    Carregando ordens de movimentação do trem...
  </div>

  <div *ngIf="mensagemErro" class="estado estado-erro">
    {{ textoSeguro(mensagemErro) }}
  </div>

  <div *ngIf="mensagemSucesso" class="estado estado-sucesso">
    {{ textoSeguro(mensagemSucesso) }}
  </div>

  <section *ngIf="!estaCarregando && ordensVisiveis().length > 0" class="lista-ordens">
    <article *ngFor="let ordem of ordensVisiveis()" class="cartao-ordem">
      <header class="cartao-cabecalho">
        <span class="conteiner">Contêiner {{ textoSeguro(ordem.codigoConteiner) }}</span>
        <span class="status" [ngClass]="{
            'status-pendente': ordem.statusMovimentacao === 'PENDENTE',
            'status-execucao': ordem.statusMovimentacao === 'EM_EXECUCAO'
          }">
          {{ textoSeguro(descricaoStatus(ordem.statusMovimentacao)) }}
        </span>
      </header>
      <p class="detalhe">{{ textoSeguro(descricaoTipo(ordem.tipoMovimentacao)) }}</p>
      <p class="detalhe">Criada em {{ ordem.criadoEm | date:'dd/MM/yyyy HH:mm' }}</p>
      <div class="acoes-ordem">
        <button type="button"
                class="botao-acao botao-primario"
                (click)="assumirOrdem(ordem)"
                [disabled]="!podeAssumir(ordem) || estaEmAtualizacao(ordem)">
          Assumir tarefa
        </button>
        <button type="button"
                class="botao-acao botao-sucesso"
                (click)="concluirOrdem(ordem)"
                [disabled]="!podeConcluir(ordem) || estaEmAtualizacao(ordem)">
          Marcar como concluída
        </button>
      </div>
      <p *ngIf="estaEmAtualizacao(ordem)" class="estado estado-informativo pequeno">Atualizando ordem...</p>
    </article>
  </section>

  <p *ngIf="!estaCarregando && ordensVisiveis().length === 0 && !mensagemErro" class="estado estado-informativo">
    Nenhuma ordem pendente ou em execução para este trem.
  </p>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-trabalho-trem\lista-trabalho-trem.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { finalize } from 'rxjs/operators';
import { SanitizadorConteudoService } from '../../../service/sanitizacao/sanitizador-conteudo.service';
import {
  OrdemMovimentacao,
  ServicoListaTrabalhoTremService,
  StatusOrdemMovimentacao,
  TipoMovimentacaoOrdem
} from '../../../service/servico-lista-trabalho-trem/servico-lista-trabalho-trem.service';

interface OrdemVisivel extends OrdemMovimentacao {
  emAtualizacao?: boolean;
}

@Component({
  selector: 'app-lista-trabalho-trem',
  templateUrl: './lista-trabalho-trem.component.html',
  styleUrls: ['./lista-trabalho-trem.component.css']
})
export class ListaTrabalhoTremComponent implements OnInit {
  visitaId?: number;
  ordens: OrdemVisivel[] = [];
  estaCarregando = false;
  mensagemSucesso?: string;
  mensagemErro?: string;

  constructor(
    private readonly rotaAtiva: ActivatedRoute,
    private readonly router: Router,
    private readonly servicoListaTrabalho: ServicoListaTrabalhoTremService,
    private readonly sanitizador: SanitizadorConteudoService
  ) {}

  ngOnInit(): void {
    const parametroId = this.rotaAtiva.snapshot.paramMap.get('id');
    const id = parametroId ? Number(parametroId) : NaN;
    if (!Number.isFinite(id) || id <= 0) {
      this.mensagemErro = 'Identificador do trem inválido.';
      return;
    }
    this.visitaId = id;
    this.carregarOrdens();
  }

  carregarOrdens(): void {
    if (!this.visitaId) {
      return;
    }
    this.estaCarregando = true;
    this.mensagemErro = undefined;
    this.mensagemSucesso = undefined;
    this.servicoListaTrabalho.listarOrdens(this.visitaId)
      .pipe(finalize(() => this.estaCarregando = false))
      .subscribe({
        next: (ordens) => {
          this.ordens = this.organizarOrdens(ordens);
        },
        error: () => {
          this.ordens = [];
          this.mensagemErro = 'Não foi possível carregar as ordens de movimentação do trem.';
        }
      });
  }

  assumirOrdem(ordem: OrdemVisivel): void {
    this.atualizarStatus(ordem, 'EM_EXECUCAO');
  }

  concluirOrdem(ordem: OrdemVisivel): void {
    this.atualizarStatus(ordem, 'CONCLUIDA');
  }

  podeAssumir(ordem: OrdemMovimentacao): boolean {
    return ordem.statusMovimentacao === 'PENDENTE';
  }

  podeConcluir(ordem: OrdemMovimentacao): boolean {
    return ordem.statusMovimentacao === 'EM_EXECUCAO';
  }

  estaEmAtualizacao(ordem: OrdemVisivel): boolean {
    return !!ordem.emAtualizacao;
  }

  voltarParaDetalhes(): void {
    if (this.visitaId) {
      this.router.navigate(['/home', 'ferrovia', 'visitas', this.visitaId]);
    }
  }

  descricaoStatus(status: StatusOrdemMovimentacao): string {
    switch (status) {
      case 'EM_EXECUCAO':
        return 'Em execução';
      case 'CONCLUIDA':
        return 'Concluída';
      default:
        return 'Pendente';
    }
  }

  descricaoTipo(tipo: TipoMovimentacaoOrdem): string {
    return tipo === 'DESCARGA_TREM' ? 'Descarga do trem' : 'Carga no trem';
  }

  textoSeguro(valor: string | null | undefined): string {
    return this.sanitizador.sanitizar(valor);
  }

  ordensVisiveis(): OrdemVisivel[] {
    return this.ordens.filter(ordem => ordem.statusMovimentacao !== 'CONCLUIDA');
  }

  private atualizarStatus(ordem: OrdemVisivel, status: StatusOrdemMovimentacao): void {
    if (!this.visitaId || !ordem || ordem.emAtualizacao) {
      return;
    }
    ordem.emAtualizacao = true;
    this.mensagemErro = undefined;
    this.mensagemSucesso = undefined;

    this.servicoListaTrabalho.atualizarStatus(this.visitaId, ordem.id, status)
      .pipe(finalize(() => {
        ordem.emAtualizacao = false;
      }))
      .subscribe({
        next: (ordemAtualizada) => {
          ordem.statusMovimentacao = ordemAtualizada.statusMovimentacao;
          ordem.atualizadoEm = ordemAtualizada.atualizadoEm;
          ordem.criadoEm = ordemAtualizada.criadoEm;
          if (ordem.statusMovimentacao === 'CONCLUIDA') {
            this.ordens = this.ordens.filter(item => item.id !== ordem.id);
            this.mensagemSucesso = 'Ordem concluída com sucesso.';
          } else {
            this.mensagemSucesso = 'Ordem assumida com sucesso.';
          }
        },
        error: () => {
          this.mensagemErro = status === 'CONCLUIDA'
            ? 'Não foi possível concluir a ordem. Tente novamente.'
            : 'Não foi possível assumir a ordem. Tente novamente.';
        }
      });
  }

  private organizarOrdens(ordens: OrdemMovimentacao[]): OrdemVisivel[] {
    return [...(ordens ?? [])]
      .sort((a, b) => {
        const dataA = Date.parse(a?.criadoEm ?? '') || 0;
        const dataB = Date.parse(b?.criadoEm ?? '') || 0;
        return dataA - dataB;
      })
      .map(ordem => ({ ...ordem, emAtualizacao: false }));
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-visitas-trem\lista-visitas-trem.component.css ----- 
.lista-visitas-trem {
  display: flex;
  flex-direction: column;
  gap: 16px;
  padding: 16px;
}

.cabecalho-visitas {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  flex-wrap: wrap;
  gap: 12px;
}

.cabecalho-visitas h1 {
  margin: 0;
  font-size: 1.6rem;
}

.cabecalho-visitas .descricao {
  margin: 4px 0 0;
  color: #555;
}

.acoes-cabecalho {
  display: flex;
  align-items: center;
  gap: 12px;
}

.campo-dias {
  display: flex;
  flex-direction: column;
  font-size: 0.95rem;
  color: #333;
}

.campo-dias input {
  margin-top: 4px;
  padding: 4px 8px;
  border: 1px solid #c5c5c5;
  border-radius: 4px;
  width: 120px;
}

.botao-ordenacao {
  padding: 8px 12px;
  border: none;
  border-radius: 4px;
  background-color: #005f9e;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.botao-ordenacao:hover,
.botao-ordenacao:focus {
  background-color: #004b7a;
}

.estado-informativo {
  padding: 12px;
  background-color: #eef5ff;
  border-left: 4px solid #005f9e;
  color: #003b63;
}

.estado-erro {
  padding: 12px;
  background-color: #ffecec;
  border-left: 4px solid #c62828;
  color: #7f1d1d;
}

.tabela-visitas {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border: 1px solid #dcdcdc;
}

.tabela-visitas th,
.tabela-visitas td {
  padding: 12px 16px;
  border-bottom: 1px solid #e6e6e6;
  text-align: left;
}

.tabela-visitas thead {
  background-color: #f5f7fa;
}

.tabela-visitas .coluna-data {
  min-width: 180px;
}

.linha-visita {
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.linha-visita:hover,
.linha-visita:focus {
  background-color: #f0f7ff;
}

.linha-visita:focus {
  outline: 2px solid #005f9e;
  outline-offset: -2px;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-visitas-trem\lista-visitas-trem.component.html ----- 
<section class="lista-visitas-trem">
  <header class="cabecalho-visitas">
    <div>
      <h1>Visitas de Trem</h1>
      <p class="descricao">Planeje o pátio acompanhando os trens previstos e em atendimento.</p>
    </div>
    <div class="acoes-cabecalho">
      <label for="filtroDias" class="campo-dias">
        Período (dias):
        <input
          id="filtroDias"
          type="number"
          min="1"
          max="30"
          [(ngModel)]="diasFiltro"
          (ngModelChange)="aoAlterarDias()"
        />
      </label>
      <button type="button" class="botao-ordenacao" (click)="alternarOrdenacao()">
        Ordenar por ETA {{ ordenacaoAscendente ? '▲' : '▼' }}
      </button>
    </div>
  </header>

  <div *ngIf="estaCarregando" class="estado-informativo">Carregando visitas de trem...</div>

  <div *ngIf="!estaCarregando && erroCarregamento" class="estado-erro">
    {{ textoSeguro(erroCarregamento) }}
  </div>

  <table *ngIf="!estaCarregando && !erroCarregamento && visitas.length > 0" class="tabela-visitas" aria-label="Tabela de visitas de trem">
    <thead>
      <tr>
        <th scope="col">Trem</th>
        <th scope="col">Operadora</th>
        <th scope="col" class="coluna-data">ETA</th>
        <th scope="col" class="coluna-data">ETD</th>
        <th scope="col">Status</th>
      </tr>
    </thead>
    <tbody>
      <tr
        *ngFor="let visita of visitas"
        (click)="verDetalhes(visita)"
        tabindex="0"
        (keyup.enter)="verDetalhes(visita)"
        (keyup.space)="verDetalhes(visita)"
        class="linha-visita"
        aria-label="Selecionar visita de trem"
      >
        <td>{{ textoSeguro(visita.identificadorTrem) }}</td>
        <td>{{ textoSeguro(visita.operadoraFerroviaria) }}</td>
        <td>{{ visita.horaChegadaPrevista | date:'dd/MM/yyyy HH:mm' }}</td>
        <td>{{ visita.horaPartidaPrevista | date:'dd/MM/yyyy HH:mm' }}</td>
        <td>{{ textoSeguro(visita.statusVisita) }}</td>
      </tr>
    </tbody>
  </table>

  <div *ngIf="!estaCarregando && !erroCarregamento && visitas.length === 0" class="estado-informativo">
    Nenhuma visita de trem encontrada para o período selecionado.
  </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\ferrovia\componentes\lista-visitas-trem\lista-visitas-trem.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { finalize } from 'rxjs/operators';
import { SanitizadorConteudoService } from '../../../service/sanitizacao/sanitizador-conteudo.service';
import { ServicoFerroviaService, VisitaTrem } from '../../../service/servico-ferrovia/servico-ferrovia.service';

@Component({
  selector: 'app-lista-visitas-trem',
  templateUrl: './lista-visitas-trem.component.html',
  styleUrls: ['./lista-visitas-trem.component.css']
})
export class ListaVisitasTremComponent implements OnInit {
  visitas: VisitaTrem[] = [];
  estaCarregando = false;
  erroCarregamento?: string;
  ordenacaoAscendente = true;
  diasFiltro = 7;

  constructor(
    private readonly servicoFerrovia: ServicoFerroviaService,
    private readonly sanitizadorConteudo: SanitizadorConteudoService,
    private readonly router: Router
  ) {}

  ngOnInit(): void {
    this.carregarVisitas();
  }

  carregarVisitas(): void {
    this.estaCarregando = true;
    this.erroCarregamento = undefined;
    const diasConsulta = this.normalizarDiasFiltro(this.diasFiltro);
    this.servicoFerrovia.listarVisitasProximosDias(diasConsulta)
      .pipe(finalize(() => this.estaCarregando = false))
      .subscribe({
        next: (visitas) => {
          this.visitas = this.ordenarPorEta(visitas, this.ordenacaoAscendente);
        },
        error: () => {
          this.erroCarregamento = 'Não foi possível carregar as visitas de trem. Atualize a página ou tente novamente mais tarde.';
          this.visitas = [];
        }
      });
  }

  alternarOrdenacao(): void {
    this.ordenacaoAscendente = !this.ordenacaoAscendente;
    this.visitas = this.ordenarPorEta(this.visitas, this.ordenacaoAscendente);
  }

  aoAlterarDias(): void {
    this.diasFiltro = this.normalizarDiasFiltro(this.diasFiltro);
    this.carregarVisitas();
  }

  verDetalhes(visita: VisitaTrem): void {
    if (!visita || visita.id === undefined || visita.id === null) {
      return;
    }
    this.router.navigate(['/home', 'ferrovia', 'visitas', visita.id]);
  }

  textoSeguro(valor: string | null | undefined): string {
    return this.sanitizadorConteudo.sanitizar(valor);
  }

  private ordenarPorEta(visitas: VisitaTrem[], ascendente: boolean): VisitaTrem[] {
    const ordenadas = [...(visitas ?? [])].sort((a, b) => {
      const tempoA = Date.parse(a?.horaChegadaPrevista ?? '') || 0;
      const tempoB = Date.parse(b?.horaChegadaPrevista ?? '') || 0;
      return tempoA - tempoB;
    });
    return ascendente ? ordenadas : ordenadas.reverse();
  }

  private normalizarDiasFiltro(valor: number): number {
    if (!Number.isFinite(valor)) {
      return 7;
    }
    const inteiro = Math.floor(Math.abs(valor));
    if (inteiro < 1) {
      return 1;
    }
    if (inteiro > 30) {
      return 30;
    }
    return inteiro;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\footer\footer.component.css ----- 
.footer {
    background-color: #234986;
    padding: 0.0em 0.5em;  /* diminuiu a altura do padding de 1em para 0.5em */
    color: #fff;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    margin-top: 0em;
    position: fixed;
    bottom: 0;
    width: 100%;
    text-align: center;
    border-radius: 0px;
} 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\footer\footer.component.html ----- 
<div class="footer">
    <small>
        <p>© 2023 CloudPorts. Todos os direitos reservados.</p>
    </small>
</div> 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\footer\footer.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [FooterComponent]
    });
    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\footer\footer.component.ts ----- 
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.css']
})
export class FooterComponent {

}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\gate-routing.module.ts ----- 
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { GateAgendamentosComponent } from './agendamentos/gate-agendamentos.component';
import { GateJanelasComponent } from './janelas/gate-janelas.component';
import { GateDashboardComponent } from './analytics/gate-dashboard/gate-dashboard.component';
import { GateRelatoriosComponent } from './analytics/gate-relatorios/gate-relatorios.component';
import { GateOperadorConsoleComponent } from './operador/gate-operador-console/gate-operador-console.component';
import { GateOperadorEventosComponent } from './operador/gate-operador-eventos/gate-operador-eventos.component';

const routes: Routes = [
  { path: '', redirectTo: 'agendamentos', pathMatch: 'full' },
  { path: 'agendamentos', component: GateAgendamentosComponent },
  { path: 'janelas', component: GateJanelasComponent },
  { path: 'dashboard', component: GateDashboardComponent },
  { path: 'relatorios', component: GateRelatoriosComponent },
  {
    path: 'operador',
    children: [
      { path: '', redirectTo: 'console', pathMatch: 'full' },
      { path: 'console', component: GateOperadorConsoleComponent },
      { path: 'eventos', component: GateOperadorEventosComponent }
    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class GateRoutingModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\gate.module.ts ----- 
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GateRoutingModule } from './gate-routing.module';
import { GateAgendamentosComponent } from './agendamentos/gate-agendamentos.component';
import { GateJanelasComponent } from './janelas/gate-janelas.component';
import { GateDashboardComponent } from './analytics/gate-dashboard/gate-dashboard.component';
import { GateRelatoriosComponent } from './analytics/gate-relatorios/gate-relatorios.component';
import { AgendamentosListComponent } from './portal/agendamentos-list/agendamentos-list.component';
import { AgendamentoFormComponent } from './portal/agendamento-form/agendamento-form.component';
import { AgendamentoDetalheComponent } from './portal/agendamento-detalhe/agendamento-detalhe.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { DynamicTableModule } from '../../dynamic-table/dynamic-table.module';
import { NgChartsModule } from 'ng2-charts';
import { NgxQRCodeModule } from 'ngx-qrcode2';
import { TranslateModule } from '@ngx-translate/core';
import { GateOperadorConsoleComponent } from './operador/gate-operador-console/gate-operador-console.component';
import { GateOperadorEventosComponent } from './operador/gate-operador-eventos/gate-operador-eventos.component';
import { MotoristaPassComponent } from './portal/motorista-pass/motorista-pass.component';

@NgModule({
  declarations: [
    GateAgendamentosComponent,
    GateJanelasComponent,
    GateDashboardComponent,
    GateRelatoriosComponent,
    AgendamentosListComponent,
    AgendamentoFormComponent,
    AgendamentoDetalheComponent,
    GateOperadorConsoleComponent,
    GateOperadorEventosComponent,
    MotoristaPassComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    DynamicTableModule,
    NgChartsModule,
    NgxQRCodeModule,
    TranslateModule,
    GateRoutingModule
  ]
})
export class GateModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\agendamentos\gate-agendamentos.component.css ----- 
.central-acao {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem 1rem 2rem;
  max-width: 960px;
  margin: 0 auto;
}

.central-acao__cabecalho {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: 1rem;
}

.central-acao__cabecalho h2 {
  margin: 0 0 0.25rem;
  font-size: 1.5rem;
}

.central-acao__saudacao {
  margin: 0;
  font-size: 0.95rem;
  color: #274472;
}

.central-acao__patio {
  background-color: rgba(39, 68, 114, 0.08);
  border-radius: 12px;
  padding: 0.75rem 1rem;
  font-size: 0.95rem;
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  color: #1f2937;
}

.central-acao__mensagem {
  margin: 0;
  padding: 0.75rem 1rem;
  border-radius: 10px;
  font-size: 0.95rem;
}

.central-acao__mensagem--erro {
  background-color: rgba(220, 38, 38, 0.1);
  color: #991b1b;
}

.central-acao__mensagem--sucesso {
  background-color: rgba(22, 163, 74, 0.1);
  color: #047857;
}

.central-acao__cards {
  display: grid;
  gap: 1.25rem;
}

.central-acao__card {
  background: #ffffff;
  border-radius: 16px;
  padding: 1.25rem;
  box-shadow: 0 12px 30px rgba(15, 23, 42, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.card-acao__cabecalho {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.card-acao__cabecalho-linha {
  display: flex;
  justify-content: space-between;
  align-items: baseline;
  gap: 0.75rem;
}

.card-acao__codigo {
  font-weight: 600;
  color: #1f2937;
}

.card-acao__status {
  font-size: 0.85rem;
  padding: 0.25rem 0.75rem;
  border-radius: 999px;
  background-color: rgba(148, 163, 184, 0.2);
  color: #475569;
  text-transform: uppercase;
  letter-spacing: 0.04em;
}

.card-acao__status--ativo {
  background-color: rgba(22, 163, 74, 0.12);
  color: #047857;
}

.card-acao__status--inativo {
  background-color: rgba(234, 179, 8, 0.18);
  color: #92400e;
}

.card-acao__janela {
  margin: 0;
  font-size: 0.9rem;
  color: #2563eb;
  font-weight: 500;
}

.card-acao__informacoes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 0.75rem;
  margin: 0;
}

.card-acao__informacoes dt {
  font-size: 0.75rem;
  text-transform: uppercase;
  color: #6b7280;
  margin-bottom: 0.15rem;
}

.card-acao__informacoes dd {
  margin: 0;
  font-weight: 600;
  color: #1f2937;
  font-size: 0.95rem;
}

.card-acao__documentos {
  background-color: rgba(59, 130, 246, 0.08);
  border-radius: 12px;
  padding: 0.75rem 1rem;
}

.card-acao__documentos h4 {
  margin: 0 0 0.5rem;
  font-size: 0.95rem;
  color: #1d4ed8;
}

.card-acao__documentos ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 0.35rem;
}

.card-acao__documentos li {
  display: flex;
  flex-direction: column;
  gap: 0.15rem;
  color: #1f2937;
}

.card-acao__documentos small {
  color: #1d4ed8;
  font-size: 0.8rem;
}

.card-acao__orientacao {
  margin: 0;
  font-size: 0.95rem;
  color: #1f2937;
  line-height: 1.4;
}

.card-acao__botao {
  width: 100%;
  justify-content: center;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  min-height: 2.75rem;
  font-weight: 600;
}

.card-acao__descricao {
  margin: 0;
  font-size: 0.85rem;
  color: #4b5563;
}

.card-acao__spinner {
  width: 1rem;
  height: 1rem;
  border-radius: 999px;
  border: 2px solid rgba(255, 255, 255, 0.6);
  border-top-color: rgba(255, 255, 255, 1);
  animation: girar 0.8s linear infinite;
}

.central-acao__vazio {
  text-align: center;
  padding: 1.5rem;
  border-radius: 12px;
  background-color: rgba(148, 163, 184, 0.15);
  color: #1f2937;
  font-size: 0.95rem;
}

@keyframes girar {
  to {
    transform: rotate(360deg);
  }
}

@media (min-width: 768px) {
  .central-acao {
    padding: 2rem 1.5rem 3rem;
  }

  .central-acao__cards {
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\agendamentos\gate-agendamentos.component.html ----- 
<section class="central-acao">
  <header class="central-acao__cabecalho">
    <div>
      <h2>{{ titulo }}</h2>
      <p class="central-acao__saudacao" *ngIf="resposta?.usuario?.nome">
        Olá, {{ resposta?.usuario?.nome }}!
      </p>
      <p class="central-acao__saudacao" *ngIf="resposta?.usuario?.transportadoraNome">
        {{ resposta?.usuario?.transportadoraNome }}
      </p>
    </div>
    <button type="button" class="btn btn--terciario" (click)="carregarVisao()" [disabled]="carregando">
      {{ carregando ? 'Atualizando…' : 'Atualizar visão' }}
    </button>
  </header>

  <section class="central-acao__patio" *ngIf="resposta?.situacaoPatio as patio">
    <strong>Situação do pátio:</strong>
    <span>{{ patio.descricao || patio.status || 'Indisponível' }}</span>
    <small *ngIf="patio.verificadoEm">Verificado em {{ patio.verificadoEm | date: 'dd/MM/yyyy HH:mm' }}</small>
  </section>

  <p class="central-acao__mensagem central-acao__mensagem--erro" *ngIf="erroCarregamento">{{ erroCarregamento }}</p>
  <p class="central-acao__mensagem central-acao__mensagem--sucesso" *ngIf="mensagemSucesso">{{ mensagemSucesso }}</p>
  <p class="central-acao__mensagem" *ngIf="carregando">Carregando visão consolidada do seu agendamento…</p>

  <section *ngIf="!carregando && resposta?.agendamentos?.length" class="central-acao__cards">
    <article
      *ngFor="let card of resposta?.agendamentos; trackBy: trackPorId"
      class="central-acao__card"
      aria-label="Card de ação do agendamento"
    >
      <header class="card-acao__cabecalho">
        <div class="card-acao__cabecalho-linha">
          <span class="card-acao__codigo">Agendamento {{ card.codigo }}</span>
          <span
            class="card-acao__status"
            [ngClass]="{
              'card-acao__status--ativo': card.acaoPrincipal?.habilitada,
              'card-acao__status--inativo': !card.acaoPrincipal?.habilitada
            }"
          >
            {{ card.statusDescricao || card.status }}
          </span>
        </div>
        <p class="card-acao__janela">{{ formatarJanela(card) }}</p>
      </header>

      <dl class="card-acao__informacoes">
        <div>
          <dt>Motorista</dt>
          <dd>{{ card.motoristaNome || 'Não informado' }}</dd>
        </div>
        <div>
          <dt>Transportadora</dt>
          <dd>{{ card.transportadoraNome || 'Não informado' }}</dd>
        </div>
        <div>
          <dt>Veículo</dt>
          <dd>{{ card.placaVeiculo || '—' }}</dd>
        </div>
        <div>
          <dt>Chegada prevista</dt>
          <dd>{{ formatarHorario(card.horarioPrevistoChegada) }}</dd>
        </div>
      </dl>

      <section class="card-acao__documentos" *ngIf="card.documentosPendentes?.length">
        <h4>Documentos pendentes</h4>
        <ul>
          <li *ngFor="let documento of card.documentosPendentes">
            <span>{{ documento.nomeArquivo }}</span>
            <small>{{ documento.mensagem || 'Aguardando validação automática' }}</small>
          </li>
        </ul>
      </section>

      <p class="card-acao__orientacao" *ngIf="card.mensagemOrientacao">{{ card.mensagemOrientacao }}</p>

      <button
        type="button"
        class="btn btn--primario card-acao__botao"
        (click)="executarAcao(card)"
        [disabled]="!card.acaoPrincipal?.habilitada || acaoEmExecucao === card.agendamentoId"
      >
        <span *ngIf="acaoEmExecucao === card.agendamentoId" class="card-acao__spinner" aria-hidden="true"></span>
        {{ card.acaoPrincipal?.titulo || 'Sem ações disponíveis' }}
      </button>
      <p class="card-acao__descricao" *ngIf="card.acaoPrincipal?.descricao">{{ card.acaoPrincipal?.descricao }}</p>
    </article>
  </section>

  <div class="central-acao__vazio" *ngIf="!carregando && resposta && (!resposta.agendamentos || !resposta.agendamentos.length)">
    Nenhuma ação pendente no momento. Revise sua documentação e acompanhe as notificações.
  </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\agendamentos\gate-agendamentos.component.ts ----- 
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject } from 'rxjs';
import { finalize, takeUntil } from 'rxjs/operators';
import { GateApiService } from '../../service/servico-gate/gate-api.service';
import {
  CentralAcaoAgendamentoResposta,
  VisaoCompletaAgendamento
} from '../../model/gate/agendamento.model';

@Component({
  selector: 'app-gate-agendamentos',
  templateUrl: './gate-agendamentos.component.html',
  styleUrls: ['./gate-agendamentos.component.css']
})
export class GateAgendamentosComponent implements OnInit, OnDestroy {
  readonly titulo = 'Central de Ação do Gate';

  carregando = false;
  erroCarregamento: string | null = null;
  mensagemSucesso: string | null = null;
  resposta: CentralAcaoAgendamentoResposta | null = null;
  acaoEmExecucao: number | null = null;

  private readonly destruir$ = new Subject<void>();

  constructor(private readonly gateApi: GateApiService) {}

  ngOnInit(): void {
    this.carregarVisao();
  }

  ngOnDestroy(): void {
    this.destruir$.next();
    this.destruir$.complete();
  }

  carregarVisao(): void {
    if (this.carregando) {
      return;
    }
    this.carregando = true;
    this.erroCarregamento = null;
    this.mensagemSucesso = null;
    this.gateApi
      .obterCentralAcaoAgendamentos()
      .pipe(
        finalize(() => (this.carregando = false)),
        takeUntil(this.destruir$)
      )
      .subscribe({
        next: (resposta) => {
          this.resposta = {
            ...resposta,
            agendamentos: resposta?.agendamentos ?? []
          };
        },
        error: () => {
          this.erroCarregamento = 'Não foi possível carregar seus agendamentos. Tente novamente em instantes.';
          this.resposta = null;
        }
      });
  }

  executarAcao(card: VisaoCompletaAgendamento): void {
    const acao = card.acaoPrincipal;
    if (!acao || !acao.habilitada) {
      return;
    }
    this.acaoEmExecucao = card.agendamentoId;
    this.erroCarregamento = null;
    this.mensagemSucesso = null;
    this.gateApi
      .executarAcaoCentral(acao)
      .pipe(
        finalize(() => (this.acaoEmExecucao = null)),
        takeUntil(this.destruir$)
      )
      .subscribe({
        next: () => {
          this.mensagemSucesso = 'Ação enviada com sucesso.';
          this.carregarVisao();
        },
        error: () => {
          this.erroCarregamento = 'Não foi possível concluir a ação. Confirme sua conexão e tente novamente.';
        }
      });
  }

  formatarJanela(card: VisaoCompletaAgendamento): string {
    if (!card.janelaData) {
      return 'Janela não definida';
    }
    const data = new Date(card.janelaData);
    const dataFormatada = Number.isNaN(data.getTime()) ? card.janelaData : data.toLocaleDateString('pt-BR');
    const inicio = this.formatarHorario(card.janelaHoraInicio);
    const fim = this.formatarHorario(card.janelaHoraFim);
    return `${dataFormatada} ${inicio} - ${fim}`.trim();
  }

  formatarHorario(valor: string | null): string {
    if (!valor) {
      return '—';
    }
    const data = new Date(valor);
    if (!Number.isNaN(data.getTime())) {
      return data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    }
    if (valor.includes('T')) {
      const [, horario] = valor.split('T');
      if (horario && horario.length >= 5) {
        return horario.substring(0, 5);
      }
    }
    return valor.length > 5 ? valor.substring(0, 5) : valor;
  }

  trackPorId(_: number, card: VisaoCompletaAgendamento): number {
    return card.agendamentoId;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\analytics-preferences.ts ----- 
export type GateChartType = 'bar' | 'line';

export interface GateAnalyticsPreferences {
  inicio?: string | null;
  fim?: string | null;
  transportadoraId?: number | null;
  tipoOperacao?: string | null;
  tipoGrafico?: GateChartType;
}

const STORAGE_KEY = 'gate-analytics-preferences';

export function carregarPreferencias(): GateAnalyticsPreferences | null {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (!raw) {
      return null;
    }
    return JSON.parse(raw) as GateAnalyticsPreferences;
  } catch {
    return null;
  }
}

export function salvarPreferencias(preferencias: GateAnalyticsPreferences): void {
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(preferencias));
  } catch {
    // armazenamento indisponível, seguir sem persistir
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-dashboard\gate-dashboard.component.css ----- 
:host {
  display: block;
  color: var(--cp-on-surface-color, #0f172a);
}

.gate-analytics {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background-color: var(--cp-surface-color, rgba(255, 255, 255, 0.88));
  border-radius: 16px;
  box-shadow: 0 12px 30px rgba(15, 23, 42, 0.12);
  backdrop-filter: blur(6px);
  color: inherit;
}

.dark-theme .gate-analytics,
:host-context(.dark-theme) .gate-analytics {
  background-color: var(--cp-surface-elevated-color, rgba(15, 23, 42, 0.72));
  box-shadow: 0 12px 30px rgba(2, 6, 23, 0.45);
}

.cabecalho h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
}

.cabecalho .descricao {
  margin: 0.25rem 0 0;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 0.9));
}

.filtros {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1rem;
  align-items: end;
}

.campo {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.campo label {
  font-weight: 600;
  font-size: 0.875rem;
}

.campo input,
.campo select {
  appearance: none;
  border: 1px solid var(--cp-border-color, rgba(148, 163, 184, 0.4));
  border-radius: 8px;
  padding: 0.5rem 0.75rem;
  background-color: var(--cp-input-background, rgba(255, 255, 255, 0.95));
  color: inherit;
  font: inherit;
  min-height: 2.25rem;
}

.dark-theme .campo input,
.dark-theme .campo select,
:host-context(.dark-theme) .campo input,
:host-context(.dark-theme) .campo select {
  background-color: var(--cp-input-background-dark, rgba(15, 23, 42, 0.85));
  border-color: var(--cp-border-color-dark, rgba(148, 163, 184, 0.5));
}

.campo input:focus,
.campo select:focus,
.botao-secundario:focus {
  outline: 3px solid var(--cp-focus-color, rgba(59, 130, 246, 0.5));
  outline-offset: 2px;
}

.ajuda {
  font-size: 0.75rem;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 0.9));
}

.acoes {
  display: flex;
  justify-content: flex-end;
}

.botao-secundario {
  border: 1px solid var(--cp-border-color, rgba(59, 130, 246, 0.5));
  border-radius: 999px;
  padding: 0.5rem 1.25rem;
  background: transparent;
  color: inherit;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.botao-secundario:hover {
  background-color: rgba(59, 130, 246, 0.12);
}

.dark-theme .botao-secundario:hover,
:host-context(.dark-theme) .botao-secundario:hover {
  background-color: rgba(148, 163, 184, 0.18);
}

.estado {
  font-size: 0.95rem;
}

.estado.erro {
  color: #ef4444;
  font-weight: 600;
}

.resumo {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 1rem;
}

.card {
  background-color: var(--cp-surface-elevated-color, rgba(255, 255, 255, 0.95));
  border-radius: 14px;
  padding: 1rem;
  box-shadow: inset 0 0 0 1px var(--cp-border-color, rgba(148, 163, 184, 0.2));
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.dark-theme .card,
:host-context(.dark-theme) .card {
  background-color: var(--cp-surface-higher-color, rgba(30, 41, 59, 0.8));
  box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.25);
}

.card h3 {
  margin: 0;
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 1));
}

.dark-theme .card h3,
:host-context(.dark-theme) .card h3 {
  color: var(--cp-on-surface-muted-dark, rgba(203, 213, 225, 0.9));
}

.card p {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 700;
}

.graficos {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 1.5rem;
}

.grafico {
  background-color: var(--cp-surface-elevated-color, rgba(255, 255, 255, 0.95));
  border-radius: 16px;
  padding: 1rem;
  min-height: 260px;
  box-shadow: inset 0 0 0 1px var(--cp-border-color, rgba(148, 163, 184, 0.18));
}

.dark-theme .grafico,
:host-context(.dark-theme) .grafico {
  background-color: var(--cp-surface-higher-color, rgba(30, 41, 59, 0.85));
  box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.2);
}

@media (max-width: 768px) {
  .gate-analytics {
    padding: 1rem;
  }

  .filtros {
    grid-template-columns: 1fr;
  }

  .acoes {
    justify-content: stretch;
  }

  .botao-secundario {
    width: 100%;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-dashboard\gate-dashboard.component.html ----- 
<section class="gate-analytics" aria-labelledby="gateDashboardTitulo">
  <header class="cabecalho">
    <div>
      <h2 id="gateDashboardTitulo">Dashboard do Gate</h2>
      <p class="descricao">Acompanhe a ocupação de slots, pontualidade e tempos médios do gate em tempo real.</p>
    </div>
  </header>

  <form class="filtros" [formGroup]="filtrosForm" aria-label="Filtros do dashboard">
    <div class="campo">
      <label for="inicio">Início</label>
      <input id="inicio" type="date" formControlName="inicio" aria-describedby="inicioHelp" />
      <span id="inicioHelp" class="ajuda">Selecione a data inicial do período analisado.</span>
    </div>

    <div class="campo">
      <label for="fim">Fim</label>
      <input id="fim" type="date" formControlName="fim" aria-describedby="fimHelp" />
      <span id="fimHelp" class="ajuda">Selecione a data final do período analisado.</span>
    </div>

    <div class="campo">
      <label for="transportadora">Transportadora</label>
      <select id="transportadora" formControlName="transportadoraId">
        <option [ngValue]="null">Todas</option>
        <option
          *ngFor="let transportadora of transportadoras$ | async"
          [ngValue]="transportadora.codigo && !isNaN(+transportadora.codigo) ? +transportadora.codigo : null"
        >
          {{ transportadora.descricao }}
        </option>
      </select>
    </div>

    <div class="campo">
      <label for="tipoOperacao">Tipo de operação</label>
      <select id="tipoOperacao" formControlName="tipoOperacao">
        <option value="">Todas</option>
        <option *ngFor="let tipo of tiposOperacao$ | async" [value]="tipo.codigo">{{ tipo.descricao }}</option>
      </select>
    </div>

    <div class="campo">
      <label for="tipoGrafico">Tipo de gráfico</label>
      <select id="tipoGrafico" formControlName="tipoGrafico">
        <option value="bar">Colunas</option>
        <option value="line">Linhas</option>
      </select>
    </div>

    <div class="acoes">
      <button type="button" class="botao-secundario" (click)="limparFiltros()">Limpar filtros</button>
    </div>
  </form>

  <div class="estado" *ngIf="carregando" aria-live="polite">
    Carregando indicadores...
  </div>

  <div class="estado erro" *ngIf="erro" role="alert">
    {{ erro }}
  </div>

  <section class="resumo" *ngIf="resumo as dados">
    <article class="card" aria-live="polite">
      <h3>Total de agendamentos</h3>
      <p>{{ dados.totalAgendamentos | number:'1.0-0' }}</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>Pontualidade</h3>
      <p>{{ dados.percentualPontualidade | number:'1.1-1' }}%</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>No-show</h3>
      <p>{{ dados.percentualNoShow | number:'1.1-1' }}%</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>Tempo médio turnaround</h3>
      <p>{{ dados.tempoMedioTurnaroundMinutos | number:'1.0-0' }} min</p>
    </article>
  </section>

  <section class="graficos" *ngIf="resumo">
    <div class="grafico" role="img" aria-label="Ocupação de slots por hora">
      <canvas baseChart [data]="ocupacaoChart" [options]="ocupacaoOptions" [type]="chartType"></canvas>
    </div>
    <div class="grafico" role="img" aria-label="Tempo médio de permanência em minutos">
      <canvas baseChart [data]="turnaroundChart" [options]="turnaroundOptions" [type]="chartType"></canvas>
    </div>
    <div class="grafico" role="img" aria-label="Indicadores de pontualidade, no-show e ocupação">
      <canvas baseChart [data]="pontualidadeChart" [options]="pontualidadeOptions" type="doughnut"></canvas>
    </div>
  </section>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-dashboard\gate-dashboard.component.ts ----- 
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ChartConfiguration, ChartOptions, ChartType } from 'chart.js';
import { Subject, EMPTY, Observable, of } from 'rxjs';
import { catchError, debounceTime, map, shareReplay, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import { DashboardFiltro, DashboardResumo } from '../../../model/gate/dashboard.model';
import { GateEnumOption } from '../../../model/gate/agendamento.model';
import { GateDashboardService } from '../../../service/servico-gate/gate-dashboard.service';
import {
  GateAnalyticsPreferences,
  GateChartType,
  carregarPreferencias,
  salvarPreferencias
} from '../analytics-preferences';

@Component({
  selector: 'app-gate-dashboard',
  templateUrl: './gate-dashboard.component.html',
  styleUrls: ['./gate-dashboard.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class GateDashboardComponent implements OnInit, OnDestroy {
  private readonly destroy$ = new Subject<void>();

  readonly filtrosForm = this.fb.nonNullable.group({
    inicio: '' as string,
    fim: '' as string,
    transportadoraId: null as number | null,
    tipoOperacao: '' as string,
    tipoGrafico: 'bar' as GateChartType
  });

  readonly tiposOperacao$: Observable<GateEnumOption[]> = this.dashboardService.listarTiposOperacao().pipe(
    catchError(() => of([])),
    shareReplay({ refCount: true, bufferSize: 1 })
  );

  readonly transportadoras$: Observable<GateEnumOption[]> = this.dashboardService.listarTransportadoras().pipe(
    catchError(() => of([])),
    shareReplay({ refCount: true, bufferSize: 1 })
  );

  readonly resumo$ = this.filtrosForm.valueChanges.pipe(
    startWith(this.filtrosForm.value),
    debounceTime(250),
    map(formValue => this.montarFiltro(formValue)),
    tap(filtro => this.persistirPreferencias(filtro)),
    tap(() => {
      this.carregando = true;
      this.erro = undefined;
    }),
    switchMap(filtro =>
      this.dashboardService.consultarResumo(filtro).pipe(
        tap(resumo => {
          this.resumo = resumo;
          this.atualizarGraficos(resumo, this.chartType);
          this.carregando = false;
          this.cdr.markForCheck();
        }),
        catchError(() => {
          this.erro = 'Não foi possível carregar os indicadores do período selecionado.';
          this.carregando = false;
          this.cdr.markForCheck();
          return EMPTY;
        })
      )
    ),
    takeUntil(this.destroy$),
    shareReplay({ refCount: false, bufferSize: 1 })
  );

  carregando = false;
  erro?: string;
  resumo?: DashboardResumo;

  chartType: ChartType = 'bar';

  ocupacaoChart: ChartConfiguration['data'] = { labels: [], datasets: [] };
  ocupacaoOptions: ChartOptions = this.criarOpcoesPadrao('Ocupação de slots por hora');

  turnaroundChart: ChartConfiguration['data'] = { labels: [], datasets: [] };
  turnaroundOptions: ChartOptions = this.criarOpcoesPadrao('Tempo médio de permanência (min)');

  pontualidadeChart: ChartConfiguration['data'] = { labels: ['Pontualidade', 'No-show', 'Ocupação'], datasets: [] };
  pontualidadeOptions: ChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          color: this.obterCorTexto(),
          font: { size: 12 }
        }
      }
    }
  };

  constructor(
    private readonly fb: FormBuilder,
    private readonly dashboardService: GateDashboardService,
    private readonly cdr: ChangeDetectorRef
  ) {
    const preferencias = carregarPreferencias();
    if (preferencias) {
      this.reporPreferencias(preferencias);
    }

    this.filtrosForm
      .get('tipoGrafico')
      ?.valueChanges.pipe(takeUntil(this.destroy$))
      .subscribe(tipo => {
        this.chartType = tipo ?? 'bar';
        if (this.resumo) {
          this.atualizarGraficos(this.resumo, this.chartType);
        }
        this.cdr.markForCheck();
      });
  }

  ngOnInit(): void {
    this.resumo$.subscribe();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  limparFiltros(): void {
    this.filtrosForm.patchValue({
      inicio: '',
      fim: '',
      transportadoraId: null,
      tipoOperacao: ''
    });
  }

  private montarFiltro(formValue: GateAnalyticsPreferences): DashboardFiltro {
    return {
      inicio: formValue.inicio || undefined,
      fim: formValue.fim || undefined,
      tipoOperacao: formValue.tipoOperacao || undefined,
      transportadoraId: formValue.transportadoraId ?? undefined
    };
  }

  private persistirPreferencias(filtro: DashboardFiltro): void {
    const preferencias: GateAnalyticsPreferences = {
      inicio: filtro.inicio ?? null,
      fim: filtro.fim ?? null,
      tipoOperacao: filtro.tipoOperacao ?? null,
      transportadoraId: filtro.transportadoraId ?? null,
      tipoGrafico: (this.filtrosForm.get('tipoGrafico')?.value as GateChartType) ?? 'bar'
    };
    salvarPreferencias(preferencias);
  }

  private reporPreferencias(preferencias: GateAnalyticsPreferences): void {
    this.chartType = preferencias.tipoGrafico ?? 'bar';
    this.filtrosForm.patchValue(
      {
        inicio: preferencias.inicio ?? '',
        fim: preferencias.fim ?? '',
        transportadoraId: preferencias.transportadoraId ?? null,
        tipoOperacao: preferencias.tipoOperacao ?? '',
        tipoGrafico: this.chartType as GateChartType
      },
      { emitEvent: false }
    );
  }

  private atualizarGraficos(resumo: DashboardResumo, tipo: ChartType): void {
    const texto = this.obterCorTexto();

    this.ocupacaoChart = {
      labels: resumo.ocupacaoPorHora.map(item => item.horaInicio),
      datasets: [
        {
          type: tipo,
          label: 'Agendamentos',
          data: resumo.ocupacaoPorHora.map(item => item.totalAgendamentos),
          backgroundColor: 'rgba(37, 99, 235, 0.6)',
          borderColor: 'rgba(37, 99, 235, 1)',
          borderWidth: 1,
          pointRadius: 4,
          pointHoverRadius: 6
        },
        {
          type: tipo,
          label: 'Capacidade',
          data: resumo.ocupacaoPorHora.map(item => item.capacidadeSlot),
          backgroundColor: 'rgba(16, 185, 129, 0.4)',
          borderColor: 'rgba(16, 185, 129, 1)',
          borderWidth: 1,
          pointRadius: 4,
          pointHoverRadius: 6
        }
      ]
    };

    this.turnaroundChart = {
      labels: resumo.turnaroundPorDia.map(item => item.dia),
      datasets: [
        {
          type: tipo,
          label: 'Tempo médio (minutos)',
          data: resumo.turnaroundPorDia.map(item => item.tempoMedioMinutos ?? 0),
          backgroundColor: 'rgba(249, 115, 22, 0.4)',
          borderColor: 'rgba(234, 88, 12, 1)',
          borderWidth: 2,
          tension: 0.3,
          pointRadius: 4,
          pointHoverRadius: 6
        }
      ]
    };

    this.pontualidadeChart = {
      labels: ['Pontualidade', 'No-show', 'Ocupação'],
      datasets: [
        {
          data: [
            resumo.percentualPontualidade,
            resumo.percentualNoShow,
            resumo.percentualOcupacaoSlots
          ],
          backgroundColor: [
            'rgba(16, 185, 129, 0.7)',
            'rgba(239, 68, 68, 0.7)',
            'rgba(59, 130, 246, 0.7)'
          ],
          borderColor: [
            'rgba(16, 185, 129, 1)',
            'rgba(239, 68, 68, 1)',
            'rgba(59, 130, 246, 1)'
          ],
          hoverOffset: 8
        }
      ]
    };

    this.ocupacaoOptions = this.criarOpcoesPadrao('Ocupação de slots por hora', texto);
    this.turnaroundOptions = this.criarOpcoesPadrao('Tempo médio de permanência (min)', texto);
    this.pontualidadeOptions = {
      responsive: true,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            color: texto,
            font: { size: 12 }
          }
        },
        tooltip: {
          callbacks: {
            label: context => `${context.label}: ${context.parsed.toFixed(1)}%`
          }
        }
      }
    };
  }

  private criarOpcoesPadrao(titulo: string, textoColor?: string): ChartOptions {
    const color = textoColor ?? this.obterCorTexto();
    return {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: {
          ticks: { color },
          grid: { color: 'rgba(148, 163, 184, 0.2)' }
        },
        y: {
          ticks: { color },
          grid: { color: 'rgba(148, 163, 184, 0.2)' }
        }
      },
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            color,
            font: { size: 12 }
          }
        },
        title: {
          display: true,
          text: titulo,
          color,
          font: { size: 16, weight: '600' }
        },
        tooltip: {
          callbacks: {
            label: context => `${context.dataset.label}: ${context.parsed.y ?? context.parsed}`
          }
        }
      }
    };
  }

  private obterCorTexto(): string {
    if (typeof window === 'undefined') {
      return '#1f2937';
    }
    const estilo = getComputedStyle(document.documentElement);
    return (
      estilo.getPropertyValue('--cp-on-surface-color')?.trim() ||
      estilo.getPropertyValue('--on-surface')?.trim() ||
      estilo.getPropertyValue('--text-color')?.trim() ||
      '#1f2937'
    );
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-relatorios\gate-relatorios.component.css ----- 
:host {
  display: block;
  color: var(--cp-on-surface-color, #0f172a);
}

.gate-relatorios {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background-color: var(--cp-surface-color, rgba(255, 255, 255, 0.9));
  border-radius: 16px;
  box-shadow: 0 12px 30px rgba(15, 23, 42, 0.12);
}

.dark-theme .gate-relatorios,
:host-context(.dark-theme) .gate-relatorios {
  background-color: var(--cp-surface-elevated-color, rgba(15, 23, 42, 0.75));
  box-shadow: 0 12px 30px rgba(2, 6, 23, 0.45);
}

.cabecalho {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 1rem;
}

.cabecalho h2 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 600;
}

.cabecalho .descricao {
  margin: 0.25rem 0 0;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 0.9));
}

.acoes-exportacao {
  display: flex;
  gap: 0.75rem;
  align-items: center;
}

.botao-primario {
  border: none;
  border-radius: 999px;
  padding: 0.5rem 1.5rem;
  background: linear-gradient(135deg, #2563eb, #4f46e5);
  color: #fff;
  font-weight: 600;
  cursor: pointer;
  box-shadow: 0 6px 15px rgba(37, 99, 235, 0.25);
  transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
}

.botao-primario[disabled] {
  opacity: 0.6;
  cursor: progress;
}

.botao-primario:not([disabled]):hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 20px rgba(37, 99, 235, 0.3);
}

.botao-primario:focus-visible {
  outline: 3px solid var(--cp-focus-color, rgba(59, 130, 246, 0.5));
  outline-offset: 3px;
}

.filtros {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1rem;
  align-items: end;
}

.campo {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.campo label {
  font-weight: 600;
  font-size: 0.875rem;
}

.campo input,
.campo select {
  appearance: none;
  border: 1px solid var(--cp-border-color, rgba(148, 163, 184, 0.4));
  border-radius: 8px;
  padding: 0.5rem 0.75rem;
  background-color: var(--cp-input-background, rgba(255, 255, 255, 0.95));
  color: inherit;
  font: inherit;
  min-height: 2.25rem;
}

.dark-theme .campo input,
.dark-theme .campo select,
:host-context(.dark-theme) .campo input,
:host-context(.dark-theme) .campo select {
  background-color: var(--cp-input-background-dark, rgba(15, 23, 42, 0.85));
  border-color: var(--cp-border-color-dark, rgba(148, 163, 184, 0.5));
}

.campo input:focus,
.campo select:focus,
.botao-secundario:focus {
  outline: 3px solid var(--cp-focus-color, rgba(59, 130, 246, 0.5));
  outline-offset: 2px;
}

.acoes {
  display: flex;
  justify-content: flex-end;
}

.botao-secundario {
  border: 1px solid var(--cp-border-color, rgba(148, 163, 184, 0.5));
  border-radius: 999px;
  padding: 0.5rem 1.25rem;
  background: transparent;
  color: inherit;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.2s ease;
}

.botao-secundario:hover {
  background-color: rgba(59, 130, 246, 0.12);
}

.estado {
  font-size: 0.95rem;
}

.estado.erro {
  color: #ef4444;
  font-weight: 600;
}

.mensagem {
  margin: 0;
  font-size: 0.9rem;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 0.9));
}

.resumo {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 1rem;
}

.card {
  background-color: var(--cp-surface-elevated-color, rgba(255, 255, 255, 0.95));
  border-radius: 14px;
  padding: 1rem;
  box-shadow: inset 0 0 0 1px var(--cp-border-color, rgba(148, 163, 184, 0.2));
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.dark-theme .card,
:host-context(.dark-theme) .card {
  background-color: var(--cp-surface-higher-color, rgba(30, 41, 59, 0.82));
  box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.25);
}

.card h3 {
  margin: 0;
  font-size: 0.9rem;
  font-weight: 600;
  color: var(--cp-on-surface-muted, rgba(71, 85, 105, 1));
}

.card p {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 700;
}

.graficos {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 1.5rem;
}

.grafico {
  background-color: var(--cp-surface-elevated-color, rgba(255, 255, 255, 0.95));
  border-radius: 16px;
  padding: 1rem;
  min-height: 260px;
  box-shadow: inset 0 0 0 1px var(--cp-border-color, rgba(148, 163, 184, 0.18));
}

.tabelas {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.tabelas h3 {
  margin: 0;
  font-size: 1.1rem;
  font-weight: 600;
}

.tabela-wrapper {
  max-height: 260px;
  overflow: auto;
  border-radius: 12px;
  border: 1px solid var(--cp-border-color, rgba(148, 163, 184, 0.3));
  background-color: var(--cp-surface-elevated-color, rgba(255, 255, 255, 0.95));
}

.dark-theme .tabela-wrapper,
:host-context(.dark-theme) .tabela-wrapper {
  background-color: var(--cp-surface-higher-color, rgba(30, 41, 59, 0.85));
  border-color: rgba(148, 163, 184, 0.35);
}

.tabela-wrapper table {
  width: 100%;
  border-collapse: collapse;
}

.tabela-wrapper th,
.tabela-wrapper td {
  padding: 0.75rem;
  text-align: left;
  border-bottom: 1px solid var(--cp-border-color, rgba(148, 163, 184, 0.2));
}

.tabela-wrapper tbody tr:nth-child(even) {
  background-color: rgba(148, 163, 184, 0.08);
}

@media (max-width: 768px) {
  .gate-relatorios {
    padding: 1rem;
  }

  .acoes-exportacao {
    width: 100%;
    justify-content: space-between;
  }

  .botao-primario {
    flex: 1;
    text-align: center;
  }

  .filtros {
    grid-template-columns: 1fr;
  }

  .acoes {
    justify-content: stretch;
  }

  .botao-secundario {
    width: 100%;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-relatorios\gate-relatorios.component.html ----- 
<section class="gate-relatorios" aria-labelledby="gateRelatoriosTitulo">
  <header class="cabecalho">
    <div>
      <h2 id="gateRelatoriosTitulo">Relatórios do Gate</h2>
      <p class="descricao">Exporte os indicadores operacionais do gate e visualize a evolução diária do desempenho.</p>
    </div>
    <div class="acoes-exportacao">
      <button type="button" class="botao-primario" (click)="exportar('csv')" [disabled]="exportando">
        Exportar CSV
      </button>
      <button type="button" class="botao-primario" (click)="exportar('xlsx')" [disabled]="exportando">
        Exportar Excel
      </button>
    </div>
  </header>

  <p class="mensagem" *ngIf="mensagem" aria-live="polite">{{ mensagem }}</p>

  <form class="filtros" [formGroup]="filtrosForm" aria-label="Filtros dos relatórios">
    <div class="campo">
      <label for="inicioRelatorio">Início</label>
      <input id="inicioRelatorio" type="date" formControlName="inicio" />
    </div>

    <div class="campo">
      <label for="fimRelatorio">Fim</label>
      <input id="fimRelatorio" type="date" formControlName="fim" />
    </div>

    <div class="campo">
      <label for="transportadoraRelatorio">Transportadora</label>
      <select id="transportadoraRelatorio" formControlName="transportadoraId">
        <option [ngValue]="null">Todas</option>
        <option
          *ngFor="let transportadora of transportadoras$ | async"
          [ngValue]="transportadora.codigo && !isNaN(+transportadora.codigo) ? +transportadora.codigo : null"
        >
          {{ transportadora.descricao }}
        </option>
      </select>
    </div>

    <div class="campo">
      <label for="tipoOperacaoRelatorio">Tipo de operação</label>
      <select id="tipoOperacaoRelatorio" formControlName="tipoOperacao">
        <option value="">Todas</option>
        <option *ngFor="let tipo of tiposOperacao$ | async" [value]="tipo.codigo">{{ tipo.descricao }}</option>
      </select>
    </div>

    <div class="campo">
      <label for="tipoGraficoRelatorio">Tipo de gráfico</label>
      <select id="tipoGraficoRelatorio" formControlName="tipoGrafico">
        <option value="line">Linhas</option>
        <option value="bar">Colunas</option>
      </select>
    </div>

    <div class="acoes">
      <button type="button" class="botao-secundario" (click)="limparFiltros()">Limpar filtros</button>
    </div>
  </form>

  <div class="estado" *ngIf="carregando" aria-live="polite">Processando consulta...</div>
  <div class="estado erro" *ngIf="erro" role="alert">{{ erro }}</div>

  <section class="resumo" *ngIf="resumo as dados">
    <article class="card" aria-live="polite">
      <h3>Total agendamentos</h3>
      <p>{{ dados.totalAgendamentos | number:'1.0-0' }}</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>Pontualidade média</h3>
      <p>{{ dados.percentualPontualidade | number:'1.1-1' }}%</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>No-show</h3>
      <p>{{ dados.percentualNoShow | number:'1.1-1' }}%</p>
    </article>
    <article class="card" aria-live="polite">
      <h3>Ocupação média</h3>
      <p>{{ dados.percentualOcupacaoSlots | number:'1.1-1' }}%</p>
    </article>
  </section>

  <section class="graficos" *ngIf="resumo">
    <div class="grafico" role="img" aria-label="Histórico de ocupação dos slots">
      <canvas baseChart [data]="ocupacaoChart" [options]="ocupacaoOptions" [type]="chartType"></canvas>
    </div>
    <div class="grafico" role="img" aria-label="Tempo médio de permanência diário">
      <canvas baseChart [data]="turnaroundChart" [options]="turnaroundOptions" [type]="chartType"></canvas>
    </div>
  </section>

  <section class="tabelas" *ngIf="resumo as dadosTabela">
    <h3>Detalhamento por hora</h3>
    <div class="tabela-wrapper" role="region" aria-live="polite" tabindex="0">
      <table>
        <thead>
          <tr>
            <th scope="col">Hora</th>
            <th scope="col">Agendamentos</th>
            <th scope="col">Capacidade</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let item of dadosTabela.ocupacaoPorHora">
            <td>{{ item.horaInicio }}</td>
            <td>{{ item.totalAgendamentos }}</td>
            <td>{{ item.capacidadeSlot }}</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h3>Tempo médio por dia</h3>
    <div class="tabela-wrapper" role="region" aria-live="polite" tabindex="0">
      <table>
        <thead>
          <tr>
            <th scope="col">Dia</th>
            <th scope="col">Tempo médio (min)</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let item of dadosTabela.turnaroundPorDia">
            <td>{{ item.dia }}</td>
            <td>{{ item.tempoMedioMinutos ?? '—' }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </section>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\analytics\gate-relatorios\gate-relatorios.component.ts ----- 
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ChartConfiguration, ChartOptions, ChartType } from 'chart.js';
import { Subject, EMPTY, Observable, of } from 'rxjs';
import { catchError, debounceTime, map, shareReplay, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import { DashboardFiltro, DashboardResumo } from '../../../model/gate/dashboard.model';
import { GateEnumOption } from '../../../model/gate/agendamento.model';
import { GateDashboardService } from '../../../service/servico-gate/gate-dashboard.service';
import {
  GateAnalyticsPreferences,
  GateChartType,
  carregarPreferencias,
  salvarPreferencias
} from '../analytics-preferences';

@Component({
  selector: 'app-gate-relatorios',
  templateUrl: './gate-relatorios.component.html',
  styleUrls: ['./gate-relatorios.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class GateRelatoriosComponent implements OnInit, OnDestroy {
  private readonly destroy$ = new Subject<void>();

  readonly filtrosForm = this.fb.nonNullable.group({
    inicio: '' as string,
    fim: '' as string,
    transportadoraId: null as number | null,
    tipoOperacao: '' as string,
    tipoGrafico: 'line' as GateChartType
  });

  readonly tiposOperacao$: Observable<GateEnumOption[]> = this.dashboardService.listarTiposOperacao().pipe(
    catchError(() => of([])),
    shareReplay({ refCount: true, bufferSize: 1 })
  );

  readonly transportadoras$: Observable<GateEnumOption[]> = this.dashboardService.listarTransportadoras().pipe(
    catchError(() => of([])),
    shareReplay({ refCount: true, bufferSize: 1 })
  );

  readonly resumo$ = this.filtrosForm.valueChanges.pipe(
    startWith(this.filtrosForm.value),
    debounceTime(250),
    map(formValue => this.montarFiltro(formValue)),
    tap(filtro => this.persistirPreferencias(filtro)),
    tap(() => {
      this.carregando = true;
      this.erro = undefined;
    }),
    switchMap(filtro =>
      this.dashboardService.consultarResumo(filtro).pipe(
        tap(resumo => {
          this.resumo = resumo;
          this.atualizarGraficos(resumo, this.chartType);
          this.carregando = false;
          this.cdr.markForCheck();
        }),
        catchError(() => {
          this.erro = 'Não foi possível carregar os dados para o relatório.';
          this.carregando = false;
          this.cdr.markForCheck();
          return EMPTY;
        })
      )
    ),
    takeUntil(this.destroy$),
    shareReplay({ refCount: false, bufferSize: 1 })
  );

  carregando = false;
  exportando = false;
  erro?: string;
  mensagem?: string;
  resumo?: DashboardResumo;
  chartType: ChartType = 'line';

  ocupacaoChart: ChartConfiguration['data'] = { labels: [], datasets: [] };
  ocupacaoOptions: ChartOptions = this.criarOpcoesPadrao('Ocupação média dos slots');

  turnaroundChart: ChartConfiguration['data'] = { labels: [], datasets: [] };
  turnaroundOptions: ChartOptions = this.criarOpcoesPadrao('Tempo médio diário (minutos)');

  constructor(
    private readonly fb: FormBuilder,
    private readonly dashboardService: GateDashboardService,
    private readonly cdr: ChangeDetectorRef
  ) {
    const preferencias = carregarPreferencias();
    if (preferencias) {
      this.reporPreferencias(preferencias);
    }

    this.filtrosForm
      .get('tipoGrafico')
      ?.valueChanges.pipe(takeUntil(this.destroy$))
      .subscribe(tipo => {
        this.chartType = tipo ?? 'line';
        if (this.resumo) {
          this.atualizarGraficos(this.resumo, this.chartType);
        }
        this.cdr.markForCheck();
      });
  }

  ngOnInit(): void {
    this.resumo$.subscribe();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  exportar(formato: 'csv' | 'xlsx'): void {
    if (this.exportando) {
      return;
    }

    const filtro = this.montarFiltro(this.filtrosForm.value);
    this.exportando = true;
    this.mensagem = undefined;
    this.cdr.markForCheck();

    this.dashboardService.exportarResumo(formato, filtro).pipe(takeUntil(this.destroy$)).subscribe({
      next: blob => {
        const nomeArquivo = this.gerarNomeArquivo(formato);
        this.realizarDownload(blob, nomeArquivo);
        this.exportando = false;
        this.mensagem = `Relatório ${formato.toUpperCase()} exportado com sucesso.`;
        this.cdr.markForCheck();
      },
      error: () => {
        this.exportando = false;
        this.mensagem = 'Não foi possível exportar o relatório. Tente novamente.';
        this.cdr.markForCheck();
      }
    });
  }

  limparFiltros(): void {
    this.filtrosForm.patchValue({
      inicio: '',
      fim: '',
      transportadoraId: null,
      tipoOperacao: ''
    });
  }

  private montarFiltro(formValue: GateAnalyticsPreferences): DashboardFiltro {
    return {
      inicio: formValue.inicio || undefined,
      fim: formValue.fim || undefined,
      tipoOperacao: formValue.tipoOperacao || undefined,
      transportadoraId: formValue.transportadoraId ?? undefined
    };
  }

  private persistirPreferencias(filtro: DashboardFiltro): void {
    const preferencias: GateAnalyticsPreferences = {
      inicio: filtro.inicio ?? null,
      fim: filtro.fim ?? null,
      tipoOperacao: filtro.tipoOperacao ?? null,
      transportadoraId: filtro.transportadoraId ?? null,
      tipoGrafico: (this.filtrosForm.get('tipoGrafico')?.value as GateChartType) ?? 'line'
    };
    salvarPreferencias(preferencias);
  }

  private reporPreferencias(preferencias: GateAnalyticsPreferences): void {
    this.chartType = preferencias.tipoGrafico ?? 'line';
    this.filtrosForm.patchValue(
      {
        inicio: preferencias.inicio ?? '',
        fim: preferencias.fim ?? '',
        transportadoraId: preferencias.transportadoraId ?? null,
        tipoOperacao: preferencias.tipoOperacao ?? '',
        tipoGrafico: this.chartType as GateChartType
      },
      { emitEvent: false }
    );
  }

  private atualizarGraficos(resumo: DashboardResumo, tipo: ChartType): void {
    this.ocupacaoChart = {
      labels: resumo.ocupacaoPorHora.map(item => item.horaInicio),
      datasets: [
        {
          type: tipo,
          label: 'Agendamentos confirmados',
          data: resumo.ocupacaoPorHora.map(item => item.totalAgendamentos),
          backgroundColor: 'rgba(59, 130, 246, 0.5)',
          borderColor: 'rgba(59, 130, 246, 1)',
          borderWidth: 1,
          pointRadius: 4,
          pointHoverRadius: 6
        }
      ]
    };

    this.turnaroundChart = {
      labels: resumo.turnaroundPorDia.map(item => item.dia),
      datasets: [
        {
          type: tipo,
          label: 'Tempo médio (min)',
          data: resumo.turnaroundPorDia.map(item => item.tempoMedioMinutos ?? 0),
          backgroundColor: 'rgba(16, 185, 129, 0.45)',
          borderColor: 'rgba(16, 185, 129, 1)',
          borderWidth: 2,
          tension: 0.3,
          pointRadius: 4,
          pointHoverRadius: 6
        }
      ]
    };

    this.ocupacaoOptions = this.criarOpcoesPadrao('Ocupação média dos slots');
    this.turnaroundOptions = this.criarOpcoesPadrao('Tempo médio diário (minutos)');
  }

  private criarOpcoesPadrao(titulo: string): ChartOptions {
    const corTexto = this.obterCorTexto();
    return {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        x: {
          ticks: { color: corTexto },
          grid: { color: 'rgba(148, 163, 184, 0.2)' }
        },
        y: {
          ticks: { color: corTexto },
          grid: { color: 'rgba(148, 163, 184, 0.2)' }
        }
      },
      plugins: {
        legend: {
          position: 'bottom',
          labels: { color: corTexto, font: { size: 12 } }
        },
        title: {
          display: true,
          text: titulo,
          color: corTexto,
          font: { size: 16, weight: '600' }
        }
      }
    };
  }

  private gerarNomeArquivo(formato: 'csv' | 'xlsx'): string {
    const data = new Date().toISOString().slice(0, 10);
    return `relatorio-gate-${data}.${formato}`;
  }

  private realizarDownload(blob: Blob, nomeArquivo: string): void {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = nomeArquivo;
    link.click();
    URL.revokeObjectURL(url);
  }

  private obterCorTexto(): string {
    if (typeof window === 'undefined') {
      return '#1f2937';
    }
    const estilo = getComputedStyle(document.documentElement);
    return (
      estilo.getPropertyValue('--cp-on-surface-color')?.trim() ||
      estilo.getPropertyValue('--on-surface')?.trim() ||
      estilo.getPropertyValue('--text-color')?.trim() ||
      '#1f2937'
    );
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\dashboard\gate-dashboard.component.css ----- 
.gate-dashboard {
  padding: 1.5rem;
}

.gate-dashboard h2 {
  margin-bottom: 0.75rem;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\dashboard\gate-dashboard.component.html ----- 
<section class="gate-dashboard">
  <h2>{{ titulo }}</h2>
  <p>Acompanhe os indicadores operacionais em tempo real.</p>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\dashboard\gate-dashboard.component.ts ----- 
import { Component } from '@angular/core';

@Component({
  selector: 'app-gate-dashboard',
  templateUrl: './gate-dashboard.component.html',
  styleUrls: ['./gate-dashboard.component.css']
})
export class GateDashboardComponent {
  readonly titulo = 'Dashboard do Gate';
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\janelas\gate-janelas.component.css ----- 
.gate-janelas {
  padding: 1.5rem;
}

.gate-janelas h2 {
  margin-bottom: 0.75rem;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\janelas\gate-janelas.component.html ----- 
<section class="gate-janelas">
  <h2>{{ titulo }}</h2>
  <p>Gerencie as janelas de atendimento disponíveis para o gate.</p>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\janelas\gate-janelas.component.ts ----- 
import { Component } from '@angular/core';

@Component({
  selector: 'app-gate-janelas',
  templateUrl: './gate-janelas.component.html',
  styleUrls: ['./gate-janelas.component.css']
})
export class GateJanelasComponent {
  readonly titulo = 'Janelas de Atendimento';
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-console\gate-operador-console.component.css ----- 
.console-wrapper {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  padding: 1.5rem;
  background: #f4f6fb;
  min-height: 100vh;
}

.console-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.console-header h1 {
  margin: 0;
  font-size: 1.8rem;
  color: #1a2b6d;
}

.console-header p {
  margin: 0.25rem 0 0;
  color: #4f5b7d;
}

.console-status {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  border-radius: 0.75rem;
  background: #e3e8ff;
  color: #1a2b6d;
  text-transform: capitalize;
}

.console-status .status-indicador {
  width: 0.75rem;
  height: 0.75rem;
  border-radius: 50%;
  background: #1a2b6d;
  box-shadow: 0 0 6px rgba(26, 43, 109, 0.4);
}

.console-status.desconectado {
  background: #fdecea;
  color: #b3261e;
}

.console-status.desconectado .status-indicador {
  background: #d93025;
  box-shadow: 0 0 6px rgba(217, 48, 37, 0.4);
}

.console-status.conectando {
  background: #fff4e5;
  color: #c77700;
}

.console-status.conectando .status-indicador {
  background: #f29900;
  box-shadow: 0 0 6px rgba(242, 153, 0, 0.4);
}

.alertas-realtime {
  display: grid;
  gap: 0.75rem;
  padding: 1rem;
  border-radius: 1rem;
  background: #fff9e6;
  box-shadow: 0 4px 18px rgba(0, 0, 0, 0.05);
  opacity: 0;
  transform: translateY(-10px);
  transition: all 0.3s ease;
}

.alertas-realtime-visivel {
  opacity: 1;
  transform: translateY(0);
}

.alertas-realtime h2 {
  margin: 0;
  font-size: 1.25rem;
  color: #c77700;
}

.alerta-card {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 0.75rem;
  padding: 0.75rem;
  border-radius: 0.75rem;
  background: #fff;
  border-left: 4px solid #f29900;
}

.alerta-card.alerta-critico {
  border-left-color: #d93025;
  background: #fdecea;
}

.alerta-card.alerta-atencao {
  border-left-color: #f29900;
  background: #fff4e5;
}

.alerta-descricao {
  display: block;
  color: #4f5b7d;
  margin-top: 0.25rem;
}

.alerta-meta {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  color: #4f5b7d;
  font-size: 0.85rem;
}

.filas-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 1.5rem;
}

.fila-coluna {
  background: #fff;
  border-radius: 1.25rem;
  padding: 1.25rem;
  box-shadow: 0 8px 28px rgba(15, 23, 42, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.fila-coluna header {
  display: flex;
  flex-direction: column;
  gap: 0.4rem;
}

.fila-coluna h2 {
  margin: 0;
  font-size: 1.2rem;
  color: #1a2b6d;
}

.fila-contador {
  font-weight: 600;
  color: #0f172a;
}

.fila-espera {
  color: #64748b;
  font-size: 0.9rem;
}

.veiculos-grid {
  display: grid;
  gap: 1rem;
}

.veiculo-card {
  background: #f9fbff;
  border-radius: 1rem;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  border-left: 4px solid transparent;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.veiculo-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 24px rgba(15, 23, 42, 0.12);
}

.veiculo-identificacao {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.placa {
  font-size: 1.3rem;
  letter-spacing: 0.05em;
  color: #1a2b6d;
}

.status {
  background: #e0e7ff;
  color: #1a2b6d;
  padding: 0.25rem 0.6rem;
  border-radius: 999px;
  font-size: 0.85rem;
}

.veiculo-tempo {
  color: #475569;
  font-size: 0.95rem;
}

.veiculo-detalhes {
  display: grid;
  gap: 0.25rem;
  color: #475569;
  font-size: 0.95rem;
}

.veiculo-excecoes {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.excecoes-titulo {
  font-weight: 600;
  color: #1f2937;
}

.excecoes-lista {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.excecao-badge {
  padding: 0.35rem 0.75rem;
  border-radius: 999px;
  background: #e5f2ff;
  color: #1a2b6d;
  font-size: 0.8rem;
  font-weight: 600;
}

.excecao-badge-critica {
  background: #fdecea;
  color: #b3261e;
}

.excecao-badge-alerta {
  background: #fff4e5;
  color: #c77700;
}

.veiculo-contatos {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.veiculo-contatos ul {
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  padding: 0;
  margin: 0;
}

.veiculo-contatos a {
  padding: 0.35rem 0.75rem;
  border-radius: 0.75rem;
  background: #e0f2fe;
  color: #0c4a6e;
  text-decoration: none;
  font-weight: 600;
}

.veiculo-acoes {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.btn {
  border: none;
  border-radius: 0.75rem;
  padding: 0.5rem 0.9rem;
  font-weight: 600;
  cursor: pointer;
  transition: transform 0.15s ease, box-shadow 0.15s ease;
}

.btn:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

.btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 6px 18px rgba(15, 23, 42, 0.15);
}

.btn.primario {
  background: #2563eb;
  color: #fff;
}

.btn.secundario {
  background: #e0e7ff;
  color: #1a2b6d;
}

.btn.terciario {
  background: #fce7f3;
  color: #9d174d;
}

.btn.texto {
  background: transparent;
  color: #1a2b6d;
  text-decoration: underline;
  padding-left: 0;
}

.veiculo-excecao-critica {
  border-left-color: #d93025;
  background: #fdecea;
}

.veiculo-excecao-alerta {
  border-left-color: #f29900;
  background: #fff4e5;
}

.atendimento-container {
  background: #fff;
  border-radius: 1.25rem;
  padding: 1.25rem;
  box-shadow: 0 8px 28px rgba(15, 23, 42, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.atendimento-container header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
}

.atendimento-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1rem;
}

.atendimento-card {
  background: #f9fbff;
  border-radius: 1rem;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.historico-container {
  background: #fff;
  border-radius: 1.25rem;
  padding: 1.25rem;
  box-shadow: 0 8px 28px rgba(15, 23, 42, 0.08);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.historico-container header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
}

.historico-container ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: grid;
  gap: 0.75rem;
}

.historico-container li {
  display: flex;
  justify-content: space-between;
  background: #f8fafc;
  padding: 0.75rem 1rem;
  border-radius: 0.75rem;
  border-left: 4px solid transparent;
  gap: 1rem;
}

.historico-container li strong {
  display: block;
  color: #1a2b6d;
}

.historico-container li span {
  color: #475569;
  font-size: 0.9rem;
}

.historico-meta {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  color: #475569;
}

.historico-critico {
  border-left-color: #d93025;
  background: #fdecea;
}

.historico-alerta {
  border-left-color: #f29900;
  background: #fff4e5;
}

.link-eventos {
  text-decoration: none;
  color: #2563eb;
  font-weight: 600;
}

.modal-backdrop {
  position: fixed;
  inset: 0;
  background: rgba(15, 23, 42, 0.55);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
  z-index: 1000;
}

.modal-conteudo {
  background: #fff;
  border-radius: 1rem;
  padding: 1.5rem;
  width: min(480px, 100%);
  box-shadow: 0 18px 32px rgba(15, 23, 42, 0.2);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.modal-conteudo header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
}

.modal-conteudo h2 {
  margin: 0;
  color: #1a2b6d;
}

.modal-fechar {
  border: none;
  background: transparent;
  font-size: 1.5rem;
  cursor: pointer;
}

form {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

label {
  font-weight: 600;
  color: #1f2937;
}

select,
textarea,
input[type='datetime-local'] {
  border-radius: 0.75rem;
  border: 1px solid #cbd5f5;
  padding: 0.6rem 0.75rem;
  font-size: 0.95rem;
  background: #f8faff;
}

textarea {
  resize: vertical;
}

.checkbox-inline {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 500;
  color: #1f2937;
}

.modal-acoes {
  display: flex;
  justify-content: flex-end;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.erro-campo {
  font-size: 0.8rem;
  color: #d93025;
}

.feedback-container {
  position: fixed;
  bottom: 1.5rem;
  right: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  z-index: 1100;
}

.feedback-mensagem,
.feedback-erro {
  padding: 0.75rem 1rem;
  border-radius: 0.75rem;
  box-shadow: 0 6px 18px rgba(15, 23, 42, 0.18);
  background: #fff;
}

.feedback-mensagem {
  border-left: 4px solid #22c55e;
  color: #14532d;
}

.feedback-erro {
  border-left: 4px solid #d93025;
  color: #7f1d1d;
}

@media (max-width: 1024px) {
  .console-wrapper {
    padding: 1rem;
  }

  .filas-container {
    grid-template-columns: 1fr;
  }

  .atendimento-grid {
    grid-template-columns: 1fr;
  }

  .veiculo-acoes {
    flex-direction: column;
    align-items: stretch;
  }
}

@media (max-width: 640px) {
  .console-header {
    flex-direction: column;
    align-items: flex-start;
  }

  .modal-conteudo {
    padding: 1rem;
  }

  .feedback-container {
    left: 1rem;
    right: 1rem;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-console\gate-operador-console.component.html ----- 
<div class="console-wrapper" *ngIf="(painel$ | async) as painel">
  <header class="console-header">
    <div>
      <h1>Console do Operador de Gate</h1>
      <p>Monitoramento em tempo real das filas de entrada e saída, veículos em atendimento e ocorrências recentes.</p>
    </div>
    <div class="console-status" [ngClass]="(statusConexao$ | async)">
      <span class="status-indicador"></span>
      <span class="status-texto">
        Conexão: {{ (statusConexao$ | async) === 'conectado' ? 'Ativa' : (statusConexao$ | async) === 'conectando' ? 'Conectando...' : 'Offline' }}
      </span>
    </div>
  </header>

  <section class="alertas-realtime" *ngIf="(alertasRecentes$ | async)?.length as quantidadeAlertas" [class.alertas-realtime-visivel]="quantidadeAlertas > 0">
    <h2>Alertas Recentes</h2>
    <article *ngFor="let alerta of (alertasRecentes$ | async)" class="alerta-card" [ngClass]="{'alerta-critico': alerta.nivel === 'CRITICA', 'alerta-atencao': alerta.nivel === 'ALERTA'}">
      <div>
        <strong>{{ alerta.tipo }}</strong>
        <span class="alerta-descricao">{{ alerta.descricao }}</span>
      </div>
      <div class="alerta-meta">
        <span>{{ alerta.registradoEm | date:'shortTime' }}</span>
        <span *ngIf="alerta.placaVeiculo">Placa: {{ alerta.placaVeiculo }}</span>
      </div>
    </article>
  </section>

  <section class="filas-container">
    <div class="fila-coluna" *ngFor="let fila of painel.filasEntrada">
      <header>
        <h2>Fila de Entrada - {{ fila.nome }}</h2>
        <span class="fila-contador">{{ fila.quantidade }} veículos</span>
        <span class="fila-espera" *ngIf="fila.tempoMedioEsperaMinutos">Tempo médio: {{ fila.tempoMedioEsperaMinutos }} min</span>
      </header>
      <div class="veiculos-grid">
        <article class="veiculo-card" *ngFor="let veiculo of fila.veiculos"
                 [ngClass]="{
                   'veiculo-excecao-critica': possuiExcecaoCritica(veiculo),
                   'veiculo-excecao-alerta': !possuiExcecaoCritica(veiculo) && possuiExcecaoAlerta(veiculo)
                 }">
          <header>
            <div class="veiculo-identificacao">
              <strong class="placa">{{ veiculo.placa }}</strong>
              <span class="status">{{ veiculo.statusDescricao || veiculo.status }}</span>
            </div>
            <div class="veiculo-tempo" *ngIf="veiculo.tempoFilaMinutos !== null && veiculo.tempoFilaMinutos !== undefined">
              {{ veiculo.tempoFilaMinutos }} min em fila
            </div>
          </header>
          <div class="veiculo-detalhes">
            <p *ngIf="veiculo.transportadora"><strong>Transportadora:</strong> {{ veiculo.transportadora }}</p>
            <p *ngIf="veiculo.documento"><strong>Documento:</strong> {{ veiculo.documento }}</p>
            <p *ngIf="veiculo.motorista"><strong>Motorista:</strong> {{ veiculo.motorista }}</p>
            <p *ngIf="veiculo.canalEntrada"><strong>Canal:</strong> {{ veiculo.canalEntrada }}</p>
          </div>
          <div class="veiculo-excecoes" *ngIf="veiculo.excecoes?.length">
            <span class="excecoes-titulo">Exceções</span>
            <div class="excecoes-lista">
              <span *ngFor="let excecao of veiculo.excecoes" [ngClass]="classeExcecao(excecao)">
                {{ excecao.descricao }}
              </span>
            </div>
          </div>
          <div class="veiculo-contatos" *ngIf="veiculo.contatos?.length">
            <span class="contatos-titulo">Contato rápido</span>
            <ul>
              <li *ngFor="let contato of veiculo.contatos">
                <a [href]="contatoLink(contato.tipo, contato.valor)" target="_blank" rel="noopener">
                  {{ contatoDescricao(contato.tipo) }}
                </a>
              </li>
            </ul>
          </div>
          <footer class="veiculo-acoes">
            <button type="button" class="btn primario" (click)="abrirModalLiberacao(veiculo)">
              Liberar manualmente
            </button>
            <button type="button" class="btn secundario" (click)="abrirModalBloqueio(veiculo)">
              Bloquear
            </button>
            <button type="button" class="btn terciario" (click)="abrirModalOcorrencia(veiculo)">
              Registrar ocorrência
            </button>
            <button type="button" class="btn texto" [disabled]="!veiculo.podeImprimirComprovante" (click)="imprimirComprovante(veiculo)">
              Imprimir comprovante
            </button>
          </footer>
        </article>
      </div>
    </div>

    <div class="fila-coluna" *ngFor="let fila of painel.filasSaida">
      <header>
        <h2>Fila de Saída - {{ fila.nome }}</h2>
        <span class="fila-contador">{{ fila.quantidade }} veículos</span>
        <span class="fila-espera" *ngIf="fila.tempoMedioEsperaMinutos">Tempo médio: {{ fila.tempoMedioEsperaMinutos }} min</span>
      </header>
      <div class="veiculos-grid">
        <article class="veiculo-card" *ngFor="let veiculo of fila.veiculos"
                 [ngClass]="{
                   'veiculo-excecao-critica': possuiExcecaoCritica(veiculo),
                   'veiculo-excecao-alerta': !possuiExcecaoCritica(veiculo) && possuiExcecaoAlerta(veiculo)
                 }">
          <header>
            <div class="veiculo-identificacao">
              <strong class="placa">{{ veiculo.placa }}</strong>
              <span class="status">{{ veiculo.statusDescricao || veiculo.status }}</span>
            </div>
            <div class="veiculo-tempo" *ngIf="veiculo.tempoFilaMinutos !== null && veiculo.tempoFilaMinutos !== undefined">
              {{ veiculo.tempoFilaMinutos }} min em fila
            </div>
          </header>
          <div class="veiculo-detalhes">
            <p *ngIf="veiculo.transportadora"><strong>Transportadora:</strong> {{ veiculo.transportadora }}</p>
            <p *ngIf="veiculo.documento"><strong>Documento:</strong> {{ veiculo.documento }}</p>
            <p *ngIf="veiculo.motorista"><strong>Motorista:</strong> {{ veiculo.motorista }}</p>
            <p *ngIf="veiculo.canalEntrada"><strong>Canal:</strong> {{ veiculo.canalEntrada }}</p>
          </div>
          <div class="veiculo-excecoes" *ngIf="veiculo.excecoes?.length">
            <span class="excecoes-titulo">Exceções</span>
            <div class="excecoes-lista">
              <span *ngFor="let excecao of veiculo.excecoes" [ngClass]="classeExcecao(excecao)">
                {{ excecao.descricao }}
              </span>
            </div>
          </div>
          <div class="veiculo-contatos" *ngIf="veiculo.contatos?.length">
            <span class="contatos-titulo">Contato rápido</span>
            <ul>
              <li *ngFor="let contato of veiculo.contatos">
                <a [href]="contatoLink(contato.tipo, contato.valor)" target="_blank" rel="noopener">
                  {{ contatoDescricao(contato.tipo) }}
                </a>
              </li>
            </ul>
          </div>
          <footer class="veiculo-acoes">
            <button type="button" class="btn primario" (click)="abrirModalLiberacao(veiculo)">
              Liberar manualmente
            </button>
            <button type="button" class="btn secundario" (click)="abrirModalBloqueio(veiculo)">
              Bloquear
            </button>
            <button type="button" class="btn terciario" (click)="abrirModalOcorrencia(veiculo)">
              Registrar ocorrência
            </button>
            <button type="button" class="btn texto" [disabled]="!veiculo.podeImprimirComprovante" (click)="imprimirComprovante(veiculo)">
              Imprimir comprovante
            </button>
          </footer>
        </article>
      </div>
    </div>
  </section>

  <section class="atendimento-container">
    <header>
      <h2>Veículos em Atendimento</h2>
      <span>{{ painel.veiculosAtendimento.length }} em atendimento</span>
    </header>
    <div class="atendimento-grid">
      <article *ngFor="let veiculo of painel.veiculosAtendimento" class="atendimento-card"
               [ngClass]="{
                 'veiculo-excecao-critica': possuiExcecaoCritica(veiculo),
                 'veiculo-excecao-alerta': !possuiExcecaoCritica(veiculo) && possuiExcecaoAlerta(veiculo)
               }">
        <header>
          <strong class="placa">{{ veiculo.placa }}</strong>
          <span class="status">{{ veiculo.statusDescricao || veiculo.status }}</span>
        </header>
        <p *ngIf="veiculo.transportadora"><strong>Transportadora:</strong> {{ veiculo.transportadora }}</p>
        <p *ngIf="veiculo.motorista"><strong>Motorista:</strong> {{ veiculo.motorista }}</p>
        <p *ngIf="veiculo.documento"><strong>Documento:</strong> {{ veiculo.documento }}</p>
        <div class="veiculo-excecoes" *ngIf="veiculo.excecoes?.length">
          <span class="excecoes-titulo">Exceções</span>
          <div class="excecoes-lista">
            <span *ngFor="let excecao of veiculo.excecoes" [ngClass]="classeExcecao(excecao)">
              {{ excecao.descricao }}
            </span>
          </div>
        </div>
        <footer class="veiculo-acoes">
          <button type="button" class="btn primario" (click)="abrirModalLiberacao(veiculo)">
            Liberar manualmente
          </button>
          <button type="button" class="btn secundario" (click)="abrirModalBloqueio(veiculo)">
            Bloquear
          </button>
          <button type="button" class="btn terciario" (click)="abrirModalOcorrencia(veiculo)">
            Registrar ocorrência
          </button>
          <button type="button" class="btn texto" [disabled]="!veiculo.podeImprimirComprovante" (click)="imprimirComprovante(veiculo)">
            Imprimir comprovante
          </button>
        </footer>
      </article>
    </div>
  </section>

  <section class="historico-container">
    <header>
      <h2>Histórico recente</h2>
      <a routerLink="../eventos" class="link-eventos">Ver todos os eventos</a>
    </header>
    <ul>
      <li *ngFor="let evento of painel.historico | slice:0:10" [ngClass]="{'historico-critico': evento.nivel === 'CRITICA', 'historico-alerta': evento.nivel === 'ALERTA'}">
        <div>
          <strong>{{ evento.tipo }}</strong>
          <span>{{ evento.descricao }}</span>
        </div>
        <div class="historico-meta">
          <span>{{ evento.registradoEm | date:'short' }}</span>
          <span *ngIf="evento.placaVeiculo">Placa: {{ evento.placaVeiculo }}</span>
        </div>
      </li>
    </ul>
  </section>
</div>

<div class="modal-backdrop" *ngIf="modalLiberacaoAberto">
  <div class="modal-conteudo">
    <header>
      <h2>Liberar veículo manualmente</h2>
      <button type="button" class="modal-fechar" (click)="fecharModais()">&times;</button>
    </header>
    <form [formGroup]="formLiberacao" (ngSubmit)="confirmarLiberacao()">
      <label for="canalEntrada">Canal de entrada</label>
      <select id="canalEntrada" formControlName="canalEntrada">
        <option value="" disabled>Selecione</option>
        <option *ngFor="let canal of (canaisEntrada$ | async)" [value]="canal.codigo">{{ canal.descricao }}</option>
      </select>
      <div class="erro-campo" *ngIf="formLiberacao.controls.canalEntrada.invalid && formLiberacao.controls.canalEntrada.touched">
        Informe o canal utilizado pelo veículo.
      </div>

      <label for="justificativaLiberacao">Justificativa</label>
      <textarea id="justificativaLiberacao" rows="3" formControlName="justificativa" placeholder="Descreva o motivo da liberação manual"></textarea>
      <div class="erro-campo" *ngIf="formLiberacao.controls.justificativa.invalid && formLiberacao.controls.justificativa.touched">
        Informe uma justificativa com pelo menos 5 caracteres.
      </div>

      <label class="checkbox-inline">
        <input type="checkbox" formControlName="notificarTransportadora" />
        Notificar transportadora
      </label>

      <footer class="modal-acoes">
        <button type="submit" class="btn primario" [disabled]="formLiberacao.invalid">Confirmar liberação</button>
        <button type="button" class="btn secundario" (click)="fecharModais()">Cancelar</button>
      </footer>
    </form>
  </div>
</div>

<div class="modal-backdrop" *ngIf="modalBloqueioAberto">
  <div class="modal-conteudo">
    <header>
      <h2>Bloquear veículo</h2>
      <button type="button" class="modal-fechar" (click)="fecharModais()">&times;</button>
    </header>
    <form [formGroup]="formBloqueio" (ngSubmit)="confirmarBloqueio()">
      <label for="motivoBloqueio">Motivo do bloqueio</label>
      <select id="motivoBloqueio" formControlName="motivoCodigo">
        <option value="" disabled>Selecione</option>
        <option *ngFor="let motivo of (motivosBloqueio$ | async)" [value]="motivo.codigo">{{ motivo.descricao }}</option>
      </select>
      <div class="erro-campo" *ngIf="formBloqueio.controls.motivoCodigo.invalid && formBloqueio.controls.motivoCodigo.touched">
        Informe o motivo do bloqueio.
      </div>

      <label for="justificativaBloqueio">Justificativa</label>
      <textarea id="justificativaBloqueio" rows="3" formControlName="justificativa"></textarea>
      <div class="erro-campo" *ngIf="formBloqueio.controls.justificativa.invalid && formBloqueio.controls.justificativa.touched">
        Informe uma justificativa com pelo menos 5 caracteres.
      </div>

      <label for="bloqueioAte">Bloqueio até</label>
      <input id="bloqueioAte" type="datetime-local" formControlName="bloqueioAte" />
      <div class="erro-campo" *ngIf="formBloqueio.controls.bloqueioAte.invalid && formBloqueio.controls.bloqueioAte.touched">
        Informe a data e hora de revisão do bloqueio.
      </div>

      <footer class="modal-acoes">
        <button type="submit" class="btn primario" [disabled]="formBloqueio.invalid">Confirmar bloqueio</button>
        <button type="button" class="btn secundario" (click)="fecharModais()">Cancelar</button>
      </footer>
    </form>
  </div>
</div>

<div class="modal-backdrop" *ngIf="modalOcorrenciaAberto">
  <div class="modal-conteudo">
    <header>
      <h2>Registrar ocorrência</h2>
      <button type="button" class="modal-fechar" (click)="fecharModais()">&times;</button>
    </header>
    <form [formGroup]="formOcorrencia" (ngSubmit)="confirmarOcorrencia()">
      <label for="tipoOcorrencia">Tipo de ocorrência</label>
      <select id="tipoOcorrencia" formControlName="tipoCodigo">
        <option value="" disabled>Selecione</option>
        <option *ngFor="let tipo of (tiposOcorrencia$ | async)" [value]="tipo.codigo">{{ tipo.descricao }}</option>
      </select>
      <div class="erro-campo" *ngIf="formOcorrencia.controls.tipoCodigo.invalid && formOcorrencia.controls.tipoCodigo.touched">
        Informe o tipo de ocorrência.
      </div>

      <label for="descricaoOcorrencia">Descrição</label>
      <textarea id="descricaoOcorrencia" rows="4" formControlName="descricao" placeholder="Descreva o que ocorreu"></textarea>
      <div class="erro-campo" *ngIf="formOcorrencia.controls.descricao.invalid && formOcorrencia.controls.descricao.touched">
        Informe uma descrição com pelo menos 5 caracteres.
      </div>

      <footer class="modal-acoes">
        <button type="submit" class="btn primario" [disabled]="formOcorrencia.invalid">Enviar ocorrência</button>
        <button type="button" class="btn secundario" (click)="fecharModais()">Cancelar</button>
      </footer>
    </form>
  </div>
</div>

<div class="feedback-container" *ngIf="mensagemFeedback || erroAcao">
  <div class="feedback-mensagem" *ngIf="mensagemFeedback">{{ mensagemFeedback }}</div>
  <div class="feedback-erro" *ngIf="erroAcao">{{ erroAcao }}</div>
</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-console\gate-operador-console.component.ts ----- 
import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { map, Observable, of, tap } from 'rxjs';
import {
  GateBloqueioRequest,
  GateLiberacaoManualRequest,
  GateOcorrenciaRequest,
  GateOperadorEvento,
  GateOperadorExcecao,
  GateOperadorPainel,
  GateOperadorVeiculo
} from '../../../model/gate/operador.model';
import { GateOperadorService } from '../../../service/servico-gate/gate-operador.service';
import { GateEnumOption } from '../../../model/gate/agendamento.model';

interface AlertaTemporario {
  evento: GateOperadorEvento;
  expiraEm: number;
}

@Component({
  selector: 'app-gate-operador-console',
  templateUrl: './gate-operador-console.component.html',
  styleUrls: ['./gate-operador-console.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class GateOperadorConsoleComponent implements OnInit, OnDestroy {
  readonly painel$: Observable<GateOperadorPainel> = this.gateOperadorService.painel$;
  readonly eventos$: Observable<GateOperadorEvento[]> = this.gateOperadorService.eventos$;
  readonly canaisEntrada$: Observable<GateEnumOption[]> = this.gateOperadorService.listarCanaisEntrada();
  readonly motivosBloqueio$: Observable<GateEnumOption[]> = this.gateOperadorService.listarMotivosExcecao();
  readonly tiposOcorrencia$: Observable<GateEnumOption[]> = this.gateOperadorService.listarTiposOcorrencia();
  readonly statusConexao$ = this.gateOperadorService.statusConexao$;

  readonly filaResumo$: Observable<{ titulo: string; dados: GateOperadorVeiculo[] }[]> = this.painel$.pipe(
    map((painel) => [
      { titulo: 'Entrada', dados: painel.filasEntrada.flatMap((fila) => fila.veiculos) },
      { titulo: 'Saída', dados: painel.filasSaida.flatMap((fila) => fila.veiculos) }
    ])
  );

  readonly formLiberacao = this.fb.group({
    canalEntrada: [null, Validators.required],
    justificativa: ['', [Validators.required, Validators.minLength(5)]],
    notificarTransportadora: [true]
  });

  readonly formBloqueio = this.fb.group({
    motivoCodigo: [null, Validators.required],
    justificativa: ['', [Validators.required, Validators.minLength(5)]],
    bloqueioAte: ['', Validators.required]
  });

  readonly formOcorrencia = this.fb.group({
    tipoCodigo: [null, Validators.required],
    descricao: ['', [Validators.required, Validators.minLength(5)]],
    veiculoId: [null]
  });

  modalLiberacaoAberto = false;
  modalBloqueioAberto = false;
  modalOcorrenciaAberto = false;
  veiculoSelecionado: GateOperadorVeiculo | null = null;
  mensagemFeedback: string | null = null;
  erroAcao: string | null = null;

  alertasRecentes$: Observable<GateOperadorEvento[]> = of([]);

  private readonly alertasBuffer: AlertaTemporario[] = [];

  constructor(private readonly gateOperadorService: GateOperadorService, private readonly fb: FormBuilder) {}

  ngOnInit(): void {
    this.gateOperadorService.carregarPainel().subscribe({
      error: (erro) => console.warn('Não foi possível carregar o painel do Gate.', erro)
    });
    this.gateOperadorService.atualizarHistorico().subscribe({
      error: (erro) => console.warn('Não foi possível carregar o histórico inicial do Gate.', erro)
    });
    this.gateOperadorService.conectarEventos();
    this.alertasRecentes$ = this.gateOperadorService.alertas$.pipe(
      tap((evento) => this.empilharAlerta(evento)),
      map(() => this.obterAlertasAtivos())
    );
  }

  ngOnDestroy(): void {
    this.gateOperadorService.desconectarEventos();
  }

  abrirModalLiberacao(veiculo: GateOperadorVeiculo): void {
    this.veiculoSelecionado = veiculo;
    this.formLiberacao.reset({ canalEntrada: null, justificativa: '', notificarTransportadora: true });
    this.modalLiberacaoAberto = true;
    this.mensagemFeedback = null;
    this.erroAcao = null;
  }

  abrirModalBloqueio(veiculo: GateOperadorVeiculo): void {
    this.veiculoSelecionado = veiculo;
    this.formBloqueio.reset({ motivoCodigo: null, justificativa: '', bloqueioAte: '' });
    this.modalBloqueioAberto = true;
    this.mensagemFeedback = null;
    this.erroAcao = null;
  }

  abrirModalOcorrencia(veiculo: GateOperadorVeiculo | null): void {
    this.veiculoSelecionado = veiculo;
    this.formOcorrencia.reset({ tipoCodigo: null, descricao: '', veiculoId: veiculo?.id ?? null });
    this.modalOcorrenciaAberto = true;
    this.mensagemFeedback = null;
    this.erroAcao = null;
  }

  fecharModais(): void {
    this.modalLiberacaoAberto = false;
    this.modalBloqueioAberto = false;
    this.modalOcorrenciaAberto = false;
  }

  confirmarLiberacao(): void {
    if (!this.veiculoSelecionado || this.formLiberacao.invalid) {
      this.formLiberacao.markAllAsTouched();
      return;
    }

    const payload = this.formLiberacao.getRawValue() as GateLiberacaoManualRequest;
    this.mensagemFeedback = 'Enviando liberação manual...';
    this.erroAcao = null;

    this.gateOperadorService.liberarVeiculo(this.veiculoSelecionado.id, payload).subscribe({
      next: () => {
        this.mensagemFeedback = 'Veículo liberado com sucesso.';
        this.fecharModais();
      },
      error: () => {
        this.erroAcao = 'Não foi possível liberar o veículo. Tente novamente em instantes.';
      }
    });
  }

  confirmarBloqueio(): void {
    if (!this.veiculoSelecionado || this.formBloqueio.invalid) {
      this.formBloqueio.markAllAsTouched();
      return;
    }

    const payload = this.formBloqueio.getRawValue() as GateBloqueioRequest;
    this.mensagemFeedback = 'Registrando bloqueio do veículo...';
    this.erroAcao = null;

    this.gateOperadorService.bloquearVeiculo(this.veiculoSelecionado.id, payload).subscribe({
      next: () => {
        this.mensagemFeedback = 'Bloqueio registrado com sucesso.';
        this.fecharModais();
      },
      error: () => {
        this.erroAcao = 'Não foi possível bloquear o veículo. Verifique os dados e tente novamente.';
      }
    });
  }

  confirmarOcorrencia(): void {
    if (this.formOcorrencia.invalid) {
      this.formOcorrencia.markAllAsTouched();
      return;
    }

    const payload = this.formOcorrencia.getRawValue() as GateOcorrenciaRequest;
    this.mensagemFeedback = 'Enviando ocorrência ao time de monitoramento...';
    this.erroAcao = null;

    this.gateOperadorService.registrarOcorrencia(payload).subscribe({
      next: () => {
        this.mensagemFeedback = 'Ocorrência registrada com sucesso.';
        this.fecharModais();
      },
      error: () => {
        this.erroAcao = 'Não foi possível registrar a ocorrência. Revise as informações e tente novamente.';
      }
    });
  }

  imprimirComprovante(veiculo: GateOperadorVeiculo): void {
    if (!veiculo.podeImprimirComprovante) {
      return;
    }

    this.mensagemFeedback = 'Preparando comprovante de gate...';
    this.gateOperadorService.imprimirComprovante(veiculo.id).subscribe({
      next: () => {
        this.mensagemFeedback = 'Comprovante enviado para impressão.';
      },
      error: () => {
        this.erroAcao = 'Não foi possível imprimir o comprovante. Tente novamente.';
      }
    });
  }

  possuiExcecaoCritica(veiculo: GateOperadorVeiculo | null | undefined): boolean {
    return (veiculo?.excecoes ?? []).some((excecao) => (excecao.nivel ?? '').toUpperCase() === 'CRITICA');
  }

  possuiExcecaoAlerta(veiculo: GateOperadorVeiculo | null | undefined): boolean {
    return (veiculo?.excecoes ?? []).some((excecao) => (excecao.nivel ?? '').toUpperCase() === 'ALERTA');
  }

  classeExcecao(excecao: GateOperadorExcecao): string {
    const nivel = (excecao.nivel ?? '').toUpperCase();
    if (nivel === 'CRITICA') {
      return 'excecao-badge excecao-badge-critica';
    }
    if (nivel === 'ALERTA') {
      return 'excecao-badge excecao-badge-alerta';
    }
    return 'excecao-badge';
  }

  contatoLink(tipo: string, valor: string): string {
    const tipoUpper = (tipo || '').toUpperCase();
    if (tipoUpper === 'TELEFONE' || tipoUpper === 'WHATSAPP') {
      const numero = valor.replace(/[^0-9+]/g, '');
      return `tel:${numero}`;
    }
    if (tipoUpper === 'EMAIL') {
      return `mailto:${valor}`;
    }
    return valor;
  }

  contatoDescricao(tipo: string): string {
    const tipoUpper = (tipo || '').toUpperCase();
    if (tipoUpper === 'TELEFONE') {
      return 'Ligar';
    }
    if (tipoUpper === 'WHATSAPP') {
      return 'WhatsApp';
    }
    if (tipoUpper === 'EMAIL') {
      return 'E-mail';
    }
    return tipo;
  }

  private empilharAlerta(evento: GateOperadorEvento): void {
    const expiracao = Date.now() + 15000;
    this.alertasBuffer.unshift({ evento, expiraEm: expiracao });
    this.descartarAlertasExpirados();
  }

  private obterAlertasAtivos(): GateOperadorEvento[] {
    this.descartarAlertasExpirados();
    return this.alertasBuffer.map((item) => item.evento);
  }

  private descartarAlertasExpirados(): void {
    const agora = Date.now();
    for (let index = this.alertasBuffer.length - 1; index >= 0; index -= 1) {
      if (this.alertasBuffer[index].expiraEm < agora) {
        this.alertasBuffer.splice(index, 1);
      }
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-eventos\gate-operador-eventos.component.css ----- 
.eventos-wrapper {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background: #f4f6fb;
  min-height: 100vh;
}

.eventos-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.eventos-header h1 {
  margin: 0;
  font-size: 1.8rem;
  color: #1a2b6d;
}

.eventos-header p {
  margin: 0.25rem 0 0;
  color: #4f5b7d;
}

.status-badge {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  border-radius: 999px;
  background: #e0f2fe;
  color: #0c4a6e;
  text-transform: capitalize;
}

.status-badge .indicador {
  width: 0.75rem;
  height: 0.75rem;
  border-radius: 50%;
  background: #0ea5e9;
  box-shadow: 0 0 6px rgba(14, 165, 233, 0.4);
}

.status-badge.desconectado {
  background: #fdecea;
  color: #b3261e;
}

.status-badge.desconectado .indicador {
  background: #d93025;
  box-shadow: 0 0 6px rgba(217, 48, 37, 0.4);
}

.status-badge.conectando {
  background: #fff4e5;
  color: #c77700;
}

.status-badge.conectando .indicador {
  background: #f29900;
  box-shadow: 0 0 6px rgba(242, 153, 0, 0.4);
}

.filtros {
  background: #fff;
  border-radius: 1.25rem;
  padding: 1.25rem;
  box-shadow: 0 8px 28px rgba(15, 23, 42, 0.08);
}

.filtros form {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 1rem;
  align-items: end;
}

label {
  font-weight: 600;
  color: #1f2937;
}

select,
input[type='search'] {
  border-radius: 0.75rem;
  border: 1px solid #cbd5f5;
  padding: 0.6rem 0.75rem;
  font-size: 0.95rem;
  background: #f8faff;
}

.lista-eventos {
  display: grid;
  gap: 1rem;
}

.lista-eventos article {
  background: #fff;
  border-radius: 1.25rem;
  padding: 1.25rem;
  box-shadow: 0 8px 28px rgba(15, 23, 42, 0.08);
  border-left: 4px solid transparent;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.lista-eventos article header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
}

.lista-eventos article strong {
  font-size: 1.1rem;
  color: #1a2b6d;
}

.lista-eventos article span {
  color: #475569;
}

.lista-eventos article p {
  margin: 0;
  color: #334155;
}

.lista-eventos article footer {
  display: flex;
  flex-wrap: wrap;
  gap: 0.75rem;
  color: #475569;
  font-size: 0.9rem;
}

.evento-critico {
  border-left-color: #d93025 !important;
  background: #fdecea;
}

.evento-alerta {
  border-left-color: #f29900 !important;
  background: #fff4e5;
}

.evento-normal {
  border-left-color: #a855f7 !important;
  background: #f5f3ff;
}

.vazio {
  text-align: center;
  color: #64748b;
  font-style: italic;
}

@media (max-width: 768px) {
  .eventos-wrapper {
    padding: 1rem;
  }

  .eventos-header {
    flex-direction: column;
    align-items: flex-start;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-eventos\gate-operador-eventos.component.html ----- 
<section class="eventos-wrapper">
  <header class="eventos-header">
    <div>
      <h1>Eventos do Gate</h1>
      <p>Acompanhe a linha do tempo de eventos relevantes do gate com atualização contínua.</p>
    </div>
    <div class="status-badge" [ngClass]="(statusConexao$ | async)">
      <span class="indicador"></span>
      <span>
        {{ (statusConexao$ | async) === 'conectado' ? 'Tempo real' : (statusConexao$ | async) === 'conectando' ? 'Reconectando...' : 'Sem conexão' }}
      </span>
    </div>
  </header>

  <section class="filtros">
    <form [formGroup]="filtros">
      <label for="nivelFiltro">Nível</label>
      <select id="nivelFiltro" formControlName="nivel">
        <option *ngFor="let nivel of (niveisEvento$ | async)" [value]="nivel.codigo">{{ nivel.descricao }}</option>
      </select>

      <label for="buscaFiltro">Buscar</label>
      <input id="buscaFiltro" type="search" formControlName="busca" placeholder="Digite placa, transportadora ou palavra-chave" />
    </form>
  </section>

  <section class="lista-eventos">
    <article *ngFor="let evento of (eventosFiltrados$ | async)" [ngClass]="classeNivel(evento.nivel)">
      <header>
        <strong>{{ evento.tipo }}</strong>
        <span>{{ evento.registradoEm | date:'short' }}</span>
      </header>
      <p>{{ evento.descricao }}</p>
      <footer>
        <span *ngIf="evento.placaVeiculo">Placa: {{ evento.placaVeiculo }}</span>
        <span *ngIf="evento.transportadora">Transportadora: {{ evento.transportadora }}</span>
        <span *ngIf="evento.usuario">Operador: {{ evento.usuario }}</span>
      </footer>
    </article>
    <p class="vazio" *ngIf="!(eventosFiltrados$ | async)?.length">Nenhum evento encontrado para os filtros informados.</p>
  </section>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\operador\gate-operador-eventos\gate-operador-eventos.component.ts ----- 
import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { combineLatest, map, Observable, startWith, Subject, takeUntil } from 'rxjs';
import { GateOperadorService } from '../../../service/servico-gate/gate-operador.service';
import { GateOperadorEvento } from '../../../model/gate/operador.model';
import { GateEnumOption } from '../../../model/gate/agendamento.model';

@Component({
  selector: 'app-gate-operador-eventos',
  templateUrl: './gate-operador-eventos.component.html',
  styleUrls: ['./gate-operador-eventos.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class GateOperadorEventosComponent implements OnInit, OnDestroy {
  readonly statusConexao$ = this.gateOperadorService.statusConexao$;
  readonly niveisEvento$: Observable<GateEnumOption[]> = this.gateOperadorService.listarNiveisEvento().pipe(
    map((niveis) => [{ codigo: 'TODOS', descricao: 'Todos os níveis' }, ...niveis])
  );
  readonly eventos$: Observable<GateOperadorEvento[]> = this.gateOperadorService.eventos$;

  readonly filtros = this.fb.group({
    nivel: ['TODOS'],
    busca: ['']
  });

  readonly eventosFiltrados$: Observable<GateOperadorEvento[]> = combineLatest([
    this.eventos$,
    this.filtros.get('nivel')!.valueChanges.pipe(startWith(this.filtros.get('nivel')!.value ?? 'TODOS')),
    this.filtros.get('busca')!.valueChanges.pipe(startWith(this.filtros.get('busca')!.value ?? ''))
  ]).pipe(
    map(([eventos, nivelSelecionado, busca]) => {
      const buscaNormalizada = (busca ?? '').toString().toLowerCase();
      return eventos.filter((evento) => {
        const nivelMatch = nivelSelecionado === 'TODOS' || (evento.nivel ?? '').toUpperCase() === (nivelSelecionado ?? '').toUpperCase();
        const buscaMatch = !buscaNormalizada ||
          `${evento.tipo} ${evento.descricao} ${evento.placaVeiculo ?? ''} ${evento.transportadora ?? ''}`
            .toLowerCase()
            .includes(buscaNormalizada);
        return nivelMatch && buscaMatch;
      });
    })
  );

  private readonly destroy$ = new Subject<void>();

  constructor(private readonly gateOperadorService: GateOperadorService, private readonly fb: FormBuilder) {}

  ngOnInit(): void {
    this.gateOperadorService.carregarPainel().subscribe({
      error: (erro) => console.warn('Não foi possível atualizar o painel do Gate.', erro)
    });
    this.gateOperadorService.atualizarHistorico().subscribe({
      error: (erro) => console.warn('Não foi possível carregar o histórico do Gate.', erro)
    });
    this.gateOperadorService.conectarEventos();

    this.filtros.valueChanges.pipe(takeUntil(this.destroy$)).subscribe();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  classeNivel(nivel: string | null | undefined): string {
    const nivelUpper = (nivel ?? '').toUpperCase();
    if (nivelUpper === 'CRITICA') {
      return 'evento-critico';
    }
    if (nivelUpper === 'ALERTA') {
      return 'evento-alerta';
    }
    return 'evento-normal';
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-detalhe\agendamento-detalhe.component.css ----- 
.agendamento-detalhe {
  display: flex;
  flex-direction: column;
  gap: 24px;
  background: #ffffff;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 10px 30px rgba(15, 23, 42, 0.08);
}

.agendamento-detalhe--vazio {
  align-items: center;
  justify-content: center;
  min-height: 300px;
  color: #6b7280;
  font-size: 1rem;
}

.agendamento-detalhe__cabecalho {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: 16px;
}

.agendamento-detalhe__realtime {
  display: flex;
  flex-direction: column;
  gap: 6px;
  background: rgba(37, 99, 235, 0.06);
  border-radius: 12px;
  padding: 12px 16px;
}

.realtime__titulo {
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.08em;
  color: #1d4ed8;
  margin: 0;
}

.realtime__status {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #1e293b;
  font-weight: 500;
}

.realtime__indicador {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: #cbd5f5;
  position: relative;
}

.realtime__indicador::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: 50%;
  box-shadow: 0 0 0 0 rgba(37, 99, 235, 0.4);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.realtime__indicador--conectado {
  background: #16a34a;
}

.realtime__indicador--conectado::after {
  box-shadow: 0 0 0 4px rgba(22, 163, 74, 0.25);
  opacity: 1;
}

.realtime__indicador--conectando,
.realtime__indicador--reconectando {
  background: #f97316;
}

.realtime__indicador--desconectado {
  background: #dc2626;
}

.realtime__indicador--conectando::after,
.realtime__indicador--reconectando::after {
  animation: indicador-pulso 1.6s ease-in-out infinite;
  box-shadow: 0 0 0 0 rgba(249, 115, 22, 0.35);
  opacity: 1;
}

.realtime__mensagem {
  font-size: 0.9rem;
}

@keyframes indicador-pulso {
  0% {
    box-shadow: 0 0 0 0 rgba(249, 115, 22, 0.35);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(249, 115, 22, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(249, 115, 22, 0);
  }
}

.agendamento-detalhe__alertas {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.alerta {
  padding: 12px 16px;
  border-radius: 12px;
  font-size: 0.95rem;
}

.alerta--info {
  background: #eff6ff;
  color: #1d4ed8;
}

.alerta--sucesso {
  background: #ecfdf5;
  color: #047857;
}

.alerta--aviso {
  background: #fff7ed;
  color: #b45309;
}

.alerta--erro {
  background: #fee2e2;
  color: #b91c1c;
}

.agendamento-detalhe__cabecalho h3 {
  margin: 0;
  font-size: 1.6rem;
  color: #1f2937;
}

.agendamento-detalhe__cabecalho p {
  margin: 6px 0 0;
  color: #6b7280;
}

.badge {
  background: #2563eb;
  color: #fff;
  padding: 6px 14px;
  border-radius: 999px;
  font-weight: 600;
  font-size: 0.85rem;
}

.agendamento-detalhe__grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 16px;
}

.agendamento-detalhe__historico-conteiner {
  background: #f9fafb;
  border-radius: 16px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.historico-conteiner__cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
  flex-wrap: wrap;
}

.historico-conteiner__cabecalho h4 {
  margin: 0 0 6px 0;
  font-size: 1.05rem;
  color: #1f2937;
}

.historico-conteiner__cabecalho span {
  display: block;
  color: #4b5563;
  font-size: 0.85rem;
}

.historico-conteiner__atualizacao {
  color: #6b7280;
  font-size: 0.8rem;
}

.historico-conteiner__mensagem {
  margin: 0;
  font-size: 0.9rem;
  color: #4b5563;
}

.historico-conteiner__mensagem--erro {
  color: #b91c1c;
}

.historico-conteiner__mensagem--vazio {
  color: #6b7280;
}

.historico-conteiner__lista {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.historico-conteiner__item {
  background: #ffffff;
  border-radius: 12px;
  padding: 12px 16px;
  box-shadow: inset 0 0 0 1px rgba(209, 213, 219, 0.5);
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.historico-conteiner__item-cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: baseline;
  gap: 12px;
  flex-wrap: wrap;
}

.historico-conteiner__item-cabecalho strong {
  font-size: 0.95rem;
  color: #1f2937;
}

.historico-conteiner__item-cabecalho span {
  color: #6b7280;
  font-size: 0.8rem;
}

.agendamento-detalhe__grid div {
  display: flex;
  flex-direction: column;
  gap: 4px;
  background: #f9fafb;
  border-radius: 12px;
  padding: 12px;
}

.rotulo {
  font-size: 0.75rem;
  text-transform: uppercase;
  color: #9ca3af;
  letter-spacing: 0.05em;
}

.agendamento-detalhe__documentos header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.agendamento-detalhe__documentos h4,
.agendamento-detalhe__upload h4 {
  margin: 0;
  font-size: 1.05rem;
  color: #1f2937;
}

.documentos {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.documento {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #f3f4f6;
  border-radius: 12px;
  padding: 12px 16px;
}

.documento div {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.documento__status {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  font-size: 0.75rem;
  font-weight: 700;
  letter-spacing: 0.03em;
  text-transform: uppercase;
  padding: 4px 10px;
  border-radius: 999px;
  width: fit-content;
}

.documento__status--processando {
  background: #fef3c7;
  color: #92400e;
}

.documento__status--sucesso {
  background: #dcfce7;
  color: #047857;
}

.documento__status--erro {
  background: #fee2e2;
  color: #b91c1c;
}

.documento__mensagem {
  color: #4b5563;
  font-size: 0.8rem;
}

.documento a {
  color: #2563eb;
  font-weight: 600;
  text-decoration: none;
}

.documentos__vazio {
  margin: 0;
  color: #6b7280;
}

.upload__botao {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  border-radius: 10px;
  padding: 10px 16px;
  background: #2563eb;
  color: #fff;
  cursor: pointer;
  font-weight: 600;
  box-shadow: 0 10px 20px rgba(37, 99, 235, 0.2);
  width: fit-content;
}

.upload__botao input {
  display: none;
}

.previews {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 16px;
  margin: 16px 0;
}

.preview {
  background: #f9fafb;
  border-radius: 14px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  box-shadow: inset 0 0 0 1px rgba(209, 213, 219, 0.6);
}

.preview__thumb {
  width: 100%;
  aspect-ratio: 4/3;
  border-radius: 10px;
  overflow: hidden;
  background: #e5e7eb;
  display: flex;
  align-items: center;
  justify-content: center;
}

.preview__thumb img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.preview__icone {
  background: #1f2937;
  color: #fff;
  padding: 12px;
  border-radius: 10px;
  text-transform: uppercase;
  font-size: 0.75rem;
}

.preview__dados {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.preview__dados strong {
  font-size: 0.95rem;
  color: #1f2937;
}

.preview__dados small {
  color: #6b7280;
}

.preview__progresso {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.barra {
  width: 100%;
  height: 6px;
  border-radius: 999px;
  background: #e5e7eb;
  overflow: hidden;
}

.preenchimento {
  display: block;
  height: 100%;
  background: linear-gradient(90deg, #2563eb, #60a5fa);
  transition: width 0.2s ease;
}

.status {
  font-size: 0.8rem;
  color: #2563eb;
  font-weight: 600;
}

.status--erro {
  color: #dc2626;
}

.btn {
  border: none;
  border-radius: 10px;
  padding: 10px 16px;
  cursor: pointer;
  font-weight: 600;
  background: #e5e7eb;
  color: #1f2937;
  width: fit-content;
}

.agendamento-detalhe__acoes {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
}

.agendamento-detalhe__pass {
  align-self: stretch;
}

.agendamento-detalhe__instrucoes ul {
  margin: 0;
  padding-left: 1.2rem;
  display: flex;
  flex-direction: column;
  gap: 6px;
  color: #475569;
}

.agendamento-detalhe__instrucoes h4 {
  margin: 0 0 8px;
  color: #1f2937;
}

.btn--primario {
  background: #2563eb;
  color: #fff;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  box-shadow: none;
}

@media (max-width: 768px) {
  .agendamento-detalhe {
    padding: 16px;
  }

  .agendamento-detalhe__cabecalho {
    flex-direction: column;
    align-items: flex-start;
  }

  .agendamento-detalhe__acoes {
    flex-direction: column;
  }

  .agendamento-detalhe__realtime {
    padding: 12px;
  }
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-detalhe\agendamento-detalhe.component.html ----- 
<section class="agendamento-detalhe" *ngIf="agendamento; else selecione">
  <header class="agendamento-detalhe__cabecalho">
    <div>
      <h3>{{ agendamento?.codigo }}</h3>
      <p>{{ agendamento?.transportadoraNome || '—' }}</p>
    </div>
    <span class="badge">{{ agendamento?.statusDescricao || agendamento?.status }}</span>
  </header>

  <div class="agendamento-detalhe__realtime">
    <span class="realtime__titulo">{{ 'gate.agendamentoDetalhe.realtime.titulo' | translate }}</span>
    <div class="realtime__status">
      <span
        class="realtime__indicador"
        [ngClass]="{
          'realtime__indicador--conectado': conexaoEstado === 'conectado',
          'realtime__indicador--reconectando': conexaoEstado === 'reconectando',
          'realtime__indicador--desconectado': conexaoEstado === 'desconectado',
          'realtime__indicador--conectando': conexaoEstado === 'conectando'
        }"
      ></span>
      <span class="realtime__mensagem">
        {{
          ('gate.agendamentoDetalhe.realtime.status.' + conexaoEstado)
            | translate: conexaoParametros
        }}
      </span>
    </div>
  </div>

  <div class="agendamento-detalhe__alertas">
    <div class="alerta alerta--info" *ngIf="janelaMensagem">{{ janelaMensagem }}</div>
    <div class="alerta alerta--sucesso" *ngIf="statusMensagem">{{ statusMensagem }}</div>
    <div class="alerta alerta--aviso" *ngIf="notificacaoErro">{{ notificacaoErro }}</div>
    <div class="alerta alerta--erro" *ngIf="validacaoErroMensagem">{{ validacaoErroMensagem }}</div>
  </div>

  <div class="agendamento-detalhe__grid">
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.operacao' | translate }}</span>
      <span>{{ agendamento?.tipoOperacaoDescricao || agendamento?.tipoOperacao }}</span>
    </div>
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.janela' | translate }}</span>
      <span>
        {{ agendamento?.dataJanela | date: 'dd/MM/yyyy' }}
        {{ agendamento?.horaInicioJanela }} - {{ agendamento?.horaFimJanela }}
      </span>
    </div>
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.motorista' | translate }}</span>
      <span>{{ agendamento?.motoristaNome || '—' }}</span>
    </div>
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.placa' | translate }}</span>
      <span>{{ agendamento?.placaVeiculo || '—' }}</span>
    </div>
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.chegadaPrevista' | translate }}</span>
      <span>{{ agendamento?.horarioPrevistoChegada || '—' }}</span>
    </div>
    <div>
      <span class="rotulo">{{ 'gate.agendamentoDetalhe.saidaPrevista' | translate }}</span>
      <span>{{ agendamento?.horarioPrevistoSaida || '—' }}</span>
    </div>
  </div>

  <div class="agendamento-detalhe__acoes">
    <button type="button" class="btn" (click)="confirmarChegadaAntecipada()" [disabled]="carregandoConfirmacao">
      {{ 'gate.agendamentoDetalhe.confirmarChegada' | translate }}
    </button>
    <button type="button" class="btn" (click)="baixarComprovante()">
      {{ 'gate.agendamentoDetalhe.downloadComprovante' | translate }}
    </button>
    <button type="button" class="btn" (click)="baixarInstrucoes()">
      {{ 'gate.agendamentoDetalhe.downloadInstrucoes' | translate }}
    </button>
    <button type="button" class="btn" (click)="imprimir()">
      {{ 'gate.agendamentoDetalhe.imprimir' | translate }}
    </button>
  </div>

  <app-motorista-pass class="agendamento-detalhe__pass"
    [gatePass]="agendamento?.gatePass"
    [agendamentoCodigo]="agendamento?.codigo"
  ></app-motorista-pass>

  <section class="agendamento-detalhe__historico-conteiner" *ngIf="codigoConteinerSelecionado">
    <header class="historico-conteiner__cabecalho">
      <div>
        <h4>{{ 'gate.agendamentoDetalhe.historicoConteiner.titulo' | translate:{ codigo: codigoConteinerSelecionado } }}</h4>
        <span *ngIf="detalheConteiner">
          {{ 'gate.agendamentoDetalhe.historicoConteiner.statusAtual' | translate:{ status: formatarStatusConteiner() || detalheConteiner?.statusOperacional } }}
        </span>
        <span *ngIf="detalheConteiner?.posicaoPatio">
          {{ 'gate.agendamentoDetalhe.historicoConteiner.posicaoAtual' | translate:{ posicao: detalheConteiner?.posicaoPatio } }}
        </span>
      </div>
      <span class="historico-conteiner__atualizacao" *ngIf="detalheConteiner?.ultimaAtualizacao">
        {{ 'gate.agendamentoDetalhe.historicoConteiner.ultimaAtualizacao' | translate:{ data: (detalheConteiner?.ultimaAtualizacao | date: 'dd/MM/yyyy HH:mm') } }}
      </span>
    </header>
    <p class="historico-conteiner__mensagem" *ngIf="carregandoHistoricoConteiner">
      {{ 'gate.agendamentoDetalhe.historicoConteiner.carregando' | translate }}
    </p>
    <p class="historico-conteiner__mensagem historico-conteiner__mensagem--erro"
      *ngIf="!carregandoHistoricoConteiner && erroHistoricoConteiner">
      {{ erroHistoricoConteiner }}
    </p>
    <ul class="historico-conteiner__lista"
      *ngIf="!carregandoHistoricoConteiner && !erroHistoricoConteiner && historicoConteiner.length; else historicoConteinerVazio"
      [attr.aria-live]="'polite'">
      <li class="historico-conteiner__item" *ngFor="let evento of historicoConteiner; trackBy: trackPorHistorico">
        <div class="historico-conteiner__item-cabecalho">
          <strong>{{ descricaoTipoOperacao(evento.tipoOperacao) }}</strong>
          <span>{{ evento.dataRegistro | date: 'dd/MM/yyyy HH:mm' }}</span>
        </div>
        <p>{{ sanitizarTexto(evento.descricao) }}</p>
        <small *ngIf="evento.responsavel">
          {{ 'gate.agendamentoDetalhe.historicoConteiner.responsavel' | translate:{ responsavel: sanitizarTexto(evento.responsavel) } }}
        </small>
        <small *ngIf="evento.posicaoAtual">
          {{ 'gate.agendamentoDetalhe.historicoConteiner.posicaoMovimentacao' | translate:{ posicao: sanitizarTexto(evento.posicaoAtual || '') } }}
        </small>
      </li>
    </ul>
    <ng-template #historicoConteinerVazio>
      <p class="historico-conteiner__mensagem historico-conteiner__mensagem--vazio">
        {{ 'gate.agendamentoDetalhe.historicoConteiner.vazio' | translate }}
      </p>
    </ng-template>
  </section>

  <section class="agendamento-detalhe__documentos">
    <header>
      <h4>{{ 'gate.agendamentoDetalhe.documentosAnexados' | translate }}</h4>
      <span>{{ 'gate.agendamentoDetalhe.quantidadeDocumentos' | translate: { quantidade: agendamento?.documentos?.length || 0 } }}</span>
    </header>

    <ul class="documentos" *ngIf="agendamento?.documentos?.length; else nenhumDocumento" [attr.aria-live]="'polite'">
      <li class="documento" *ngFor="let documento of agendamento?.documentos; trackBy: trackPorDocumento">
        <div>
          <strong>{{ documento.nomeArquivo }}</strong>
          <span>{{ documento.tamanhoBytes / 1024 | number: '1.0-0' }} KB</span>
          <span [ngClass]="obterClasseStatus(documento)">{{ descricaoStatus(documento) }}</span>
          <small *ngIf="documento.ultimaRevalidacao">
            {{ 'gate.agendamentoDetalhe.ultimaRevalidacao' | translate }}:
            {{ documento.ultimaRevalidacao | date: 'short' }}
          </small>
          <small *ngIf="documento.mensagemValidacao" class="documento__mensagem">
            {{ documento.mensagemValidacao }}
          </small>
        </div>
        <a [href]="documento.urlDocumento" target="_blank" rel="noopener">
          {{ 'gate.agendamentoDetalhe.abrirDocumento' | translate }}
        </a>
      </li>
    </ul>

    <ng-template #nenhumDocumento>
      <p class="documentos__vazio">{{ 'gate.agendamentoDetalhe.nenhumDocumento' | translate }}</p>
    </ng-template>
  </section>

  <section class="agendamento-detalhe__upload">
    <h4>{{ 'gate.agendamentoDetalhe.adicionarDocumentos' | translate }}</h4>
    <label class="upload__botao">
      {{ 'gate.agendamentoDetalhe.selecionarArquivos' | translate }}
      <input type="file" multiple (change)="aoSelecionarArquivos($event)" [disabled]="existeUploadEmAndamento()" />
    </label>

    <div class="previews" *ngIf="documentosSelecionados.length">
      <article class="preview" *ngFor="let preview of documentosSelecionados; trackBy: trackPorPreview">
        <div class="preview__thumb" *ngIf="preview.url; else icone">
          <img [src]="preview.url" [alt]="preview.nome" />
        </div>
        <ng-template #icone>
          <div class="preview__icone">{{ preview.tipo.split('/')[1] || 'arquivo' }}</div>
        </ng-template>
        <div class="preview__dados">
          <strong>{{ preview.nome }}</strong>
          <small>{{ preview.tamanho }}</small>
        </div>
        <div class="preview__progresso" *ngIf="acompanharProgresso(preview.nome) as progresso">
          <div class="barra">
            <span class="preenchimento" [style.width.%]="progresso.progress"></span>
          </div>
          <small class="status" [class.status--erro]="progresso.status === 'erro'">
            {{ progresso.status === 'concluido'
              ? ('gate.agendamentoDetalhe.uploadConcluido' | translate)
              : progresso.status === 'erro'
                ? ('gate.agendamentoDetalhe.uploadErro' | translate)
                : progresso.progress + '%' }}
          </small>
        </div>
      </article>
    </div>

    <button
      type="button"
      class="btn btn--primario"
      [disabled]="!documentosSelecionados.length || existeUploadEmAndamento()"
      (click)="enviarDocumentos()"
    >
      {{ 'gate.agendamentoDetalhe.enviarDocumentos' | translate }}
    </button>
  </section>

  <section class="agendamento-detalhe__instrucoes">
    <h4>{{ 'gate.agendamentoDetalhe.instrucoesTitulo' | translate }}</h4>
    <ul>
      <li *ngFor="let instrucao of instrucoes">{{ instrucao }}</li>
    </ul>
  </section>
</section>

<ng-template #selecione>
  <section class="agendamento-detalhe agendamento-detalhe--vazio">
    <p>{{ 'gate.agendamentoDetalhe.selecione' | translate }}</p>
  </section>
</ng-template>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-detalhe\agendamento-detalhe.component.ts ----- 
import {
  Component,
  EventEmitter,
  Input,
  OnDestroy,
  Output
} from '@angular/core';
import {
  Agendamento,
  DocumentoAgendamento,
  GatePass,
  UploadDocumentoStatus
} from '../../../model/gate/agendamento.model';
import { GateApiService } from '../../../service/servico-gate/gate-api.service';
import { forkJoin, Subscription } from 'rxjs';
import { finalize } from 'rxjs/operators';
import {
  AgendamentoRealtimeEvent,
  AgendamentoRealtimeService
} from '../../../service/servico-gate/agendamento-realtime.service';
import { PushNotificationService } from '../../../service/servico-gate/push-notification.service';
import { AgendamentoComprovanteService } from '../../../service/servico-gate/agendamento-comprovante.service';
import { TranslateService } from '@ngx-translate/core';
import {
  DetalheConteiner,
  HistoricoConteiner,
  HistoricoConteinerService
} from '../../../service/servico-gate/historico-conteiner.service';
import { SanitizadorConteudoService } from '../../../service/sanitizacao/sanitizador-conteudo.service';

interface DocumentoPreview {
  nome: string;
  tamanho: string;
  tipo: string;
  url?: string;
  arquivo: File;
}

interface JanelaProximaPayload {
  minutosRestantes: number;
}

interface RealtimeReconexaoPayload {
  tentativa: number;
  delayMs: number;
}

@Component({
  selector: 'app-agendamento-detalhe',
  templateUrl: './agendamento-detalhe.component.html',
  styleUrls: ['./agendamento-detalhe.component.css']
})
export class AgendamentoDetalheComponent implements OnDestroy {
  private _agendamento: Agendamento | null = null;
  @Input()
  set agendamento(value: Agendamento | null) {
    if (value?.id !== this._agendamento?.id) {
      this.conectarRealtime(value);
    }
    this._agendamento = value;
    this.limparSelecao();
    this.configurarMonitoramentoConteiner(value?.codigo ?? null);
  }
  get agendamento(): Agendamento | null {
    return this._agendamento;
  }

  @Input() uploadStatus: UploadDocumentoStatus[] = [];
  @Output() anexarDocumentos = new EventEmitter<File[]>();

  documentosSelecionados: DocumentoPreview[] = [];
  janelaMensagem: string | null = null;
  statusMensagem: string | null = null;
  notificacaoErro: string | null = null;
  carregandoConfirmacao = false;
  conexaoEstado: 'conectando' | 'conectado' | 'reconectando' | 'desconectado' = 'desconectado';
  reconexaoEmSegundos: number | null = null;
  reconexaoTentativa: number | null = null;
  validacaoErroMensagem: string | null = null;
  historicoConteiner: HistoricoConteiner[] = [];
  detalheConteiner: DetalheConteiner | null = null;
  carregandoHistoricoConteiner = false;
  erroHistoricoConteiner: string | null = null;

  private realtimeSub?: Subscription;
  private notificacaoSolicitada = false;
  private historicoIntervalo?: ReturnType<typeof setInterval>;
  private codigoConteinerMonitorado: string | null = null;
  private readonly intervaloHistoricoMs = 15000;

  constructor(
    private readonly gateApiService: GateApiService,
    private readonly realtimeService: AgendamentoRealtimeService,
    private readonly pushNotificationService: PushNotificationService,
    private readonly comprovanteService: AgendamentoComprovanteService,
    private readonly translate: TranslateService,
    private readonly historicoConteinerService: HistoricoConteinerService,
    private readonly sanitizadorConteudo: SanitizadorConteudoService
  ) {}

  ngOnDestroy(): void {
    this.realtimeSub?.unsubscribe();
    this.liberarPreviews();
    this.conexaoEstado = 'desconectado';
    this.reconexaoEmSegundos = null;
    this.reconexaoTentativa = null;
    this.limparMonitoramentoConteiner();
  }

  aoSelecionarArquivos(evento: Event): void {
    const input = evento.target as HTMLInputElement | null;
    const arquivos = Array.from(input?.files ?? []);
    this.liberarPreviews();
    this.documentosSelecionados = arquivos.map((arquivo) => ({
      nome: arquivo.name,
      tamanho: this.formatarTamanho(arquivo.size),
      tipo: arquivo.type || 'application/octet-stream',
      url: arquivo.type.startsWith('image/') ? URL.createObjectURL(arquivo) : undefined,
      arquivo
    }));
  }

  enviarDocumentos(): void {
    if (!this.documentosSelecionados.length) {
      return;
    }
    this.anexarDocumentos.emit(this.documentosSelecionados.map((item) => item.arquivo));
    this.limparSelecao();
  }

  acompanharProgresso(nomeArquivo: string): UploadDocumentoStatus | undefined {
    return this.uploadStatus.find((status) => status.fileName === nomeArquivo);
  }

  existeUploadEmAndamento(): boolean {
    return this.uploadStatus.some((status) => status.status === 'enviando');
  }

  confirmarChegadaAntecipada(): void {
    if (!this.agendamento) {
      return;
    }
    this.carregandoConfirmacao = true;
    this.gateApiService
      .confirmarChegadaAntecipada(this.agendamento.id)
      .pipe(finalize(() => (this.carregandoConfirmacao = false)))
      .subscribe((agendamento) => {
        this._agendamento = agendamento;
        this.statusMensagem = this.translate.instant('gate.agendamentoDetalhe.statusAtualizado', {
          status: agendamento.statusDescricao ?? agendamento.status
        });
      });
  }

  baixarComprovante(): void {
    if (!this.agendamento) {
      return;
    }
    const blob = this.comprovanteService.gerar(this.agendamento);
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${this.agendamento.codigo}-comprovante.txt`;
    link.click();
    URL.revokeObjectURL(url);
  }

  imprimir(): void {
    if (!this.agendamento) {
      return;
    }
    const blob = this.comprovanteService.gerar(this.agendamento);
    const url = URL.createObjectURL(blob);
    const janela = window.open(url);
    if (janela) {
      janela.onload = () => janela.print();
    } else {
      window.print();
    }
  }

  baixarInstrucoes(): void {
    if (!this.agendamento) {
      return;
    }
    const instrucoes = this.instrucoes;
    if (!instrucoes.length) {
      return;
    }
    const titulo = this.translate.instant('gate.agendamentoDetalhe.instrucoesArquivoTitulo', {
      codigo: this.agendamento.codigo
    });
    const conteudo = [
      titulo,
      '='.repeat(50),
      ...instrucoes.map((instrucao, indice) => `${indice + 1}. ${instrucao}`)
    ].join('\n');
    const blob = new Blob([conteudo], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${this.agendamento.codigo}-instrucoes.txt`;
    link.click();
    URL.revokeObjectURL(url);
  }

  trackPorDocumento(_: number, documento: DocumentoAgendamento): number {
    return documento.id;
  }

  trackPorPreview(_: number, preview: DocumentoPreview): string {
    return preview.nome;
  }

  get instrucoes(): string[] {
    const valor = this.translate.instant('gate.agendamentoDetalhe.instrucoes');
    return Array.isArray(valor) ? valor : [valor];
  }

  get conexaoParametros(): Record<string, string | number> {
    return {
      segundos: this.reconexaoEmSegundos ?? '',
      tentativa: this.reconexaoTentativa ?? ''
    };
  }

  private conectarRealtime(agendamento: Agendamento | null): void {
    this.realtimeSub?.unsubscribe();
    this.janelaMensagem = null;
    this.statusMensagem = null;
    this.notificacaoErro = null;
    this.validacaoErroMensagem = null;
    this.conexaoEstado = agendamento ? 'conectando' : 'desconectado';
    this.reconexaoEmSegundos = null;
    this.reconexaoTentativa = null;
    if (!agendamento) {
      return;
    }
    if (!this.notificacaoSolicitada) {
      this.notificacaoSolicitada = true;
      this.pushNotificationService.requestPermission().then((granted) => {
        if (!granted) {
          this.notificacaoErro = this.translate.instant('gate.agendamentoDetalhe.pushPermissionDenied');
        }
      });
    }
    this.realtimeSub = this.realtimeService.conectar(agendamento.id).subscribe({
      next: (event) => this.processarEvento(event),
      error: () => {
        this.notificacaoErro = this.translate.instant('gate.agendamentoDetalhe.realtimeErro');
        this.conexaoEstado = 'desconectado';
      }
    });
  }

  private processarEvento(evento: AgendamentoRealtimeEvent): void {
    switch (evento.type) {
      case 'snapshot':
      case 'status-atualizado':
        this._agendamento = evento.data as Agendamento;
        if (evento.type === 'status-atualizado' && this.agendamento) {
          this.statusMensagem = this.translate.instant('gate.agendamentoDetalhe.statusAtualizado', {
            status: this.agendamento.statusDescricao ?? this.agendamento.status
          });
        }
        this.recarregarHistoricoSeNecessario();
        break;
      case 'conexao-estabelecida':
        this.conexaoEstado = 'conectado';
        this.reconexaoEmSegundos = null;
        this.reconexaoTentativa = null;
        break;
      case 'conexao-perdida':
        this.conexaoEstado = 'desconectado';
        break;
      case 'reconectando': {
        const payload = evento.data as RealtimeReconexaoPayload | null;
        this.reconexaoTentativa = payload?.tentativa ?? null;
        this.reconexaoEmSegundos = payload ? Math.max(1, Math.ceil(payload.delayMs / 1000)) : null;
        this.conexaoEstado = 'reconectando';
        break;
      }
      case 'janela-proxima':
        this.exibirJanelaProxima(evento.data as JanelaProximaPayload);
        break;
      case 'documentos-atualizados':
      case 'documentos-revalidados': {
        const documentos = evento.data as DocumentoAgendamento[];
        this.gerenciarStatusDocumentos(documentos);
        if (this.agendamento) {
          this._agendamento = {
            ...this.agendamento,
            documentos
          };
        }
        break;
      }
      case 'gate-pass-atualizado':
        if (this.agendamento) {
          this._agendamento = {
            ...this.agendamento,
            gatePass: evento.data as GatePass
          };
        }
        break;
    }
  }

  private async exibirJanelaProxima(payload: JanelaProximaPayload | null): Promise<void> {
    if (!payload) {
      return;
    }
    const minutos = Math.max(0, Math.round(payload.minutosRestantes));
    this.janelaMensagem = this.translate.instant('gate.agendamentoDetalhe.janelaProxima', {
      minutos
    });
    try {
      await this.pushNotificationService.showNotification(
        this.translate.instant('gate.agendamentoDetalhe.notificacaoJanelaTitulo'),
        {
          body: this.janelaMensagem,
          icon: 'assets/icons/bell.svg'
        }
      );
    } catch (error) {
      if (error instanceof Error && error.message === 'notification-permission-denied') {
        this.notificacaoErro = this.translate.instant('gate.agendamentoDetalhe.pushPermissionDenied');
      }
    }
  }

  private limparSelecao(): void {
    this.liberarPreviews();
    this.documentosSelecionados = [];
  }

  private liberarPreviews(): void {
    this.documentosSelecionados
      .filter((preview) => preview.url)
      .forEach((preview) => URL.revokeObjectURL(preview.url!));
  }

  private formatarTamanho(bytes: number): string {
    if (bytes === 0) {
      return '0 B';
    }
    const unidades = ['B', 'KB', 'MB', 'GB'];
    const indice = Math.floor(Math.log(bytes) / Math.log(1024));
    const tamanho = bytes / Math.pow(1024, indice);
    return `${tamanho.toFixed(1)} ${unidades[indice]}`;
  }

  obterClasseStatus(documento: DocumentoAgendamento): string {
    const base = 'documento__status';
    switch (documento.statusValidacao) {
      case 'VALIDADO':
        return `${base} documento__status--sucesso`;
      case 'FALHA':
        return `${base} documento__status--erro`;
      default:
        return `${base} documento__status--processando`;
    }
  }

  descricaoStatus(documento: DocumentoAgendamento): string {
    return documento.statusValidacaoDescricao ?? documento.statusValidacao;
  }

  private gerenciarStatusDocumentos(documentos: DocumentoAgendamento[]): void {
    if (!documentos) {
      return;
    }
    const anteriores = new Map<number, string>();
    (this.agendamento?.documentos ?? []).forEach((doc) => anteriores.set(doc.id, doc.statusValidacao));

    let mensagemSucesso: string | null = null;
    let mensagemErro: string | null = null;

    documentos.forEach((doc) => {
      const anterior = anteriores.get(doc.id);
      const nomeDocumento = doc.nomeArquivo || doc.tipoDocumento;
      if (doc.statusValidacao === 'PROCESSANDO' && anterior !== 'PROCESSANDO') {
        this.statusMensagem = this.translate.instant('gate.agendamentoDetalhe.documentoProcessando', {
          nome: nomeDocumento
        });
        this.validacaoErroMensagem = null;
      } else if (doc.statusValidacao === 'VALIDADO' && anterior !== 'VALIDADO') {
        mensagemSucesso = this.translate.instant('gate.agendamentoDetalhe.documentoValidado', {
          nome: nomeDocumento
        });
      } else if (doc.statusValidacao === 'FALHA' && anterior !== 'FALHA') {
        mensagemErro = this.translate.instant('gate.agendamentoDetalhe.documentoFalhou', {
          nome: nomeDocumento,
          motivo: doc.mensagemValidacao ? ` ${doc.mensagemValidacao}` : ''
        });
      }
    });

    if (mensagemSucesso) {
      this.statusMensagem = mensagemSucesso;
      this.validacaoErroMensagem = null;
    }
    if (mensagemErro) {
      this.validacaoErroMensagem = mensagemErro;
      this.statusMensagem = null;
    }
  }

  private configurarMonitoramentoConteiner(codigoConteiner: string | null): void {
    const codigoNormalizado = (codigoConteiner ?? '').trim();
    if (this.codigoConteinerMonitorado === codigoNormalizado) {
      return;
    }
    this.limparMonitoramentoConteiner();
    if (!codigoNormalizado) {
      return;
    }
    this.codigoConteinerMonitorado = codigoNormalizado;
    this.carregarHistoricoConteiner(false);
    if (typeof window !== 'undefined') {
      this.historicoIntervalo = window.setInterval(() => this.carregarHistoricoConteiner(true), this.intervaloHistoricoMs);
    }
  }

  private limparMonitoramentoConteiner(): void {
    if (this.historicoIntervalo) {
      clearInterval(this.historicoIntervalo);
      this.historicoIntervalo = undefined;
    }
    this.codigoConteinerMonitorado = null;
    this.historicoConteiner = [];
    this.detalheConteiner = null;
    this.erroHistoricoConteiner = null;
    this.carregandoHistoricoConteiner = false;
  }

  private carregarHistoricoConteiner(silencioso: boolean): void {
    const codigo = this.codigoConteinerMonitorado;
    if (!codigo) {
      return;
    }
    if (!silencioso) {
      this.carregandoHistoricoConteiner = true;
      this.erroHistoricoConteiner = null;
    }
    forkJoin({
      detalhe: this.historicoConteinerService.obterDetalhePorCodigo(codigo),
      historico: this.historicoConteinerService.obterHistoricoPorCodigo(codigo)
    })
      .pipe(finalize(() => {
        if (!silencioso) {
          this.carregandoHistoricoConteiner = false;
        }
      }))
      .subscribe({
        next: ({ detalhe, historico }) => {
          this.detalheConteiner = detalhe;
          this.historicoConteiner = historico;
          this.erroHistoricoConteiner = null;
        },
        error: () => {
          this.erroHistoricoConteiner = this.translate.instant(
            'gate.agendamentoDetalhe.historicoConteiner.erroCarregamento'
          );
          if (!silencioso) {
            this.carregandoHistoricoConteiner = false;
          }
        }
      });
  }

  private recarregarHistoricoSeNecessario(): void {
    if (this.codigoConteinerMonitorado) {
      this.carregarHistoricoConteiner(true);
    }
  }

  get codigoConteinerSelecionado(): string | null {
    return this.codigoConteinerMonitorado;
  }

  trackPorHistorico(index: number, item: HistoricoConteiner): string {
    return `${item.dataRegistro}-${item.tipoOperacao}-${index}`;
  }

  descricaoTipoOperacao(tipoOperacao: string): string {
    const mapa: Record<string, string> = {
      DESCARGA_TREM: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.descargaTrem'),
      CARGA_TREM: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.cargaTrem'),
      ALOCACAO: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.alocacao'),
      TRANSFERENCIA: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.transferencia'),
      INSPECAO: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.inspecao'),
      LIBERACAO: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.liberacao'),
      ATUALIZACAO_CADASTRAL: this.translate.instant('gate.agendamentoDetalhe.historicoConteiner.atualizacaoCadastral')
    };
    return mapa[tipoOperacao] ?? tipoOperacao;
  }

  formatarStatusConteiner(): string {
    const status = this.detalheConteiner?.statusOperacional ?? '';
    if (!status) {
      return '';
    }
    const chave = status.toLowerCase().replace(/_/g, ' ');
    return chave.charAt(0).toUpperCase() + chave.slice(1);
  }

  sanitizarTexto(valor: string | null | undefined): string {
    return this.sanitizadorConteudo.sanitizar(valor ?? '');
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-form\agendamento-form.component.css ----- 
.agendamento-formulario {
  background: #ffffff;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 10px 30px rgba(15, 23, 42, 0.08);
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.agendamento-formulario__cabecalho h3 {
  margin: 0 0 4px;
  font-size: 1.5rem;
  color: #1f2937;
}

.agendamento-formulario__cabecalho p {
  margin: 0;
  color: #6b7280;
}

form {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 16px;
}

.campo {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.campo span {
  font-weight: 600;
  color: #1f2937;
}

.campo input,
.campo select,
.campo textarea {
  border: 1px solid #d1d5db;
  border-radius: 10px;
  padding: 10px 12px;
  font-size: 0.95rem;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.campo input:focus,
.campo select:focus,
.campo textarea:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
}

.campo small {
  color: #dc2626;
  font-size: 0.8rem;
}

.campo--full {
  grid-column: 1 / -1;
}

.alerta {
  background: #fef3c7;
  color: #92400e;
  border-radius: 12px;
  padding: 12px 16px;
  font-size: 0.9rem;
}

.documentos {
  background: #f9fafb;
  border-radius: 16px;
  padding: 20px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.documentos header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
}

.documentos h4 {
  margin: 0;
  font-size: 1.1rem;
  color: #1f2937;
}

.documentos p {
  margin: 4px 0 0;
  color: #6b7280;
  font-size: 0.9rem;
}

.documentos__contador {
  font-weight: 600;
  color: #4b5563;
}

.documentos__existentes {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 12px;
}

.documentos__item {
  background: #fff;
  border-radius: 12px;
  padding: 12px;
  box-shadow: inset 0 0 0 1px rgba(209, 213, 219, 0.7);
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.upload {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  background: #2563eb;
  color: #fff;
  font-weight: 600;
  border-radius: 10px;
  padding: 10px 16px;
  cursor: pointer;
  width: fit-content;
  box-shadow: 0 10px 20px rgba(37, 99, 235, 0.2);
}

.upload input {
  display: none;
}

.previews {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  gap: 16px;
}

.preview {
  background: #fff;
  border-radius: 14px;
  padding: 16px;
  box-shadow: inset 0 0 0 1px rgba(209, 213, 219, 0.6);
  display: flex;
  gap: 12px;
}

.preview__icone {
  width: 64px;
  height: 64px;
  border-radius: 12px;
  background: #e5e7eb;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  color: #1f2937;
  text-transform: uppercase;
}

.preview__icone--imagem img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 12px;
}

.preview__dados {
  display: flex;
  flex-direction: column;
  gap: 6px;
  flex: 1;
}

.preview__dados strong {
  color: #1f2937;
}

.preview__dados small {
  color: #6b7280;
}

.preview__progresso {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.barra {
  width: 100%;
  height: 6px;
  border-radius: 999px;
  background: #e5e7eb;
  overflow: hidden;
}

.preenchimento {
  display: block;
  height: 100%;
  background: linear-gradient(90deg, #2563eb, #60a5fa);
  transition: width 0.2s ease;
}

.preview__progresso small {
  font-size: 0.8rem;
  font-weight: 600;
  color: #2563eb;
}

.preview__progresso .status--erro {
  color: #dc2626;
}

.erro {
  color: #dc2626;
  font-size: 0.85rem;
}

.acoes {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.btn {
  border: none;
  border-radius: 10px;
  padding: 10px 18px;
  font-weight: 600;
  cursor: pointer;
  background: #e5e7eb;
  color: #1f2937;
}

.btn--primario {
  background: #2563eb;
  color: #fff;
}

.btn:hover:not(:disabled) {
  box-shadow: 0 8px 18px rgba(107, 114, 128, 0.2);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-form\agendamento-form.component.html ----- 
<section class="agendamento-formulario">
  <header class="agendamento-formulario__cabecalho">
    <div>
      <h3>{{ emEdicao ? 'Editar agendamento' : 'Novo agendamento' }}</h3>
      <p>Preencha os campos obrigatórios e valide os horários dentro da janela selecionada.</p>
    </div>
  </header>

  <form [formGroup]="formulario" (ngSubmit)="onSubmit()" novalidate>
    <div class="grid">
      <label class="campo">
        <span>Código *</span>
        <input type="text" formControlName="codigo" autocomplete="off" />
        <small *ngIf="formulario.get('codigo')?.touched && formulario.get('codigo')?.invalid">Informe o código.</small>
      </label>

      <label class="campo">
        <span>Tipo de operação *</span>
        <select formControlName="tipoOperacao">
          <option value="" disabled>Selecione</option>
          <option *ngFor="let opcao of (tiposOperacao$ | async)" [value]="opcao.codigo">
            {{ opcao.descricao }}
          </option>
        </select>
        <small *ngIf="formulario.get('tipoOperacao')?.touched && formulario.get('tipoOperacao')?.invalid">
          Selecione um tipo de operação.
        </small>
      </label>

      <label class="campo">
        <span>Status *</span>
        <select formControlName="status">
          <option value="" disabled>Selecione</option>
          <option *ngFor="let opcao of (status$ | async)" [value]="opcao.codigo">
            {{ opcao.descricao }}
          </option>
        </select>
        <small *ngIf="formulario.get('status')?.touched && formulario.get('status')?.invalid">
          Informe o status do agendamento.
        </small>
      </label>

      <label class="campo">
        <span>ID Transportadora *</span>
        <input type="number" formControlName="transportadoraId" />
        <small *ngIf="formulario.get('transportadoraId')?.touched && formulario.get('transportadoraId')?.invalid">
          Informe a transportadora.
        </small>
      </label>

      <label class="campo">
        <span>ID Motorista *</span>
        <input type="number" formControlName="motoristaId" />
        <small *ngIf="formulario.get('motoristaId')?.touched && formulario.get('motoristaId')?.invalid">
          Informe o motorista.
        </small>
      </label>

      <label class="campo">
        <span>CPF do motorista *</span>
        <input
          type="text"
          formControlName="motoristaCpf"
          maxlength="14"
          (input)="aplicarMascaraCpf($event)"
          autocomplete="off"
        />
        <small *ngIf="formulario.get('motoristaCpf')?.touched && formulario.get('motoristaCpf')?.hasError('cpfInvalido')">
          CPF inválido.
        </small>
      </label>

      <label class="campo">
        <span>ID Veículo *</span>
        <input type="number" formControlName="veiculoId" />
        <small *ngIf="formulario.get('veiculoId')?.touched && formulario.get('veiculoId')?.invalid">
          Informe o veículo.
        </small>
      </label>

      <label class="campo">
        <span>Placa *</span>
        <input type="text" formControlName="placaVeiculo" maxlength="8" (input)="aplicarMascaraPlaca($event)" />
        <small *ngIf="formulario.get('placaVeiculo')?.touched && formulario.get('placaVeiculo')?.hasError('placaInvalida')">
          Placa inválida.
        </small>
      </label>

      <label class="campo">
        <span>Janela de atendimento *</span>
        <select formControlName="janelaAtendimentoId">
          <option value="" disabled>Selecione</option>
          <option *ngFor="let janela of janelasDisponiveis" [value]="janela.id">
            {{ janela.data | date: 'dd/MM/yyyy' }} - {{ janela.horaInicio }} / {{ janela.horaFim }}
          </option>
        </select>
        <small *ngIf="formulario.get('janelaAtendimentoId')?.touched && formulario.get('janelaAtendimentoId')?.invalid">
          Escolha uma janela.
        </small>
      </label>

      <label class="campo">
        <span>Horário previsto de chegada *</span>
        <input type="time" formControlName="horarioPrevistoChegada" />
      </label>

      <label class="campo">
        <span>Horário previsto de saída *</span>
        <input type="time" formControlName="horarioPrevistoSaida" />
      </label>

      <label class="campo campo--full">
        <span>Observações</span>
        <textarea formControlName="observacoes" rows="3" placeholder="Informações relevantes para a operação"></textarea>
      </label>
    </div>

    <div class="alerta" *ngIf="formulario.errors?.horarioJanelaInvalido">
      Os horários previstos devem estar dentro da janela selecionada e a saída deve ser posterior à chegada.
    </div>

    <section class="documentos">
      <header>
        <div>
          <h4>Documentos obrigatórios</h4>
          <p>Envie todos os comprovantes necessários. Formatos suportados: PDF, imagens e planilhas.</p>
        </div>
        <span class="documentos__contador">
          {{ documentosExistentes?.length || 0 }} anexos existentes
        </span>
      </header>

      <div class="documentos__existentes" *ngIf="documentosExistentes?.length">
        <article class="documentos__item" *ngFor="let documento of documentosExistentes">
          <strong>{{ documento.nomeArquivo }}</strong>
          <small>{{ documento.tamanhoBytes / 1024 | number: '1.0-0' }} KB</small>
        </article>
      </div>

      <label class="upload">
        Selecionar arquivos
        <input type="file" multiple (change)="aoSelecionarArquivos($event)" />
      </label>

      <div class="previews" *ngIf="documentosSelecionados.length">
        <article class="preview" *ngFor="let preview of documentosSelecionados">
          <div class="preview__icone" [class.preview__icone--imagem]="preview.url">
            <img *ngIf="preview.url" [src]="preview.url" [alt]="preview.nome" />
            <span *ngIf="!preview.url">{{ preview.tipo.split('/')[1] || 'arquivo' }}</span>
          </div>
          <div class="preview__dados">
            <strong>{{ preview.nome }}</strong>
            <small>{{ preview.tamanho }}</small>
            <div class="preview__progresso" *ngIf="acompanharProgresso(preview.nome) as progresso">
              <div class="barra">
                <span class="preenchimento" [style.width.%]="progresso.progress"></span>
              </div>
              <small [class.status--erro]="progresso.status === 'erro'">
                {{ progresso.status === 'concluido' ? 'Concluído' : progresso.status === 'erro' ? 'Erro' : progresso.progress + '%' }}
              </small>
            </div>
          </div>
        </article>
      </div>

      <small class="erro" *ngIf="formulario.get('documentos')?.touched && formulario.get('documentos')?.hasError('documentosObrigatorios')">
        Anexe ao menos um documento.
      </small>
    </section>

    <footer class="acoes">
      <button type="submit" class="btn btn--primario">Salvar</button>
      <button type="button" class="btn" (click)="cancelarEdicao()">Cancelar</button>
    </footer>
  </form>
</section>

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamento-form\agendamento-form.component.ts ----- 
import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { Agendamento, AgendamentoFormPayload, AgendamentoRequest, DocumentoAgendamento, GateEnumOption, UploadDocumentoStatus } from '../../../model/gate/agendamento.model';
import { JanelaAtendimento } from '../../../model/gate/janela.model';

interface DocumentoPreview {
  nome: string;
  tamanho: string;
  tipo: string;
  url?: string;
  arquivo: File;
}

@Component({
  selector: 'app-agendamento-form',
  templateUrl: './agendamento-form.component.html',
  styleUrls: ['./agendamento-form.component.css']
})
export class AgendamentoFormComponent implements OnInit, OnChanges, OnDestroy {
  @Input() agendamento: Agendamento | null = null;
  @Input() tiposOperacao$: Observable<GateEnumOption[]> | null = null;
  @Input() status$: Observable<GateEnumOption[]> | null = null;
  @Input() janelas$: Observable<JanelaAtendimento[]> | null = null;
  @Input() documentosExistentes: DocumentoAgendamento[] | null = [];
  @Input() uploadStatus: UploadDocumentoStatus[] = [];

  @Output() salvar = new EventEmitter<AgendamentoFormPayload>();
  @Output() cancelar = new EventEmitter<void>();

  formulario!: FormGroup;
  documentosSelecionados: DocumentoPreview[] = [];
  janelasDisponiveis: JanelaAtendimento[] = [];

  private readonly destruir$ = new Subject<void>();

  constructor(private readonly formBuilder: FormBuilder) {}

  ngOnInit(): void {
    this.formulario = this.formBuilder.group({
      codigo: ['', Validators.required],
      tipoOperacao: [null, Validators.required],
      status: [null, Validators.required],
      transportadoraId: [null, Validators.required],
      motoristaId: [null, Validators.required],
      motoristaCpf: ['', [Validators.required, this.cpfValidator()]],
      veiculoId: [null, Validators.required],
      placaVeiculo: ['', [Validators.required, this.placaValidator()]],
      janelaAtendimentoId: [null, Validators.required],
      horarioPrevistoChegada: ['', Validators.required],
      horarioPrevistoSaida: ['', Validators.required],
      observacoes: [''],
      documentos: [[], this.documentosValidator()]
    }, { validators: [this.horarioDentroDaJanelaValidator()] });

    if (this.janelas$) {
      this.janelas$
        .pipe(takeUntil(this.destruir$))
        .subscribe((janelas) => {
          this.janelasDisponiveis = janelas;
          this.formulario.updateValueAndValidity({ emitEvent: false });
        });
    }

    this.preencherFormulario();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['agendamento'] && !changes['agendamento'].firstChange) {
      this.preencherFormulario();
    }
    if (changes['documentosExistentes'] && this.formulario) {
      this.formulario.get('documentos')?.updateValueAndValidity();
    }
  }

  ngOnDestroy(): void {
    this.destruir$.next();
    this.destruir$.complete();
    this.liberarPreviews();
  }

  get emEdicao(): boolean {
    return !!this.agendamento;
  }

  onSubmit(): void {
    if (this.formulario.invalid) {
      this.formulario.markAllAsTouched();
      return;
    }

    const valor = this.formulario.value;

    const request: AgendamentoRequest = {
      codigo: valor.codigo,
      tipoOperacao: valor.tipoOperacao,
      status: valor.status,
      transportadoraId: Number(valor.transportadoraId),
      motoristaId: Number(valor.motoristaId),
      veiculoId: Number(valor.veiculoId),
      janelaAtendimentoId: Number(valor.janelaAtendimentoId),
      horarioPrevistoChegada: valor.horarioPrevistoChegada,
      horarioPrevistoSaida: valor.horarioPrevistoSaida,
      observacoes: valor.observacoes,
      placaVeiculo: this.sanitizarPlaca(valor.placaVeiculo),
      motoristaCpf: this.sanitizarCpf(valor.motoristaCpf)
    };

    const arquivos = this.documentosSelecionados.map((preview) => preview.arquivo);

    this.salvar.emit({
      request,
      arquivos
    });
  }

  cancelarEdicao(): void {
    this.cancelar.emit();
    this.liberarPreviews();
    this.formulario.reset();
    this.documentosSelecionados = [];
    this.formulario.get('documentos')?.setValue([]);
  }

  aoSelecionarArquivos(evento: Event): void {
    const input = evento.target as HTMLInputElement | null;
    const arquivos = Array.from(input?.files ?? []);
    this.liberarPreviews();
    this.documentosSelecionados = arquivos.map((arquivo) => ({
      nome: arquivo.name,
      tamanho: this.formatarTamanho(arquivo.size),
      tipo: arquivo.type || 'application/octet-stream',
      url: arquivo.type.startsWith('image/') ? URL.createObjectURL(arquivo) : undefined,
      arquivo
    }));
    this.formulario.get('documentos')?.setValue(this.documentosSelecionados.map((item) => item.arquivo));
    this.formulario.get('documentos')?.markAsDirty();
    this.formulario.get('documentos')?.updateValueAndValidity();
  }

  acompanharProgresso(nomeArquivo: string): UploadDocumentoStatus | undefined {
    return this.uploadStatus.find((status) => status.fileName === nomeArquivo);
  }

  aplicarMascaraCpf(evento: Event): void {
    const input = evento.target as HTMLInputElement;
    const valorFormatado = this.formatarCpf(input.value);
    input.value = valorFormatado;
    this.formulario.get('motoristaCpf')?.setValue(valorFormatado, { emitEvent: false });
  }

  aplicarMascaraPlaca(evento: Event): void {
    const input = evento.target as HTMLInputElement;
    const valorFormatado = this.formatarPlaca(input.value);
    input.value = valorFormatado;
    this.formulario.get('placaVeiculo')?.setValue(valorFormatado, { emitEvent: false });
  }

  private preencherFormulario(): void {
    if (!this.formulario) {
      return;
    }

    this.liberarPreviews();
    this.documentosSelecionados = [];

    if (this.agendamento) {
      this.formulario.patchValue({
        codigo: this.agendamento.codigo,
        tipoOperacao: this.agendamento.tipoOperacao,
        status: this.agendamento.status,
        transportadoraId: this.agendamento.transportadoraId,
        motoristaId: this.agendamento.motoristaId,
        motoristaCpf: '',
        veiculoId: this.agendamento.veiculoId,
        placaVeiculo: this.formatarPlaca(this.agendamento.placaVeiculo ?? ''),
        janelaAtendimentoId: this.agendamento.janelaAtendimentoId,
        horarioPrevistoChegada: this.agendamento.horarioPrevistoChegada,
        horarioPrevistoSaida: this.agendamento.horarioPrevistoSaida,
        observacoes: this.agendamento.observacoes || ''
      });
    } else {
      this.formulario.reset();
      this.formulario.get('documentos')?.setValue([]);
    }

    this.formulario.get('documentos')?.updateValueAndValidity();
  }

  private horarioDentroDaJanelaValidator(): ValidatorFn {
    return (controle: AbstractControl): ValidationErrors | null => {
      const janelaId = controle.get('janelaAtendimentoId')?.value;
      const chegada = controle.get('horarioPrevistoChegada')?.value;
      const saida = controle.get('horarioPrevistoSaida')?.value;

      if (!janelaId || !chegada || !saida) {
        return null;
      }

      const janela = this.janelasDisponiveis.find((item) => item.id === Number(janelaId));
      if (!janela) {
        return null;
      }

      const inicio = this.converterHoraParaMinutos(janela.horaInicio);
      const fim = this.converterHoraParaMinutos(janela.horaFim);
      const chegadaMin = this.converterHoraParaMinutos(chegada);
      const saidaMin = this.converterHoraParaMinutos(saida);

      if (chegadaMin < inicio || saidaMin > fim || chegadaMin >= saidaMin) {
        return { horarioJanelaInvalido: true };
      }

      return null;
    };
  }

  private documentosValidator(): ValidatorFn {
    return (controle: AbstractControl): ValidationErrors | null => {
      const arquivosSelecionados = Array.isArray(controle.value) ? controle.value : [];
      const possuiExistentes = (this.documentosExistentes?.length ?? 0) > 0;
      if (!arquivosSelecionados.length && !possuiExistentes) {
        return { documentosObrigatorios: true };
      }
      return null;
    };
  }

  private cpfValidator(): ValidatorFn {
    return (controle: AbstractControl): ValidationErrors | null => {
      const valor = (controle.value ?? '') as string;
      const cpf = this.sanitizarCpf(valor);
      if (!cpf || cpf.length !== 11 || /^([0-9])\1+$/.test(cpf)) {
        return { cpfInvalido: true };
      }

      const digitoValido = (base: number): number => {
        let soma = 0;
        for (let i = 0; i < base; i++) {
          soma += parseInt(cpf.charAt(i), 10) * (base + 1 - i);
        }
        const resto = (soma * 10) % 11;
        return resto === 10 ? 0 : resto;
      };

      if (digitoValido(9) !== parseInt(cpf.charAt(9), 10) || digitoValido(10) !== parseInt(cpf.charAt(10), 10)) {
        return { cpfInvalido: true };
      }

      return null;
    };
  }

  private placaValidator(): ValidatorFn {
    const regex = /^[A-Z]{3}-?[0-9][A-Z0-9][0-9]{2}$/;
    return (controle: AbstractControl): ValidationErrors | null => {
      const valor = (controle.value ?? '') as string;
      if (!valor) {
        return { placaInvalida: true };
      }
      const placa = valor.toUpperCase();
      if (!regex.test(placa)) {
        return { placaInvalida: true };
      }
      return null;
    };
  }

  private converterHoraParaMinutos(valor: string): number {
    const [horas, minutos] = valor.split(':').map(Number);
    return horas * 60 + minutos;
  }

  private formatarTamanho(bytes: number): string {
    if (!bytes) {
      return '0 B';
    }
    const unidades = ['B', 'KB', 'MB', 'GB'];
    const indice = Math.floor(Math.log(bytes) / Math.log(1024));
    const tamanho = bytes / Math.pow(1024, indice);
    return `${tamanho.toFixed(1)} ${unidades[indice]}`;
  }

  private formatarCpf(valor: string): string {
    const numeros = valor.replace(/\D/g, '').slice(0, 11);
    const partes = [
      numeros.slice(0, 3),
      numeros.slice(3, 6),
      numeros.slice(6, 9),
      numeros.slice(9, 11)
    ].filter(Boolean);
    if (partes.length > 3) {
      return `${partes[0]}.${partes[1]}.${partes[2]}-${partes[3]}`;
    }
    if (partes.length > 2) {
      return `${partes[0]}.${partes[1]}.${partes[2]}`;
    }
    if (partes.length > 1) {
      return `${partes[0]}.${partes[1]}`;
    }
    return partes[0] ?? '';
  }

  private formatarPlaca(valor: string): string {
    const caracteres = valor.toUpperCase().replace(/[^A-Z0-9]/g, '').slice(0, 7);
    if (caracteres.length <= 3) {
      return caracteres;
    }
    return `${caracteres.slice(0, 3)}-${caracteres.slice(3)}`;
  }

  private sanitizarCpf(valor: string): string | null {
    const digits = valor.replace(/\D/g, '');
    return digits.length ? digits : null;
  }

  private sanitizarPlaca(valor: string): string | null {
    const sanitized = valor.toUpperCase().replace(/[^A-Z0-9]/g, '');
    return sanitized.length ? sanitized : null;
  }

  private liberarPreviews(): void {
    this.documentosSelecionados
      .filter((preview) => preview.url)
      .forEach((preview) => URL.revokeObjectURL(preview.url!));
  }
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamentos-list\agendamentos-list.component.css ----- 
.agendamentos-lista {
  display: flex;
  flex-direction: column;
  gap: 16px;
  background: #ffffff;
  border-radius: 16px;
  padding: 20px;
  box-shadow: 0 10px 30px rgba(15, 23, 42, 0.08);
  height: 100%;
}

.agendamentos-lista__cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 16px;
}

.agendamentos-lista__cabecalho h3 {
  margin: 0;
  font-size: 1.4rem;
  color: #1f2937;
}

.agendamentos-lista__subtitulo {
  margin: 4px 0 0;
  color: #6b7280;
  font-size: 0.9rem;
}

.agendamentos-lista__acoes {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.agendamentos-lista__tabela {
  flex: 1;
}

.agendamentos-lista__estado {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  padding: 32px;
  color: #6b7280;
  font-size: 0.95rem;
}

.btn {
  border: none;
  border-radius: 10px;
  padding: 10px 16px;
  cursor: pointer;
  font-weight: 600;
  background: #e5e7eb;
  color: #1f2937;
  transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
}

.btn:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 8px 18px rgba(107, 114, 128, 0.2);
}

.btn:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

.btn--primario {
  background: #2563eb;
  color: #ffffff;
}

.btn--perigo {
  background: #dc2626;
  color: #ffffff;
}

.spinner {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  border: 3px solid rgba(37, 99, 235, 0.25);
  border-top-color: #2563eb;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamentos-list\agendamentos-list.component.html ----- 
<section class="agendamentos-lista">
  <header class="agendamentos-lista__cabecalho">
    <div>
      <h3>Agendamentos</h3>
      <p class="agendamentos-lista__subtitulo">
        {{ loading ? 'Atualizando agendamentos...' : 'Selecione uma linha para visualizar os detalhes.' }}
      </p>
    </div>
    <div class="agendamentos-lista__acoes">
      <button type="button" class="btn btn--primario" (click)="novoAgendamento()">
        Novo
      </button>
      <button
        type="button"
        class="btn"
        [disabled]="selectedId === null"
        (click)="editarAgendamento()"
      >
        Editar
      </button>
      <button
        type="button"
        class="btn btn--perigo"
        [disabled]="selectedId === null"
        (click)="cancelarAgendamento()"
      >
        Cancelar
      </button>
      <button type="button" class="btn" (click)="atualizarLista()">
        Atualizar
      </button>
    </div>
  </header>

  <ng-container *ngIf="!loading; else carregando">
    <div class="agendamentos-lista__tabela" *ngIf="dadosTabela.length; else vazio">
      <app-dynamic-table
        [columns]="colunas"
        [data]="dadosTabela"
        (rowClicked)="onRowClicked($event)"
        (rowDoubleClicked)="onRowDoubleClicked($event)"
      ></app-dynamic-table>
    </div>
  </ng-container>

  <ng-template #carregando>
    <div class="agendamentos-lista__estado">
      <span class="spinner"></span>
      <span>Carregando agendamentos...</span>
    </div>
  </ng-template>

  <ng-template #vazio>
    <div class="agendamentos-lista__estado">
      Nenhum agendamento encontrado para o filtro atual.
    </div>
  </ng-template>
</section>

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\agendamentos-list\agendamentos-list.component.ts ----- 
import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';
import { Agendamento } from '../../../model/gate/agendamento.model';

interface AgendamentoRow {
  __id: number;
  Código: string;
  Operação: string;
  Status: string;
  Transportadora: string;
  Janela: string;
  'Chegada Prevista': string;
  'Saída Prevista': string;
}

@Component({
  selector: 'app-agendamentos-list',
  templateUrl: './agendamentos-list.component.html',
  styleUrls: ['./agendamentos-list.component.css']
})
export class AgendamentosListComponent implements OnChanges {
  @Input() agendamentos: Agendamento[] | null = [];
  @Input() loading = false;
  @Input() selectedId: number | null = null;

  @Output() selecionar = new EventEmitter<number>();
  @Output() editar = new EventEmitter<number>();
  @Output() cancelar = new EventEmitter<number>();
  @Output() criar = new EventEmitter<void>();
  @Output() atualizar = new EventEmitter<void>();

  readonly colunas = ['Código', 'Operação', 'Status', 'Transportadora', 'Janela', 'Chegada Prevista', 'Saída Prevista'];

  dadosTabela: AgendamentoRow[] = [];

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['agendamentos']) {
      this.dadosTabela = (this.agendamentos ?? []).map((item) => this.mapearParaLinha(item));
    }
  }

  onRowClicked(evento: any): void {
    const idSelecionado = evento?.data?.__id as number | undefined;
    if (typeof idSelecionado !== 'number') {
      return;
    }
    this.selectedId = idSelecionado;
    this.selecionar.emit(idSelecionado);
  }

  onRowDoubleClicked(evento: any): void {
    const idSelecionado = evento?.data?.__id as number | undefined;
    if (typeof idSelecionado !== 'number') {
      return;
    }
    this.editar.emit(idSelecionado);
  }

  novoAgendamento(): void {
    this.criar.emit();
  }

  editarAgendamento(): void {
    if (this.selectedId === null) {
      return;
    }
    this.editar.emit(this.selectedId);
  }

  cancelarAgendamento(): void {
    if (this.selectedId === null) {
      return;
    }
    this.cancelar.emit(this.selectedId);
  }

  atualizarLista(): void {
    this.atualizar.emit();
  }

  private mapearParaLinha(agendamento: Agendamento): AgendamentoRow {
    return {
      __id: agendamento.id,
      Código: agendamento.codigo,
      Operação: agendamento.tipoOperacaoDescricao || agendamento.tipoOperacao,
      Status: agendamento.statusDescricao || agendamento.status,
      Transportadora: agendamento.transportadoraNome || '—',
      Janela: this.formatarJanela(agendamento),
      'Chegada Prevista': this.formatarHora(agendamento.horarioPrevistoChegada),
      'Saída Prevista': this.formatarHora(agendamento.horarioPrevistoSaida)
    };
  }

  private formatarJanela(agendamento: Agendamento): string {
    if (!agendamento.dataJanela) {
      return '—';
    }
    const inicio = this.formatarHora(agendamento.horaInicioJanela);
    const fim = this.formatarHora(agendamento.horaFimJanela);
    const data = new Date(agendamento.dataJanela);
    const dataFormatada = data.toLocaleDateString('pt-BR');
    return `${dataFormatada} ${inicio} - ${fim}`.trim();
  }

  private formatarHora(valor: string | null): string {
    return valor ? valor.substring(0, 5) : '—';
  }
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\motorista-pass\motorista-pass.component.css ----- 
.motorista-pass {
  background: var(--card-background, #fff);
  border-radius: 12px;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  box-shadow: 0 12px 32px rgba(15, 23, 42, 0.12);
  min-width: 0;
}

.motorista-pass--vazio {
  text-align: center;
  color: #64748b;
  border: 1px dashed #cbd5f5;
}

.motorista-pass__cabecalho {
  text-align: center;
}

.motorista-pass__cabecalho h4 {
  font-size: 1.2rem;
  margin: 0;
}

.motorista-pass__cabecalho p {
  margin: 0.25rem 0 0;
  color: #475569;
  font-size: 0.95rem;
}

.motorista-pass__codigo {
  background: #f8fafc;
  padding: 0.75rem;
  border-radius: 16px;
  display: grid;
  place-items: center;
}

.motorista-pass__dados {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 0.75rem 1.5rem;
  width: 100%;
  margin: 0;
}

.motorista-pass__dados div {
  background: rgba(15, 23, 42, 0.03);
  padding: 0.75rem;
  border-radius: 10px;
}

.motorista-pass__dados dt {
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: #94a3b8;
  margin-bottom: 0.25rem;
}

.motorista-pass__dados dd {
  margin: 0;
  font-weight: 600;
  color: #0f172a;
  word-break: break-word;
}

@media (max-width: 768px) {
  .motorista-pass {
    padding: 1rem;
  }

  .motorista-pass__codigo {
    width: 100%;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\motorista-pass\motorista-pass.component.html ----- 
<section class="motorista-pass" *ngIf="gatePass && qrData; else vazio">
  <header class="motorista-pass__cabecalho">
    <h4>{{ 'gate.agendamentoDetalhe.motoristaPass.titulo' | translate }}</h4>
    <p>{{ 'gate.agendamentoDetalhe.motoristaPass.subtitulo' | translate }}</p>
  </header>

  <div class="motorista-pass__codigo">
    <qrcode [qrdata]="qrData" [width]="200" [margin]="1"></qrcode>
  </div>

  <dl class="motorista-pass__dados">
    <div>
      <dt>{{ 'gate.agendamentoDetalhe.motoristaPass.codigo' | translate }}</dt>
      <dd>{{ gatePass?.codigo || agendamentoCodigo }}</dd>
    </div>
    <div>
      <dt>{{ 'gate.agendamentoDetalhe.motoristaPass.status' | translate }}</dt>
      <dd>{{ statusDescricao }}</dd>
    </div>
    <div *ngIf="atualizadoEm">
      <dt>{{ 'gate.agendamentoDetalhe.motoristaPass.atualizadoEm' | translate: { data: (atualizadoEm | date:'short') } }}</dt>
      <dd>{{ atualizadoEm | date: 'short' }}</dd>
    </div>
  </dl>
</section>

<ng-template #vazio>
  <section class="motorista-pass motorista-pass--vazio">
    <p>{{ 'gate.agendamentoDetalhe.selecione' | translate }}</p>
  </section>
</ng-template>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\gate\portal\motorista-pass\motorista-pass.component.ts ----- 
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { GatePass } from '../../../model/gate/agendamento.model';

@Component({
  selector: 'app-motorista-pass',
  templateUrl: './motorista-pass.component.html',
  styleUrls: ['./motorista-pass.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MotoristaPassComponent {
  @Input() gatePass: GatePass | null = null;
  @Input() agendamentoCodigo: string | null = null;

  get qrData(): string | null {
    if (!this.gatePass) {
      return null;
    }
    return this.gatePass.token || this.gatePass.codigo;
  }

  get statusDescricao(): string | null {
    if (!this.gatePass) {
      return null;
    }
    return this.gatePass.statusDescricao || this.gatePass.status;
  }

  get atualizadoEm(): string | null {
    if (!this.gatePass) {
      return null;
    }
    const eventos = this.gatePass.eventos ?? [];
    if (eventos.length > 0) {
      return eventos[eventos.length - 1].registradoEm;
    }
    return this.gatePass.dataEntrada || this.gatePass.dataSaida;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\header\header.component.css ----- 
.header {
    background-color: #234986;
    border-radius: 0px;
    padding: 0.0em 0.5em; /* Reduzir o padding à esquerda e à direita */ 
    color: #fff;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
   /* margin-bottom: 1em; */
    align-self: center;
    margin-bottom: 0; 
}

.header .row {
    margin: 0;
}


.logo {
    border-radius: 50%;  
    width: 40px;
    height: 40px;
    margin-bottom: 5px;  
    margin-right: 15px;
}

.title-banner h1 {
    color: #ffffff;  
    font-size: 1.5em;
    font-weight: bold;
    letter-spacing: 2px;  
    text-shadow: 3px 3px 6px rgba(0, 0, 0, 2);  
    /* margin-bottom: 0.3em; */
    line-height: 1.2;
    
}
.title-banner {
    display: flex;
    align-items: center;
}
.d-flex {
    width: 100%;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\header\header.component.html ----- 
<div class="header">
  <div class="row title-banner">
      <div class="d-flex align-items-center justify-content-between">
          <div class="d-flex align-items-center">
              <img src="../../../assets/images/shipping.png" alt="Logo" class="logo">
              <h1 class="display-4 mt-3">CloudPort</h1>
              <app-navbar></app-navbar>
          </div>
          <button *ngIf="mostrarMenu" class="btn btn-outline-danger btn-sm" (click)="logout()">Sair</button>
      </div>
  </div>
</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\header\header.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [HeaderComponent]
    });
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\header\header.component.ts ----- 
import { Component, OnDestroy, OnInit } from '@angular/core';
import { ServicoAutenticacao } from '../service/servico-autenticacao/servico-autenticacao.service';
import { Router, ActivatedRoute, RouteReuseStrategy } from '@angular/router';
import { CustomReuseStrategy } from '../tab-content/customreusestrategy';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit, OnDestroy {

  userToken: string = '';
  mostrarMenu: boolean = false;
  private menuStatusSubscription?: Subscription;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private servicoAutenticacao: ServicoAutenticacao,
    private reuseStrategy: RouteReuseStrategy 
  ) {
    let usuarioAtual: any = this.servicoAutenticacao.obterUsuarioAtual();
    if (usuarioAtual && usuarioAtual.token) {
      this.userToken = usuarioAtual.token;
    }
  }


  ngOnInit(): void {
    this.mostrarMenu = this.servicoAutenticacao.obterStatusMenuAtual();
    this.menuStatusSubscription = this.servicoAutenticacao.statusMenuObservavel.subscribe(status => {
      this.mostrarMenu = status;
    });
  }

  ngOnDestroy(): void {
    this.menuStatusSubscription?.unsubscribe();
  }


  logout() {
    this.servicoAutenticacao.encerrarSessao();
    (this.reuseStrategy as CustomReuseStrategy).markForDestruction('login'.toLowerCase());
    this.router.navigate(['login']);
  }


}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\home\home.component.css ----- 
.container {
    display: flex;
    flex-direction: column;
    max-width: 100%;
    margin: 0;
    padding: 0;
    height: 100vh;
    width: 100%;
}

.row {
    flex-grow: 1;
    max-width: 100%;
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
}

.col-lg-8.mx-auto {
    max-width: 100%;
    padding: 0;
    height: 100%;
    width: 100%;
}

.bg-white {
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    margin: 0; /* Remove qualquer margem */
    padding: 0; /* Remove qualquer preenchimento */
    
    height: 100%;
    width: 100%;

}

.tab-content {
    height: 100%;
    width: 100%;
}

.btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.nav-tabs {
    margin: 0; /* Remove qualquer margem */
    padding: 0; /* Remove qualquer preenchimento */
}


.nav-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 10px;
}

.nav-item a {
    display: flex;
    align-items: center;
    justify-content: space-between; /* Adicionado para alinhar o botão à direita */
    gap: 20px;
    width: 100%; /* Adicionado para permitir que o botão se mova para a direita */

}

.nav-item button {
    margin-right: 0px;
    text-align: center;
    padding: 0.15rem 0.25rem; /* Adicionado para diminuir o tamanho do botão */
    font-size: 0.7rem; /* Adicionado para diminuir o tamanho do texto do botão */
}

.nav-item span {

    font-weight: bold; /* Adicionado para deixar o texto em negrito */
    margin-bottom: 0em;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\home\home.component.html ----- 
<section class="container">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <div class="bg-white rounded-lg shadow-sm p-0">
                <ul class="nav nav-tabs">
                    <li class="nav-item" *ngFor="let tab of tabs">
                      <a class="nav-link" [class.active]="selectedTabId === tab.id" (click)="navigateTo(tab.id)">
                        <span>{{tab.label}}</span>
                        <button
                          type="button"
                          class="btn btn-outline-danger btn-sm"
                          (click)="$event.stopPropagation(); closeTab(tab.id)"
                        >x</button>
                      </a>
                    </li>
                </ul>
                <div class="tab-content">
                  <router-outlet #outlet></router-outlet>
                </div>
            </div>
        </div>
    </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\home\home.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [HomeComponent]
    });
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\home\home.component.ts ----- 
import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { Router, RouteReuseStrategy, RouterOutlet } from '@angular/router';
import { ServicoAutenticacao } from '../service/servico-autenticacao/servico-autenticacao.service';
import { TabItem, TabService, TAB_REGISTRY, DEFAULT_TAB_ID, normalizeTabId, resolveRouteSegments } from '../navbar/TabService';
import { CustomReuseStrategy } from '../tab-content/customreusestrategy';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit, OnDestroy {

  @ViewChild('outlet', { read: RouterOutlet }) outlet!: RouterOutlet;
  userToken: string = '';
  tabs: TabItem[] = [];
  selectedTabId = '';
  filteredData: any[] = [];
  data: { [key: string]: any } = {};
  tabContent: { [key: string]: any } = {};
  private tabSubscription?: Subscription;
  private readonly defaultChildRoute = DEFAULT_TAB_ID;
  private readonly defaultTab = TAB_REGISTRY[this.defaultChildRoute];
  private defaultTabOpened = false;

  constructor(
    private router: Router,
    private servicoAutenticacao: ServicoAutenticacao,
    private tabService: TabService,
    private reuseStrategy: RouteReuseStrategy
  ) {
    console.log('Classe HomeComponent: Método construtor chamado.');
    const usuarioAtual: any = this.servicoAutenticacao.obterUsuarioAtual();
    if (usuarioAtual && usuarioAtual.token) {
      this.userToken = usuarioAtual.token;
    }
  }

  ngOnInit() {
    console.log('Classe HomeComponent: Método ngOnInit iniciado.');
    this.tabSubscription = this.tabService.tabs$.subscribe(tabs => {
      this.tabs = tabs;
      if (tabs.length === 0) {
        this.selectedTabId = this.defaultChildRoute;
        if (!this.defaultTabOpened) {
          this.defaultTabOpened = true;
          this.openDefaultTab();
        }
        return;
      }
      const lastTab = tabs[tabs.length - 1];
      const route = this.resolveChildRoute(lastTab.id);
      this.selectedTabId = route;
      this.tabContent[route] = this.tabService.getTabContent(route);
      this.navigateToChild(route);
    });
    (this.reuseStrategy as CustomReuseStrategy).markForDestruction('login'.toLowerCase());
  }

  ngOnDestroy(): void {
    this.tabSubscription?.unsubscribe();
  }

  navigateTo(tabId: string) {
    const route = this.resolveChildRoute(tabId);
    this.selectedTabId = route;
    this.tabContent[route] = this.tabService.getTabContent(route);
    this.navigateToChild(route);
  }

  logout() {
    console.log('Classe HomeComponent: Método logout chamado.');
    this.servicoAutenticacao.encerrarSessao();
    (this.reuseStrategy as CustomReuseStrategy).markForDestruction('login'.toLowerCase());
    this.router.navigate(['login']);
  }

  Alert() {
    console.log('Classe HomeComponent: Método Alert chamado.');
    alert(this.servicoAutenticacao.obterUsuarioAtual()?.token);
  }

  closeTab(tabId: string) {
    console.log(`Classe HomeComponent: Método closeTab chamado com o parâmetro clearHandlers=${tabId}.`);
    const route = this.resolveChildRoute(tabId);
    (this.reuseStrategy as CustomReuseStrategy).markForDestruction(route);
    console.log(`Classe HomeComponent: Método closeTab chamado com o parâmetro tab=${tabId}.`);
    this.tabService.closeTab(route);
    delete this.tabContent[route];
  }

  objectKeys(obj: any): string[] {
    return Object.keys(obj);
  }

  private resolveChildRoute(tabId: string): string {
    return normalizeTabId(tabId);
  }

  private openDefaultTab(): void {
    const defaultLabel = this.defaultTab?.label ?? 'Role';
    this.tabService.openTab(defaultLabel);
    const initialContent = this.tabService.getTabContent(this.defaultChildRoute) ?? {
      message: `Conteúdo padrão para a aba ${defaultLabel}`
    };
    this.tabService.setTabContent(this.defaultChildRoute, initialContent);
    this.tabContent[this.defaultChildRoute] = initialContent;
    this.navigateToChild(this.defaultChildRoute);
  }

  private navigateToChild(route: string): void {
    const commands = ['/home', ...resolveRouteSegments(route)];
    this.router.navigate(commands);
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\login\login.component.css ----- 

.container {
  max-width: 960px;
  margin-top: 3em;
}

.bg-white {
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  padding: 2em;
}

.btn-primary {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

.invalid-feedback {
  color: red;
}

.alert {
  margin-top: 15px;
}

.title-banner p {
  color: #303030;
  font-size: 1.4em;
  text-shadow: 1px 1px 2px rgba(0,0,0,2);
}

.title-banner h1 {
  color: #ffffff;
  font-size: 3em;
  font-weight: bold;
  letter-spacing: 2px;
  text-shadow: 3px 3px 6px rgba(0, 0, 0, 2);
  margin-bottom: 0.3em;
  line-height: 1.2;
}

.logo {
  border-radius: 50%;
  width: 100px;
  height: 100px;
  margin-bottom: 20px;
}



.box 
{
	position: relative;
	width: 380px;
	height: 420px;
	background: #1c1c1c;
	border-radius: 8px;
	overflow: hidden;
}
.box::before 
{
	content: '';
	z-index: 1;
	position: absolute;
	top: -50%;
	left: -50%;
	width: 380px;
	height: 420px;
	transform-origin: bottom right;
	background: linear-gradient(0deg,transparent,#2b5aa7,#2b5aa7);
	animation: animate 6s linear infinite;
}
.box::after 
{
	content: '';
	z-index: 1;
	position: absolute;
	top: -50%;
	left: -50%;
	width: 380px;
	height: 420px;
	transform-origin: bottom right;
	background: linear-gradient(0deg,transparent,#1a95d9,#1a95d9);
  /* 	background: linear-gradient(0deg,transparent,#45f3ff,#45f3ff); */
	animation: animate 6s linear infinite;
	animation-delay: -3s;
}
@keyframes animate 
{
	0%
	{
		transform: rotate(0deg);
	}
	100%
	{
		transform: rotate(360deg);
	}
}
form
{
	position: absolute;
	inset: 2px;
	background: #ffffff;
	padding: 50px 40px;
	border-radius: 8px;
	z-index: 2;
	display: flex;
	flex-direction: column;
} 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\login\login.component.html ----- 
<section class="container py-5">
  <div class="row">
    <div class="col-lg-8 mx-auto">
      <div class="bg-white rounded-lg shadow-sm p-5 box">
        <form [formGroup]="formularioLogin" (ngSubmit)="aoEnviar()">
          <div class="form-group">
            <label class="form-label" for="loginFormUser1">Login</label>
            <input
              type="text"
              id="loginFormUser1"
              formControlName="login"
              class="form-control"
              [ngClass]="{ 'is-invalid': enviado && f['login'].errors }"
              placeholder="Digite seu login"
              autocomplete="username"
            />
            <div *ngIf="enviado && f['login'].errors" class="invalid-feedback">
              <div *ngIf="f['login'].errors['required']">Login é obrigatório.</div>
              <div *ngIf="f['login'].errors['pattern']">Utilize apenas letras, números e os caracteres @ . _ -</div>
            </div>
          </div>

          <div class="form-group mt-3">
            <label class="form-label" for="loginFormPassword1">Senha</label>
            <input
              type="password"
              id="loginFormPassword1"
              formControlName="senha"
              class="form-control"
              [ngClass]="{ 'is-invalid': enviado && f['senha'].errors }"
              placeholder="Digite sua senha"
              autocomplete="current-password"
            />
            <div *ngIf="enviado && f['senha'].errors" class="invalid-feedback">
              <div *ngIf="f['senha'].errors['required']">Senha é obrigatória.</div>
              <div *ngIf="f['senha'].errors['minlength']">A senha deve ter ao menos 6 caracteres.</div>
            </div>
          </div>

          <div class="text-center mt-4">
            <button [disabled]="carregando" class="btn btn-primary w-100">
              <span *ngIf="carregando" class="spinner-border spinner-border-sm mr-1" aria-hidden="true"></span>
              <span *ngIf="!carregando">Entrar</span>
              <span class="sr-only" *ngIf="carregando">Entrando...</span>
            </button>
            <div *ngIf="mensagemErro" class="alert alert-danger mt-3 mb-0" role="alert">{{ mensagemErro }}</div>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\login\login.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute, RouteReuseStrategy, Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';

import { LoginComponent } from './login.component';
import { ServicoAutenticacao } from '../service/servico-autenticacao/servico-autenticacao.service';
import { CustomReuseStrategy } from '../tab-content/customreusestrategy';

class MockServicoAutenticacao {
  obterUsuarioAtual() {
    return null;
  }

  autenticar() {
    return of({ token: 'fake-token', login: 'usuario', roles: [] });
  }

  atualizarStatusMenu(_status: boolean) {}

  definirNomeUsuario(_nome: string) {}
}

const activatedRouteStub = {
  snapshot: {
    queryParams: {}
  }
};

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [LoginComponent],
      imports: [RouterTestingModule],
      providers: [
        FormBuilder,
        { provide: ServicoAutenticacao, useClass: MockServicoAutenticacao },
        { provide: ActivatedRoute, useValue: activatedRouteStub },
        { provide: RouteReuseStrategy, useClass: CustomReuseStrategy }
      ]
    });
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should default returnUrl to /home/role when query param is missing', () => {
    expect(component.rotaRetorno).toBe('/home/role');
  });

  it('should redirect to /home/role when login succeeds without returnUrl', () => {
    const router = TestBed.inject(Router);
    const navigateSpy = spyOn(router, 'navigateByUrl');

    component.formularioLogin.setValue({ login: 'joao', senha: 'segredo' });
    component.aoEnviar();

    expect(navigateSpy).toHaveBeenCalledWith('/home/role');
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\login\login.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute, RouteReuseStrategy } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';
import { ServicoAutenticacao } from '../service/servico-autenticacao/servico-autenticacao.service';
import { CustomReuseStrategy } from '../tab-content/customreusestrategy';

// Importações para animações
import { trigger, state, style, animate, transition } from '@angular/animations';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.css'],
    animations: [
        trigger('routerTransition', [
            // Defina os estados e transições aqui
            state('void', style({ opacity: 0 })),
            state('*', style({ opacity: 1 })),
            transition('void => *', animate('0.5s ease-in')),
            transition('* => void', animate('0.5s ease-out'))
        ])
    ]
})
const ROTA_PROTEGIDA_PADRAO = '/home/role';

export class LoginComponent implements OnInit {
    formularioLogin: FormGroup = this.formBuilder.group({});
    carregando = false;
    enviado = false;
    rotaRetorno: string = ROTA_PROTEGIDA_PADRAO;
    mensagemErro = '';

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private servicoAutenticacao: ServicoAutenticacao,
        private reuseStrategy: RouteReuseStrategy // Injete a estratégia de reutilização de rota aqui

    ) {
        // redirect to home if already logged in
        if (this.servicoAutenticacao.obterUsuarioAtual()) {
            this.router.navigateByUrl(this.rotaRetorno);
        }
    }

    ngOnInit() {
        this.servicoAutenticacao.atualizarStatusMenu(false);
        this.formularioLogin = this.formBuilder.group({
            login: ['', [Validators.required, Validators.pattern(/^[\p{L}\p{N}@._-]+$/u)]],
            senha: ['', [Validators.required, Validators.minLength(6)]]
        });

        // get return url from route parameters or default to '/'
        const requestedReturnUrl = this.route.snapshot.queryParams['returnUrl'];
        const hasCustomReturnUrl = typeof requestedReturnUrl === 'string' && requestedReturnUrl.trim().length > 0;
        this.rotaRetorno = hasCustomReturnUrl ? requestedReturnUrl : ROTA_PROTEGIDA_PADRAO;
        (this.reuseStrategy as CustomReuseStrategy).markForDestruction('login'.toLowerCase());
    }

    // convenience getter for easy access to form fields
    get f() {
        return this.formularioLogin.controls;
    }

    aoEnviar() {
        this.enviado = true;

        // stop here if form is invalid
        if (this.formularioLogin.invalid) {
            return;
        }

        const loginSanitizado = this.sanitizarCampo(this.f['login'].value);
        const senhaSanitizada = this.sanitizarCampo(this.f['senha'].value);
        this.formularioLogin.patchValue({ login: loginSanitizado, senha: senhaSanitizada }, { emitEvent: false, onlySelf: true });

        this.mensagemErro = '';
        this.carregando = true;
        this.servicoAutenticacao.autenticar(loginSanitizado, senhaSanitizada)
            .pipe(first())
            .subscribe(
                data => {

                    this.router.navigateByUrl(this.rotaRetorno);
                    this.servicoAutenticacao.definirNomeUsuario(loginSanitizado);
                    this.servicoAutenticacao.atualizarStatusMenu(true); // set mostrarMenu to true after successful login
                    (this.reuseStrategy as CustomReuseStrategy).markForDestruction('login'.toLowerCase());
                    this.carregando = false;
                },
                error => {
                    this.mensagemErro = error;
                    this.carregando = false;
                });
    }

    private sanitizarCampo(valor: string): string {
        if (!valor) {
            return '';
        }
        return valor
            .normalize('NFKC')
            .replace(/[<>"'`\\]/g, '')
            .trim();
    }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\modal.component.css ----- 
/* modal.component.css */
.modal {
    position: fixed; /* Posiciona o modal em relação à janela */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Fundo semi-transparente */
    z-index: 1000; /* Índice de empilhamento alto para sobrepor outros elementos */
    display: flex;
    justify-content: center;
    align-items: center;
  
  }


  .close {
    position: absolute; /* Posiciona o botão em relação ao seu contêiner pai */
    top: 10px; /* Posiciona o botão 10px a partir do topo do contêiner */
    right: 10px; /* Posiciona o botão 10px a partir da direita do contêiner */
    font-size: 24px; /* Define o tamanho da fonte para 24px */
    cursor: pointer; /* Muda o cursor para um ponteiro quando o mouse estiver sobre o botão */
    color: #333; /* Cor do texto */
  }

  .save-button-container {
    text-align: right; /* Alinha o conteúdo à direita */
  }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\modal.component.html ----- 
<!--modal.component.html-->
<div *ngIf="showPopup" class="modal">

    <div #dynamicComponentContainer></div>


</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\modal.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ModalComponent } from './modal.component';

describe('ModalComponent', () => {
  let component: ModalComponent;
  let fixture: ComponentFixture<ModalComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ModalComponent]
    });
    fixture = TestBed.createComponent(ModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\modal.component.ts ----- 
import { Component, Input, ViewChild, ViewContainerRef, ComponentRef, AfterViewInit, Type, Injector, ChangeDetectorRef } from '@angular/core';
import { PopupService, PopupState } from '../service/popupService';
import { RoleCadastroComponent } from '../role/role-cadastro/role-cadastro.component'; // Importe todos os componentes que você pode querer carregar dinamicamente
import { ConfirmacaoModalComponent } from './confirmacao-modal/confirmacao-modal.component';


function logMethod(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Classe ${target.constructor.name}: Método ${key} chamado.`);
    return originalMethod.apply(this, args);
  };
  return descriptor;
}


const componentMapping: Record<string, Type<any>> = {
  'role': RoleCadastroComponent,
  'confirmacao': ConfirmacaoModalComponent,
  // Adicione outros mapeamentos aqui
};
@Component({
  selector: 'app-modal',
  templateUrl: './modal.component.html',
  styleUrls: ['./modal.component.css']
})
export class ModalComponent implements AfterViewInit {

  @ViewChild('dynamicComponentContainer', { read: ViewContainerRef }) container!: ViewContainerRef;
  private componentRef: ComponentRef<any> | null = null;

  @Input() arg:any;  //<--you pass as arg any object


  showPopup = false;
  entityType = '';
  @Input() show: boolean = false; // Certifique-se de que 'show' é uma entrada



  constructor(private viewContainerRef: ViewContainerRef, private popupService: PopupService, private cdRef: ChangeDetectorRef) {
    // Removido a subscrição aqui
  }

  @logMethod
  ngAfterViewInit() {
    this.popupService.showPopup$.subscribe((popup) => {
      console.log('Recebido:', popup);
      this.entityType = popup.type;
      this.showPopup = popup.show;
      if (popup.show) {
        this.loadComponent(popup);
      } else if (this.componentRef) {
        this.componentRef.destroy();
        this.componentRef = null;
      }
    });
  }

  @logMethod
  loadComponent(popup: PopupState) {
    if (this.componentRef) {
      this.componentRef.destroy();
      this.componentRef = null;
    }

    const componentType = componentMapping[popup.type as keyof typeof componentMapping];

    if (!componentType) {
      console.error(`Componente não encontrado para o tipo: ${popup.type}`);
      return;
    }


    console.log('componentTypeString: ' + popup.type);

    const injector = Injector.create({ providers: [], parent: this.viewContainerRef.injector });

    this.componentRef = this.viewContainerRef.createComponent(componentType, {
      injector: injector
    });

    if (this.componentRef && popup.data !== undefined) {
      Object.assign(this.componentRef.instance, { data: popup.data });
    }

    this.cdRef.detectChanges();
  }




  @logMethod
  closePopup() {
    this.popupService.closePopup();
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\confirmacao-modal\confirmacao-modal.component.css ----- 
.confirmacao-modal {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.45);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1050;
}

.confirmacao-modal__content {
  background: #fff;
  border-radius: 12px;
  padding: 24px;
  width: min(420px, 90vw);
  box-shadow: 0 10px 40px rgba(15, 23, 42, 0.2);
}

.confirmacao-modal__titulo {
  margin: 0 0 8px;
  font-size: 1.25rem;
  font-weight: 600;
  color: #1f2937;
}

.confirmacao-modal__mensagem {
  margin: 0 0 20px;
  color: #4b5563;
  line-height: 1.4;
}

.confirmacao-modal__acoes {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.btn {
  border: none;
  border-radius: 8px;
  padding: 10px 18px;
  cursor: pointer;
  font-weight: 600;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.btn:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
}

.btn--primario {
  background: #2563eb;
  color: #fff;
}

.btn--primario:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 20px rgba(37, 99, 235, 0.2);
}

.btn--secundario {
  background: #e5e7eb;
  color: #1f2937;
}

.btn--secundario:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 20px rgba(156, 163, 175, 0.2);
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\confirmacao-modal\confirmacao-modal.component.html ----- 
<div class="confirmacao-modal">
  <div class="confirmacao-modal__content">
    <h3 class="confirmacao-modal__titulo">{{ data?.titulo || 'Confirmação' }}</h3>
    <p class="confirmacao-modal__mensagem">{{ data?.mensagem }}</p>
    <div class="confirmacao-modal__acoes">
      <button type="button" class="btn btn--secundario" (click)="cancelar()">
        {{ data?.textoCancelar || 'Cancelar' }}
      </button>
      <button type="button" class="btn btn--primario" (click)="confirmar()">
        {{ data?.textoConfirmar || 'Confirmar' }}
      </button>
    </div>
  </div>
</div>

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\modal\confirmacao-modal\confirmacao-modal.component.ts ----- 
import { Component, Input } from '@angular/core';
import { PopupService, ConfirmacaoModalData } from '../../service/popupService';

@Component({
  selector: 'app-confirmacao-modal',
  templateUrl: './confirmacao-modal.component.html',
  styleUrls: ['./confirmacao-modal.component.css']
})
export class ConfirmacaoModalComponent {
  @Input() data: ConfirmacaoModalData | null = null;

  constructor(private readonly popupService: PopupService) {}

  confirmar(): void {
    this.popupService.resolveConfirmacao(true);
  }

  cancelar(): void {
    this.popupService.resolveConfirmacao(false);
  }
}

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\user.model.spec.ts ----- 
import { User } from './user.model';

describe('User model', () => {
  it('deve preencher as propriedades fornecidas no construtor', () => {
    const user = new User('1', 'João', 'token-123', 'joao@example.com', 'senha', 'ADMIN', ['ADMIN']);

    expect(user.id).toBe('1');
    expect(user.nome).toBe('João');
    expect(user.token).toBe('token-123');
    expect(user.email).toBe('joao@example.com');
    expect(user.senha).toBe('senha');
    expect(user.perfil).toBe('ADMIN');
    expect(user.roles).toEqual(['ADMIN']);
  });

  it('deve permitir instanciar com valores padrão', () => {
    const user = new User();

    expect(user.id).toBe('');
    expect(user.nome).toBe('');
    expect(user.token).toBe('');
    expect(user.email).toBe('');
    expect(user.senha).toBe('');
    expect(user.perfil).toBe('');
    expect(user.roles).toEqual([]);
  });

  it('deve garantir que o token seja atribuído mesmo quando não informado', () => {
    const user = new User('2', 'Maria', undefined as unknown as string);

    expect(user.token).toBe('');
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\user.model.ts ----- 
export class User {
    constructor(
      id: string = '',
      nome: string = '',
      token: string = '',
      email: string = '',
      senha: string = '',
      perfil: string = '',
      roles: string[] = [],
      transportadoraDocumento: string | null = null,
      transportadoraNome: string | null = null
    ) {
      this.id = id;
      this.nome = nome;
      this.token = token ?? '';
      this.email = email;
      this.senha = senha;
      this.perfil = perfil;
      this.roles = roles;
      this.transportadoraDocumento = transportadoraDocumento;
      this.transportadoraNome = transportadoraNome;
    }

    public id: string;
    public nome: string;
    public token: string;
    public email: string;
    public senha: string;
    public perfil: string;
    public roles: string[];
    public transportadoraDocumento: string | null;
    public transportadoraNome: string | null;
  }

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\gate\agendamento.model.ts ----- 
export interface GateEnumOption {
  codigo: string;
  descricao: string;
}

export interface DocumentoAgendamento {
  id: number;
  tipoDocumento: string;
  numero: string;
  urlDocumento: string;
  nomeArquivo: string;
  contentType: string;
  tamanhoBytes: number;
  ultimaRevalidacao?: string | null;
  statusValidacao: string;
  statusValidacaoDescricao: string | null;
  mensagemValidacao: string | null;
}

export interface GateEvent {
  id: number;
  status: string;
  statusDescricao: string | null;
  motivoExcecao: string | null;
  motivoExcecaoDescricao: string | null;
  observacao: string | null;
  usuarioResponsavel: string | null;
  registradoEm: string;
}

export interface GatePass {
  id: number;
  codigo: string;
  status: string;
  statusDescricao: string | null;
  dataEntrada: string | null;
  dataSaida: string | null;
  eventos: GateEvent[] | null;
  token: string | null;
}

export interface Agendamento {
  id: number;
  codigo: string;
  tipoOperacao: string;
  tipoOperacaoDescricao: string | null;
  status: string;
  statusDescricao: string | null;
  transportadoraId: number | null;
  transportadoraNome: string | null;
  motoristaId: number | null;
  motoristaNome: string | null;
  veiculoId: number | null;
  placaVeiculo: string | null;
  janelaAtendimentoId: number | null;
  dataJanela: string | null;
  horaInicioJanela: string | null;
  horaFimJanela: string | null;
  horarioPrevistoChegada: string | null;
  horarioPrevistoSaida: string | null;
  horarioRealChegada: string | null;
  horarioRealSaida: string | null;
  observacoes: string | null;
  documentos: DocumentoAgendamento[] | null;
  gatePass: GatePass | null;
}

export interface Page<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  number: number;
  size: number;
  first: boolean;
  last: boolean;
}

export interface AgendamentoFiltro {
  dataInicio?: string;
  dataFim?: string;
  page?: number;
  size?: number;
  sort?: string;
  transportadoraId?: number;
  tipoOperacao?: string;
  status?: string;
}

export interface AgendamentoRequest {
  codigo: string;
  tipoOperacao: string;
  status: string;
  transportadoraId: number;
  motoristaId: number;
  veiculoId: number;
  janelaAtendimentoId: number;
  horarioPrevistoChegada: string;
  horarioPrevistoSaida: string;
  observacoes?: string | null;
  placaVeiculo?: string | null;
  motoristaCpf?: string | null;
}

export interface UploadDocumentoStatus {
  fileName: string;
  progress: number;
  status: 'pendente' | 'enviando' | 'concluido' | 'erro';
}

export interface AgendamentoFormPayload {
  request: AgendamentoRequest;
  arquivos: File[];
}

export interface AcaoCentralAgendamento {
  codigo: string;
  titulo: string;
  descricao: string;
  metodoHttp: string;
  rotaApiRelativa: string | null;
  habilitada: boolean;
}

export interface DocumentoPendenteAgendamento {
  id: number;
  nomeArquivo: string;
  tipoDocumento: string | null;
  mensagem: string | null;
}

export interface SituacaoPatio {
  status: string | null;
  descricao: string | null;
  verificadoEm: string | null;
}

export interface VisaoCompletaAgendamento {
  agendamentoId: number;
  codigo: string;
  status: string;
  statusDescricao: string | null;
  tipoOperacaoDescricao: string | null;
  horarioPrevistoChegada: string | null;
  horarioPrevistoSaida: string | null;
  placaVeiculo: string | null;
  transportadoraNome: string | null;
  motoristaNome: string | null;
  janelaData: string | null;
  janelaHoraInicio: string | null;
  janelaHoraFim: string | null;
  mensagemOrientacao: string | null;
  acaoPrincipal: AcaoCentralAgendamento | null;
  documentosPendentes: DocumentoPendenteAgendamento[];
}

export interface UsuarioCentralAcao {
  login: string | null;
  nome: string | null;
  perfil: string | null;
  transportadoraDocumento?: string | null;
  transportadoraNome: string | null;
}

export interface CentralAcaoAgendamentoResposta {
  usuario?: UsuarioCentralAcao | null;
  situacaoPatio?: SituacaoPatio | null;
  agendamentos: VisaoCompletaAgendamento[];
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\gate\dashboard.model.ts ----- 
export interface OcupacaoPorHora {
  horaInicio: string;
  totalAgendamentos: number;
  capacidadeSlot: number;
}

export interface TempoMedioPermanencia {
  dia: string;
  tempoMedioMinutos: number | null;
}

export interface DashboardResumo {
  totalAgendamentos: number;
  percentualPontualidade: number;
  percentualNoShow: number;
  percentualOcupacaoSlots: number;
  tempoMedioTurnaroundMinutos: number;
  ocupacaoPorHora: OcupacaoPorHora[];
  turnaroundPorDia: TempoMedioPermanencia[];
  percentualAbandono: number;
  percentualAbandonoAnterior: number;
  variacaoAbandonoPercentual: number;
}

export interface DashboardFiltro {
  inicio?: string;
  fim?: string;
  transportadoraId?: number;
  tipoOperacao?: string;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\gate\janela.model.ts ----- 
import { GateEnumOption, Page } from './agendamento.model';

export interface JanelaAtendimento {
  id: number;
  data: string;
  horaInicio: string;
  horaFim: string;
  capacidade: number;
  canalEntrada: string;
  canalEntradaDescricao: string | null;
}

export interface JanelaFiltro {
  dataInicio?: string;
  dataFim?: string;
  page?: number;
  size?: number;
  sort?: string;
}

export interface JanelaAtendimentoRequest {
  data: string;
  horaInicio: string;
  horaFim: string;
  capacidade: number;
  canalEntrada: string;
}

export type JanelaAtendimentoPage = Page<JanelaAtendimento>;

export type JanelaEnumOption = GateEnumOption;
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\model\gate\operador.model.ts ----- 
export type GateNivelEvento = 'INFO' | 'ALERTA' | 'CRITICA' | 'OPERACIONAL' | string;

export interface GateOperadorExcecao {
  codigo: string;
  descricao: string;
  nivel: GateNivelEvento;
}

export interface GateOperadorContato {
  tipo: 'TELEFONE' | 'EMAIL' | 'WHATSAPP' | string;
  valor: string;
  descricao?: string | null;
}

export interface GateOperadorVeiculo {
  id: number;
  placa: string;
  documento?: string | null;
  motorista?: string | null;
  status: string;
  statusDescricao?: string | null;
  tempoFilaMinutos?: number | null;
  canalEntrada?: string | null;
  transportadora?: string | null;
  contatos?: GateOperadorContato[] | null;
  excecoes?: GateOperadorExcecao[] | null;
  podeImprimirComprovante?: boolean;
}

export interface GateOperadorFila {
  id: number;
  nome: string;
  quantidade: number;
  tempoMedioEsperaMinutos?: number | null;
  veiculos: GateOperadorVeiculo[];
}

export interface GateOperadorEvento {
  id: number;
  tipo: string;
  descricao: string;
  nivel: GateNivelEvento;
  registradoEm: string;
  veiculoId?: number | null;
  placaVeiculo?: string | null;
  transportadora?: string | null;
  usuario?: string | null;
}

export interface GateOperadorPainel {
  filasEntrada: GateOperadorFila[];
  filasSaida: GateOperadorFila[];
  veiculosAtendimento: GateOperadorVeiculo[];
  historico: GateOperadorEvento[];
  ultimaAtualizacao: string;
}

export interface GateLiberacaoManualRequest {
  canalEntrada: string;
  justificativa: string;
  notificarTransportadora: boolean;
}

export interface GateBloqueioRequest {
  motivoCodigo: string;
  justificativa: string;
  bloqueioAte: string;
}

export interface GateOcorrenciaRequest {
  tipoCodigo: string;
  descricao: string;
  veiculoId?: number | null;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\navbar\navbar.component.css ----- 
.app-navbar {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    list-style: none;
    margin-left: 30px;
    color: #ffffff;
    font-size: 1.2em;
    font-weight: bold;
    letter-spacing: 2px;
    line-height: 1.2;
    align-self: center;
    z-index: 1000;
}

.app-navbar > ul {
    display: flex;
    gap: 10px;
    padding: 0;
    margin: 0;
    list-style: none;
}

.app-navbar ul li {
    position: relative;
    padding-bottom: 10px;
    z-index: 1000;
}

.app-navbar ul li > ul {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background: #2349868c;
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px;
    z-index: 1000;
}

.app-navbar ul li > ul li {
    margin-bottom: 10px;
    z-index: 1000;
}

.app-navbar ul li > ul li:last-child {
    margin-bottom: 0;
}

.app-navbar button {
    background: none;
    border: none;
    color: #ffffff;
    cursor: pointer;
    font: inherit;
    padding: 0;
}

.app-navbar button:focus-visible {
    outline: 2px solid #ffffff;
    outline-offset: 2px;
}

.submenu-trigger {
    margin-right: 15px;
    text-decoration: none;
}

.submenu-trigger:hover,
.submenu-item:not(:disabled):hover {
    text-decoration: underline;
}

.submenu-item {
    display: flex;
    align-items: center;
    gap: 6px;
    margin: 0;
}

.submenu-item:disabled {
    cursor: not-allowed;
    opacity: 0.6;
    text-decoration: none;
}

.submenu-item.coming-soon {
    text-decoration: none;
}

.submenu-badge {
    background-color: #f5a623;
    border-radius: 12px;
    color: #14213d;
    font-size: 0.65em;
    font-weight: 600;
    padding: 2px 8px;
    text-transform: uppercase;
}

.title-banner {
    display: flex;
    align-items: center;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\navbar\navbar.component.html ----- 
<nav class="app-navbar" *ngIf="mostrarMenu">
  <ul>
    <li *ngIf="configurationTabs.length" (click)="toggleSubmenu($event)">
      <button type="button" class="submenu-trigger">Configurações</button>
      <ul>
        <li *ngFor="let tab of configurationTabs">
          <button
            type="button"
            class="submenu-item"
            [class.coming-soon]="tab.disabled"
            [disabled]="tab.disabled"
            (click)="handleTabSelection($event, tab)"
          >
            <span>{{ tab.label }}</span>
            <span *ngIf="tab.disabled" class="submenu-badge">{{ tab.comingSoonMessage || 'Em breve' }}</span>
          </button>
        </li>
      </ul>
    </li>
    <li *ngIf="gateTabs.length" (click)="toggleSubmenu($event)">
      <button type="button" class="submenu-trigger">Gate</button>
      <ul>
        <li *ngFor="let tab of gateTabs">
          <button
            type="button"
            class="submenu-item"
            [class.coming-soon]="tab.disabled"
            [disabled]="tab.disabled"
            (click)="handleTabSelection($event, tab)"
          >
            <span>{{ tab.label }}</span>
            <span *ngIf="tab.disabled" class="submenu-badge">{{ tab.comingSoonMessage || 'Em breve' }}</span>
          </button>
        </li>
      </ul>
    </li>
    <li *ngIf="ferroviaTabs.length" (click)="toggleSubmenu($event)">
      <button type="button" class="submenu-trigger">Ferrovia</button>
      <ul>
        <li *ngFor="let tab of ferroviaTabs">
          <button
            type="button"
            class="submenu-item"
            [class.coming-soon]="tab.disabled"
            [disabled]="tab.disabled"
            (click)="handleTabSelection($event, tab)"
          >
            <span>{{ tab.label }}</span>
            <span *ngIf="tab.disabled" class="submenu-badge">{{ tab.comingSoonMessage || 'Em breve' }}</span>
          </button>
        </li>
      </ul>
    </li>
    <li *ngIf="yardTabs.length" (click)="toggleSubmenu($event)">
      <button type="button" class="submenu-trigger">Pátio</button>
      <ul>
        <li *ngFor="let tab of yardTabs">
          <button
            type="button"
            class="submenu-item"
            [class.coming-soon]="tab.disabled"
            [disabled]="tab.disabled"
            (click)="handleTabSelection($event, tab)"
          >
            <span>{{ tab.label }}</span>
            <span *ngIf="tab.disabled" class="submenu-badge">{{ tab.comingSoonMessage || 'Em breve' }}</span>
          </button>
        </li>
      </ul>
    </li>
    <li *ngIf="userTabs.length" (click)="toggleSubmenu($event)">
      <button type="button" class="submenu-trigger">Usuários</button>
      <ul>
        <li *ngFor="let tab of userTabs">
          <button
            type="button"
            class="submenu-item"
            [class.coming-soon]="tab.disabled"
            [disabled]="tab.disabled"
            (click)="handleTabSelection($event, tab)"
          >
            <span>{{ tab.label }}</span>
            <span *ngIf="tab.disabled" class="submenu-badge">{{ tab.comingSoonMessage || 'Em breve' }}</span>
          </button>
        </li>
      </ul>
    </li>
  </ul>
</nav>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\navbar\navbar.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { NavbarComponent } from './navbar.component';

describe('NavbarComponent', () => {
  let component: NavbarComponent;
  let fixture: ComponentFixture<NavbarComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [NavbarComponent]
    });
    fixture = TestBed.createComponent(NavbarComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\navbar\navbar.component.ts ----- 
import { Component, ElementRef, HostListener, OnDestroy, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Subscription } from 'rxjs';
import { ServicoAutenticacao } from '../service/servico-autenticacao/servico-autenticacao.service';
import { TabItem, TAB_REGISTRY, normalizeTabId, resolveRouteSegments, TabService } from './TabService';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: ['./navbar.component.css']
})
export class NavbarComponent implements OnInit, OnDestroy {
  mostrarMenu = false;
  private menuStatusSubscription?: Subscription;

  private readonly configurationTabIds = ['role', 'seguranca', 'notificacoes', 'privacidade'];
  private readonly userTabIds = ['lista-de-usuarios'];
  private readonly gateTabIds = [
    'gate/dashboard',
    'gate/agendamentos',
    'gate/janelas',
    'gate/relatorios',
    'gate/operador/console',
    'gate/operador/eventos'
  ];
  private readonly ferroviaTabIds = ['ferrovia/visitas'];
  private readonly yardTabIds = ['patio/lista-trabalho', 'patio/mapa', 'patio/posicoes', 'patio/movimentacoes'];

  private readonly tabRoles: Record<string, string[]> = {
    role: ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR'],
    seguranca: ['ROLE_ADMIN_PORTO'],
    notificacoes: ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR'],
    privacidade: ['ROLE_ADMIN_PORTO'],
    'lista-de-usuarios': ['ROLE_ADMIN_PORTO'],
    'gate/dashboard': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR', 'ROLE_OPERADOR_GATE'],
    'gate/agendamentos': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR', 'ROLE_OPERADOR_GATE'],
    'gate/janelas': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR', 'ROLE_OPERADOR_GATE'],
    'gate/relatorios': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR', 'ROLE_OPERADOR_GATE'],
    'gate/operador/console': ['ROLE_ADMIN_PORTO', 'ROLE_OPERADOR_GATE', 'ROLE_PLANEJADOR'],
    'gate/operador/eventos': ['ROLE_ADMIN_PORTO', 'ROLE_OPERADOR_GATE', 'ROLE_PLANEJADOR'],
    'ferrovia/visitas': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR'],
    'patio/lista-trabalho': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR', 'ROLE_OPERADOR_PATIO'],
    'patio/mapa': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR'],
    'patio/posicoes': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR'],
    'patio/movimentacoes': ['ROLE_ADMIN_PORTO', 'ROLE_PLANEJADOR']
  };

  constructor(
    private readonly servicoAutenticacao: ServicoAutenticacao,
    private readonly router: Router,
    private readonly tabService: TabService,
    private readonly eRef: ElementRef
  ) {
    this.mostrarMenu = this.servicoAutenticacao.obterStatusMenuAtual();
  }

  ngOnInit(): void {
    this.menuStatusSubscription = this.servicoAutenticacao.statusMenuObservavel.subscribe(
      mostrar => this.mostrarMenu = mostrar
    );
  }

  ngOnDestroy(): void {
    this.menuStatusSubscription?.unsubscribe();
  }

  get configurationTabs(): TabItem[] {
    return this.resolveTabs(this.configurationTabIds);
  }

  get userTabs(): TabItem[] {
    return this.resolveTabs(this.userTabIds);
  }

  get gateTabs(): TabItem[] {
    return this.resolveTabs(this.gateTabIds);
  }

  get ferroviaTabs(): TabItem[] {
    return this.resolveTabs(this.ferroviaTabIds);
  }

  get yardTabs(): TabItem[] {
    return this.resolveTabs(this.yardTabIds);
  }

  openTab(tab: TabItem): void {
    if (tab.disabled) {
      return;
    }
    const normalizedId = normalizeTabId(tab.id);
    if (!this.canAccess(normalizedId)) {
      return;
    }
    const canonicalTab = TAB_REGISTRY[normalizedId] ?? tab;
    const content = this.tabService.getTabContent(normalizedId) ?? {
      message: `Conteúdo padrão para a aba ${canonicalTab.label}`
    };
    this.tabService.openTab(canonicalTab, content);
    const routeCommands = ['/home', ...resolveRouteSegments(normalizedId)];
    this.router.navigate(routeCommands);
  }

  handleTabSelection(event: Event, tab: TabItem): void {
    event.preventDefault();
    event.stopPropagation();
    if (tab.disabled) {
      return;
    }
    this.openTab(tab);
  }

  toggleSubmenu(event: Event): void {
    event.preventDefault();
    event.stopPropagation();

    const host = event.currentTarget as HTMLElement;
    const submenu = host.querySelector('ul');

    if (submenu instanceof HTMLElement) {
      const isHidden = submenu.style.display === 'none' || submenu.style.display === '';
      submenu.style.display = isHidden ? 'block' : 'none';
    }
  }

  @HostListener('document:click', ['$event'])
  clickout(event: MouseEvent): void {
    if (!this.eRef.nativeElement.contains(event.target)) {
      const submenus = this.eRef.nativeElement.querySelectorAll('.app-navbar ul li > ul');
      submenus.forEach((submenu: HTMLElement) => submenu.style.display = 'none');
    }
  }

  private resolveTabs(ids: string[]): TabItem[] {
    return ids
      .map(id => this.resolveTabById(id))
      .filter((tab): tab is TabItem => !!tab)
      .filter(tab => tab.disabled || this.canAccess(tab.id));
  }

  private resolveTabById(id: string): TabItem | undefined {
    const registered = TAB_REGISTRY[id];
    if (registered) {
      return registered;
    }
    return {
      id,
      label: this.formatPlaceholderLabel(id),
      disabled: true,
      comingSoonMessage: 'Em breve'
    };
  }

  private formatPlaceholderLabel(value: string): string {
    return value
      .split(/[\\/\-]/)
      .filter(segment => segment.trim().length > 0)
      .map(segment => segment.charAt(0).toUpperCase() + segment.slice(1))
      .join(' ');
  }

  private canAccess(tabId: string): boolean {
    const normalized = normalizeTabId(tabId);
    const roles = this.tabRoles[normalized];
    if (!roles || roles.length === 0) {
      return true;
    }
    return this.servicoAutenticacao.possuiAlgumPapel(...roles);
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\navbar\TabService.ts ----- 
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

export interface TabItem {
  id: string;
  label: string;
  route?: string[];
  disabled?: boolean;
  comingSoonMessage?: string;
}

export const DEFAULT_TAB_ID = 'role';

export const TAB_REGISTRY: Readonly<Record<string, TabItem>> = {
  role: {
    id: 'role',
    label: 'Perfis de Acesso',
    route: ['role']
  },
  seguranca: {
    id: 'seguranca',
    label: 'Políticas de Segurança',
    route: ['seguranca']
  },
  notificacoes: {
    id: 'notificacoes',
    label: 'Centro de Notificações',
    route: ['notificacoes']
  },
  privacidade: {
    id: 'privacidade',
    label: 'Preferências de Privacidade',
    route: ['privacidade']
  },
  'lista-de-usuarios': {
    id: 'lista-de-usuarios',
    label: 'Lista de Usuários',
    route: ['lista-de-usuarios']
  },
  'gate/dashboard': {
    id: 'gate/dashboard',
    label: 'Painel do Gate',
    route: ['gate', 'dashboard']
  },
  'gate/agendamentos': {
    id: 'gate/agendamentos',
    label: 'Agendamentos do Gate',
    route: ['gate', 'agendamentos']
  },
  'gate/janelas': {
    id: 'gate/janelas',
    label: 'Janelas de Atendimento',
    route: ['gate', 'janelas']
  },
  'gate/relatorios': {
    id: 'gate/relatorios',
    label: 'Relatórios do Gate',
    route: ['gate', 'relatorios']
  },
  'gate/operador/console': {
    id: 'gate/operador/console',
    label: 'Console do Operador',
    route: ['gate', 'operador', 'console']
  },
  'gate/operador/eventos': {
    id: 'gate/operador/eventos',
    label: 'Eventos do Operador',
    route: ['gate', 'operador', 'eventos']
  },
  'ferrovia/visitas': {
    id: 'ferrovia/visitas',
    label: 'Visitas de Trem',
    route: ['ferrovia', 'visitas']
  },
  'patio/mapa': {
    id: 'patio/mapa',
    label: 'Mapa do Pátio',
    route: ['patio', 'mapa']
  },
  'patio/lista-trabalho': {
    id: 'patio/lista-trabalho',
    label: 'Lista de Trabalho do Pátio',
    route: ['patio', 'lista-trabalho']
  },
  'patio/posicoes': {
    id: 'patio/posicoes',
    label: 'Posições do Pátio',
    route: ['patio', 'posicoes']
  },
  'patio/movimentacoes': {
    id: 'patio/movimentacoes',
    label: 'Movimentações do Pátio',
    route: ['patio', 'movimentacoes']
  }
};

export const VALID_TAB_IDS = new Set<string>(Object.keys(TAB_REGISTRY));

export function normalizeTabId(tabId: string): string {
  const normalized = tabId?.trim().toLowerCase() ?? '';
  return VALID_TAB_IDS.has(normalized) ? normalized : DEFAULT_TAB_ID;
}

export function resolveRouteSegments(tabId: string): string[] {
  const normalized = normalizeTabId(tabId);
  const canonical = TAB_REGISTRY[normalized];
  if (canonical?.route && canonical.route.length > 0) {
    return canonical.route;
  }
  return normalized.split('/');
}

@Injectable({
  providedIn: 'root'
})
export class TabService {
  private tabsSubject = new BehaviorSubject<TabItem[]>([]);
  tabs$ = this.tabsSubject.asObservable();
  private contentSubject = new BehaviorSubject<any>(null);
  content$ = this.contentSubject.asObservable();

  private tabContents: { [tabId: string]: any } = {};

  openTab(tab: TabItem | string, content?: any): void {
    const tabToRegister = this.resolveTab(tab);
    if (tabToRegister.disabled) {
      return;
    }
    const normalizedId = normalizeTabId(tabToRegister.id);
    const registeredTab = TAB_REGISTRY[normalizedId] ?? {
      id: normalizedId,
      label: tabToRegister.label ?? normalizedId
    };
    const tabToOpen: TabItem = { ...registeredTab };
    const tabs = this.tabsSubject.value;
    if (!tabs.find(existingTab => existingTab.id === normalizedId)) {
      this.tabsSubject.next([...tabs, tabToOpen]);
    }
    if (content !== undefined) {
      this.tabContents[normalizedId] = content;
    }
  }

  setContent(content: any): void {
    this.contentSubject.next(content);
  }

  closeTab(tabId: string): void {
    const normalizedId = normalizeTabId(tabId);
    const tabs = this.tabsSubject.value;
    this.tabsSubject.next(tabs.filter(t => t.id !== normalizedId));
    delete this.tabContents[normalizedId];
  }

  getTabContent(tabId: string): any {
    return this.tabContents[normalizeTabId(tabId)];
  }

  setTabContent(tabId: string, content: any): void {
    this.tabContents[normalizeTabId(tabId)] = content;
  }

  private resolveTab(tab: TabItem | string): TabItem {
    if (typeof tab !== 'string') {
      return tab;
    }

    const normalizedId = normalizeTabId(tab);
    const registryById = TAB_REGISTRY[normalizedId];
    if (registryById) {
      return registryById;
    }

    const registryByLabel = Object.values(TAB_REGISTRY).find(
      registeredTab => registeredTab.label.toLowerCase() === tab.toLowerCase()
    );
    if (registryByLabel) {
      return registryByLabel;
    }

    return {
      id: normalizedId,
      label: tab
    };
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\notificacoes\notificacoes.component.css ----- 
.notificacoes {
  padding: 1.5rem;
}

.notificacoes table {
  width: 100%;
  border-collapse: collapse;
}

.notificacoes th,
.notificacoes td {
  border-bottom: 1px solid #e0e0e0;
  padding: 0.75rem 0;
}

.habilitado {
  color: #2d9d4d;
}

.desabilitado {
  color: #c53030;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\notificacoes\notificacoes.component.html ----- 
<section class="notificacoes">
  <h2>Preferências de Notificações</h2>
  <p>Selecione os canais pelos quais deseja receber alertas.</p>
  <table>
    <thead>
      <tr>
        <th>Canal</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let canal of canais">
        <td>{{ canal.canal }}</td>
        <td>
          <span [class.habilitado]="canal.habilitado" [class.desabilitado]="!canal.habilitado">
            {{ canal.habilitado ? 'Ativado' : 'Desativado' }}
          </span>
        </td>
      </tr>
    </tbody>
  </table>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\notificacoes\notificacoes.component.ts ----- 
import { Component } from '@angular/core';

interface CanalNotificacao {
  canal: string;
  habilitado: boolean;
}

@Component({
  selector: 'app-notificacoes',
  templateUrl: './notificacoes.component.html',
  styleUrls: ['./notificacoes.component.css']
})
export class NotificacoesComponent {
  canais: CanalNotificacao[] = [
    { canal: 'E-mail', habilitado: true },
    { canal: 'SMS', habilitado: false },
    { canal: 'Aplicativo móvel', habilitado: true }
  ];
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\patio-routing.module.ts ----- 
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { MapaPatioComponent } from './mapa-patio/mapa-patio.component';
import { ListaPosicoesComponent } from './lista-posicoes/lista-posicoes.component';
import { ListaMovimentacoesComponent } from './lista-movimentacoes/lista-movimentacoes.component';
import { FormularioMovimentacaoComponent } from './formulario-movimentacao/formulario-movimentacao.component';
import { ListaTrabalhoPatioComponent } from './lista-trabalho-patio/lista-trabalho-patio.component';

const routes: Routes = [
  {
    path: 'lista-trabalho',
    component: ListaTrabalhoPatioComponent
  },
  {
    path: 'mapa',
    component: MapaPatioComponent
  },
  {
    path: 'posicoes',
    component: ListaPosicoesComponent
  },
  {
    path: 'movimentacoes',
    component: ListaMovimentacoesComponent
  },
  {
    path: 'movimentacao',
    component: FormularioMovimentacaoComponent
  },
  {
    path: '',
    pathMatch: 'full',
    redirectTo: 'lista-trabalho'
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class PatioRoutingModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\patio.module.ts ----- 
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MapaPatioComponent } from './mapa-patio/mapa-patio.component';
import { ListaPosicoesComponent } from './lista-posicoes/lista-posicoes.component';
import { ListaMovimentacoesComponent } from './lista-movimentacoes/lista-movimentacoes.component';
import { FormularioMovimentacaoComponent } from './formulario-movimentacao/formulario-movimentacao.component';
import { ListaTrabalhoPatioComponent } from './lista-trabalho-patio/lista-trabalho-patio.component';
import { PatioRoutingModule } from './patio-routing.module';

@NgModule({
  declarations: [
    MapaPatioComponent,
    ListaPosicoesComponent,
    ListaMovimentacoesComponent,
    FormularioMovimentacaoComponent,
    ListaTrabalhoPatioComponent
  ],
  imports: [CommonModule, ReactiveFormsModule, PatioRoutingModule]
})
export class PatioModule { }
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\formulario-movimentacao\formulario-movimentacao.component.css ----- 
.formulario-ordem {
  background: #ffffff;
  border-radius: 10px;
  padding: 1.5rem;
  box-shadow: 0 2px 10px rgba(18, 51, 84, 0.1);
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
}

.formulario-ordem header {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.formulario-ordem header h2 {
  margin: 0;
  font-size: 1.6rem;
  color: #123354;
}

.formulario-ordem header p {
  margin: 0;
  color: #4a6077;
}

.bloco {
  border: 1px solid #dde5ef;
  border-radius: 8px;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background-color: #f8fbff;
}

.campo {
  display: flex;
  flex-direction: column;
  gap: 0.35rem;
}

.campo input,
.campo select {
  padding: 0.65rem;
  border: 1px solid #c0ccda;
  border-radius: 6px;
  font-size: 0.95rem;
}

.duas-colunas {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.acoes {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.acoes button {
  padding: 0.65rem 1.2rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.2s ease;
  background-color: #0b6efd;
  color: #ffffff;
}

.acoes button.secundario {
  background-color: #e2e8f0;
  color: #1f2b3a;
}

.acoes button:disabled {
  background-color: #9bb8de;
  cursor: not-allowed;
}

.mensagem {
  font-size: 0.95rem;
  margin: 0;
}

.mensagem.sucesso {
  color: #1e8449;
}

.mensagem.erro {
  color: #c0392b;
}

.estado {
  font-size: 0.95rem;
  color: #4a6077;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\formulario-movimentacao\formulario-movimentacao.component.html ----- 
<section class="formulario-ordem">
  <header>
    <h2>Planejar ordem de movimentação</h2>
    <p>Cadastre ordens de trabalho para que os operadores executem as movimentações no pátio. A atualização do inventário ocorre somente após a confirmação da ordem.</p>
  </header>

  <div class="estado" *ngIf="carregandoOpcoes">Carregando dados de apoio...</div>

  <form [formGroup]="formularioOrdem" (ngSubmit)="submeterOrdem()" class="bloco">
    <div class="duas-colunas">
      <div class="campo">
        <label for="ordem-codigo">Código do contêiner</label>
        <input id="ordem-codigo" type="text" formControlName="codigo" required />
      </div>
      <div class="campo">
        <label for="ordem-tipo-movimento">Tipo de movimento</label>
        <select id="ordem-tipo-movimento" formControlName="tipoMovimento" required>
          <option value="" disabled>Selecione</option>
          <option *ngFor="let tipo of opcoes?.tiposMovimento" [value]="tipo">{{ formatarRotulo(tipo) }}</option>
        </select>
      </div>
    </div>

    <div class="duas-colunas">
      <div class="campo">
        <label for="ordem-tipo-carga">Tipo de carga</label>
        <input id="ordem-tipo-carga" type="text" formControlName="tipoCarga" required />
      </div>
      <div class="campo">
        <label for="ordem-status-destino">Status após conclusão</label>
        <select id="ordem-status-destino" formControlName="statusConteinerDestino" required>
          <option value="" disabled>Selecione</option>
          <option *ngFor="let status of opcoes?.statusConteiner" [value]="status">{{ formatarRotulo(status) }}</option>
        </select>
      </div>
    </div>

    <div class="duas-colunas">
      <div class="campo">
        <label for="ordem-destino">Destino</label>
        <input id="ordem-destino" type="text" formControlName="destino" required />
      </div>
      <div class="campo">
        <label for="ordem-camada">Camada operacional</label>
        <input id="ordem-camada" type="text" formControlName="camadaDestino" required />
      </div>
    </div>

    <div class="duas-colunas">
      <div class="campo">
        <label for="ordem-linha">Linha</label>
        <input id="ordem-linha" type="number" formControlName="linhaDestino" min="0" required />
      </div>
      <div class="campo">
        <label for="ordem-coluna">Coluna</label>
        <input id="ordem-coluna" type="number" formControlName="colunaDestino" min="0" required />
      </div>
    </div>

    <div class="acoes">
      <button type="submit" [disabled]="salvandoOrdem">Registrar ordem</button>
      <button type="button" class="secundario" (click)="limparFormularioOrdem()">Limpar campos</button>
    </div>
    <p class="mensagem sucesso" *ngIf="sucessoOrdem">{{ sucessoOrdem }}</p>
    <p class="mensagem erro" *ngIf="erroOrdem">{{ erroOrdem }}</p>
  </form>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\formulario-movimentacao\formulario-movimentacao.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { of, throwError } from 'rxjs';
import { FormularioMovimentacaoComponent } from './formulario-movimentacao.component';
import { ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

describe('FormularioMovimentacaoComponent', () => {
  let component: FormularioMovimentacaoComponent;
  let fixture: ComponentFixture<FormularioMovimentacaoComponent>;
  let servicoPatioSpy: jasmine.SpyObj<ServicoPatioService>;

  beforeEach(async () => {
    servicoPatioSpy = jasmine.createSpyObj('ServicoPatioService', [
      'obterOpcoesCadastro',
      'salvarConteiner',
      'salvarEquipamento'
    ]);

    servicoPatioSpy.obterOpcoesCadastro.and.returnValue(of({
      statusConteiner: ['AGUARDANDO_RETIRADA'],
      tiposEquipamento: ['RTG'],
      statusEquipamento: ['OPERACIONAL']
    }));

    await TestBed.configureTestingModule({
      imports: [ReactiveFormsModule],
      declarations: [FormularioMovimentacaoComponent],
      providers: [
        SanitizadorConteudoService,
        { provide: ServicoPatioService, useValue: servicoPatioSpy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(FormularioMovimentacaoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('deve enviar formulário de contêiner com sucesso', () => {
    servicoPatioSpy.salvarConteiner.and.returnValue(of({ id: 1 } as any));

    component.formularioConteiner.setValue({
      id: null,
      codigo: 'CTN123',
      linha: 1,
      coluna: 2,
      status: 'AGUARDANDO_RETIRADA',
      tipoCarga: 'Granel',
      destino: 'Santos',
      camadaOperacional: 'A1'
    });

    component.submeterConteiner();

    expect(servicoPatioSpy.salvarConteiner).toHaveBeenCalled();
    expect(component.sucessoConteiner).toBeTruthy();
  });

  it('não deve enviar contêiner quando formulário é inválido', () => {
    component.formularioConteiner.patchValue({ codigo: '' });

    component.submeterConteiner();

    expect(servicoPatioSpy.salvarConteiner).not.toHaveBeenCalled();
  });

  it('deve informar erro ao falhar no envio do equipamento', () => {
    servicoPatioSpy.salvarEquipamento.and.returnValue(throwError(() => new Error('falha')));

    component.formularioEquipamento.setValue({
      id: null,
      identificador: 'EQP',
      tipoEquipamento: 'RTG',
      linha: 1,
      coluna: 1,
      statusOperacional: 'OPERACIONAL'
    });

    component.submeterEquipamento();

    expect(servicoPatioSpy.salvarEquipamento).toHaveBeenCalled();
    expect(component.erroEquipamento).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\formulario-movimentacao\formulario-movimentacao.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { OpcoesCadastroPatio, ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { NovaOrdemTrabalhoPatio, ServicoListaTrabalhoPatioService, TipoMovimentoPatio } from '../../service/servico-lista-trabalho-patio/servico-lista-trabalho-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

@Component({
  selector: 'app-formulario-movimentacao',
  templateUrl: './formulario-movimentacao.component.html',
  styleUrls: ['./formulario-movimentacao.component.css']
})
export class FormularioMovimentacaoComponent implements OnInit {
  formularioOrdem: FormGroup;
  opcoes?: OpcoesCadastroPatio;
  carregandoOpcoes = false;
  salvandoOrdem = false;
  sucessoOrdem?: string;
  erroOrdem?: string;

  constructor(
    private readonly formBuilder: FormBuilder,
    private readonly servicoPatio: ServicoPatioService,
    private readonly servicoListaTrabalho: ServicoListaTrabalhoPatioService,
    private readonly sanitizador: SanitizadorConteudoService
  ) {
    this.formularioOrdem = this.formBuilder.group({
      codigo: ['', [Validators.required, Validators.maxLength(30)]],
      tipoCarga: ['', [Validators.required, Validators.maxLength(40)]],
      destino: ['', [Validators.required, Validators.maxLength(60)]],
      linhaDestino: [0, [Validators.required, Validators.min(0)]],
      colunaDestino: [0, [Validators.required, Validators.min(0)]],
      camadaDestino: ['', [Validators.required, Validators.maxLength(40)]],
      tipoMovimento: ['', Validators.required],
      statusConteinerDestino: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    this.carregarOpcoes();
  }

  carregarOpcoes(): void {
    this.carregandoOpcoes = true;
    this.servicoPatio.obterOpcoesCadastro()
      .pipe(finalize(() => this.carregandoOpcoes = false))
      .subscribe({
        next: (opcoes) => {
          this.opcoes = opcoes;
        },
        error: () => {
          this.opcoes = undefined;
        }
      });
  }

  submeterOrdem(): void {
    if (this.formularioOrdem.invalid) {
      this.formularioOrdem.markAllAsTouched();
      return;
    }
    const valores = this.formularioOrdem.getRawValue();
    const payload: NovaOrdemTrabalhoPatio = {
      codigoConteiner: this.sanitizarTexto(valores.codigo),
      tipoCarga: this.sanitizarTexto(valores.tipoCarga),
      destino: this.sanitizarTexto(valores.destino),
      linhaDestino: Number(valores.linhaDestino),
      colunaDestino: Number(valores.colunaDestino),
      camadaDestino: this.sanitizarTexto(valores.camadaDestino),
      tipoMovimento: valores.tipoMovimento as TipoMovimentoPatio,
      statusConteinerDestino: valores.statusConteinerDestino
    };

    this.salvandoOrdem = true;
    this.sucessoOrdem = undefined;
    this.erroOrdem = undefined;
    this.servicoListaTrabalho.registrarOrdem(payload)
      .pipe(finalize(() => (this.salvandoOrdem = false)))
      .subscribe({
        next: () => {
          this.sucessoOrdem = 'Ordem de trabalho criada com sucesso. Ela será exibida imediatamente para os operadores.';
          this.formularioOrdem.reset({ linhaDestino: 0, colunaDestino: 0 });
        },
        error: () => {
          this.erroOrdem = 'Não foi possível registrar a ordem de trabalho. Verifique os dados informados.';
        }
      });
  }

  limparFormularioOrdem(): void {
    this.formularioOrdem.reset({ linhaDestino: 0, colunaDestino: 0 });
    this.sucessoOrdem = undefined;
    this.erroOrdem = undefined;
  }

  formatarRotulo(valor: string): string {
    const texto = this.sanitizarTexto(valor);
    return texto
      .toLowerCase()
      .split(/[_\s]+/)
      .filter(parte => parte.length > 0)
      .map(parte => parte.charAt(0).toUpperCase() + parte.slice(1))
      .join(' ');
  }

  private sanitizarTexto(valor: string): string {
    return this.sanitizador.sanitizar(valor ?? '').trim();
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-movimentacoes\lista-movimentacoes.component.css ----- 
.lista-movimentacoes {
  background: #ffffff;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.lista-movimentacoes header {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.lista-movimentacoes header button {
  align-self: flex-start;
  padding: 6px 12px;
  border: none;
  background-color: #0f766e;
  color: #ffffff;
  border-radius: 4px;
  cursor: pointer;
}

.lista-movimentacoes header button:disabled {
  background-color: #7ec5bc;
  cursor: not-allowed;
}

.lista {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.lista li {
  border: 1px solid #e0e0e0;
  border-radius: 6px;
  padding: 12px;
  background-color: #fdfdfd;
}

.cabecalho {
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
}

.cabecalho .tipo {
  font-weight: 600;
  color: #0f172a;
}

.cabecalho .horario {
  color: #475569;
  font-size: 0.9rem;
}

.conteudo {
  display: flex;
  flex-direction: column;
  gap: 4px;
  color: #1e293b;
}

.estado {
  font-size: 0.95rem;
  color: #333333;
}

.estado.erro {
  color: #b30021;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-movimentacoes\lista-movimentacoes.component.html ----- 
<section class="lista-movimentacoes">
  <header>
    <h2>Movimentações recentes</h2>
    <p>Visualize os últimos registros de movimentação e acompanhe a operação em tempo real.</p>
    <button type="button" (click)="carregarMovimentacoes()" [disabled]="carregando">Atualizar movimentações</button>
  </header>

  <div class="estado" *ngIf="carregando">Buscando movimentações...</div>
  <div class="estado erro" *ngIf="erro">{{ erro }}</div>

  <ul class="lista" *ngIf="!carregando && !erro && movimentacoes.length">
    <li *ngFor="let movimento of movimentacoes; trackBy: identificarMovimento">
      <div class="cabecalho">
        <span class="tipo">{{ sanitizar(movimento.tipoMovimento) }}</span>
        <span class="horario">{{ movimento.registradoEm | date: 'dd/MM/yyyy HH:mm' }}</span>
      </div>
      <div class="conteudo">
        <span class="descricao">{{ sanitizar(movimento.descricao) }}</span>
        <span class="conteiner" *ngIf="movimento.codigoConteiner">Contêiner: {{ sanitizar(movimento.codigoConteiner) }}</span>
        <span class="destino" *ngIf="movimento.destino">Destino: {{ sanitizar(movimento.destino) }}</span>
        <span class="posicao" *ngIf="movimento.linha !== undefined && movimento.coluna !== undefined">
          Posição: Linha {{ movimento.linha }}, Coluna {{ movimento.coluna }}
          <span *ngIf="movimento.camadaOperacional">- Camada {{ sanitizar(movimento.camadaOperacional) }}</span>
        </span>
      </div>
    </li>
  </ul>

  <div class="estado" *ngIf="!carregando && !erro && !movimentacoes.length">
    Nenhuma movimentação registrada nas últimas execuções.
  </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-movimentacoes\lista-movimentacoes.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, throwError } from 'rxjs';
import { ListaMovimentacoesComponent } from './lista-movimentacoes.component';
import { ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

describe('ListaMovimentacoesComponent', () => {
  let component: ListaMovimentacoesComponent;
  let fixture: ComponentFixture<ListaMovimentacoesComponent>;
  let servicoPatioSpy: jasmine.SpyObj<ServicoPatioService>;

  beforeEach(async () => {
    servicoPatioSpy = jasmine.createSpyObj('ServicoPatioService', ['listarMovimentacoes']);

    await TestBed.configureTestingModule({
      declarations: [ListaMovimentacoesComponent],
      providers: [
        SanitizadorConteudoService,
        { provide: ServicoPatioService, useValue: servicoPatioSpy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(ListaMovimentacoesComponent);
    component = fixture.componentInstance;
  });

  it('deve carregar movimentações', () => {
    servicoPatioSpy.listarMovimentacoes.and.returnValue(of([
      {
        id: 10,
        codigoConteiner: 'CTN123',
        tipoMovimento: 'ALOCACAO',
        descricao: 'Teste',
        registradoEm: new Date().toISOString()
      }
    ]));

    component.carregarMovimentacoes();

    expect(component.movimentacoes.length).toBe(1);
    expect(component.erro).toBeUndefined();
    expect(component.carregando).toBeFalse();
  });

  it('deve exibir erro quando a busca falha', () => {
    servicoPatioSpy.listarMovimentacoes.and.returnValue(throwError(() => new Error('falha')));

    component.carregarMovimentacoes();

    expect(component.movimentacoes.length).toBe(0);
    expect(component.erro).toBeDefined();
    expect(component.carregando).toBeFalse();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-movimentacoes\lista-movimentacoes.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { MovimentoPatio, ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

@Component({
  selector: 'app-lista-movimentacoes',
  templateUrl: './lista-movimentacoes.component.html',
  styleUrls: ['./lista-movimentacoes.component.css']
})
export class ListaMovimentacoesComponent implements OnInit {
  movimentacoes: MovimentoPatio[] = [];
  carregando = false;
  erro?: string;

  constructor(
    private readonly servicoPatio: ServicoPatioService,
    private readonly sanitizador: SanitizadorConteudoService
  ) { }

  ngOnInit(): void {
    this.carregarMovimentacoes();
  }

  carregarMovimentacoes(): void {
    this.carregando = true;
    this.erro = undefined;
    this.servicoPatio.listarMovimentacoes().subscribe({
      next: (movimentacoes) => {
        this.movimentacoes = movimentacoes;
        this.carregando = false;
      },
      error: () => {
        this.erro = 'Não foi possível recuperar as movimentações recentes. Tente novamente em instantes.';
        this.carregando = false;
      }
    });
  }

  sanitizar(valor: string | null | undefined): string {
    return this.sanitizador.sanitizar(valor ?? '');
  }

  identificarMovimento(index: number, movimento: MovimentoPatio): number | undefined {
    return movimento?.id ?? index;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-posicoes\lista-posicoes.component.css ----- 
.lista-posicoes {
  background: #ffffff;
  border-radius: 8px;
  padding: 16px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.lista-posicoes header {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.lista-posicoes header button {
  align-self: flex-start;
  padding: 6px 12px;
  border: none;
  background-color: #0057b7;
  color: #ffffff;
  border-radius: 4px;
  cursor: pointer;
}

.lista-posicoes header button:disabled {
  background-color: #8da7d9;
  cursor: not-allowed;
}

.estado {
  font-size: 0.95rem;
  color: #333333;
}

.estado.erro {
  color: #b30021;
}

.tabela-posicoes {
  width: 100%;
  border-collapse: collapse;
}

.tabela-posicoes th,
.tabela-posicoes td {
  padding: 8px;
  border-bottom: 1px solid #e0e0e0;
  text-align: left;
}

.tabela-posicoes tbody tr:hover {
  background-color: #f7f9ff;
}

.ocupada {
  color: #b30021;
  font-weight: 600;
}

.livre {
  color: #2f855a;
  font-weight: 600;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-posicoes\lista-posicoes.component.html ----- 
<section class="lista-posicoes">
  <header>
    <h2>Posições do Pátio</h2>
    <p>Consulte a disponibilidade de cada posição e identifique ocupações críticas.</p>
    <button type="button" (click)="carregarPosicoes()" [disabled]="carregando">Atualizar posições</button>
  </header>

  <div class="estado" *ngIf="carregando">Carregando posições do pátio...</div>
  <div class="estado erro" *ngIf="erro">{{ erro }}</div>

  <table *ngIf="!carregando && !erro && posicoes.length" class="tabela-posicoes">
    <thead>
      <tr>
        <th>Linha</th>
        <th>Coluna</th>
        <th>Camada</th>
        <th>Ocupação</th>
        <th>Contêiner</th>
        <th>Status do contêiner</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let posicao of posicoes; trackBy: identificarPosicao">
        <td>{{ posicao.linha }}</td>
        <td>{{ posicao.coluna }}</td>
        <td>{{ sanitizar(posicao.camadaOperacional) }}</td>
        <td>
          <span [class.ocupada]="posicao.ocupada" [class.livre]="!posicao.ocupada">{{ descricaoOcupacao(posicao) }}</span>
        </td>
        <td>{{ sanitizar(posicao.codigoConteiner) || '—' }}</td>
        <td>{{ sanitizar(posicao.statusConteiner) || '—' }}</td>
      </tr>
    </tbody>
  </table>

  <div class="estado" *ngIf="!carregando && !erro && !posicoes.length">
    Nenhuma posição foi encontrada no momento.
  </div>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-posicoes\lista-posicoes.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { of, throwError } from 'rxjs';
import { ListaPosicoesComponent } from './lista-posicoes.component';
import { ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

describe('ListaPosicoesComponent', () => {
  let component: ListaPosicoesComponent;
  let fixture: ComponentFixture<ListaPosicoesComponent>;
  let servicoPatioSpy: jasmine.SpyObj<ServicoPatioService>;

  beforeEach(async () => {
    servicoPatioSpy = jasmine.createSpyObj('ServicoPatioService', ['listarPosicoes']);

    await TestBed.configureTestingModule({
      declarations: [ListaPosicoesComponent],
      providers: [
        SanitizadorConteudoService,
        { provide: ServicoPatioService, useValue: servicoPatioSpy }
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(ListaPosicoesComponent);
    component = fixture.componentInstance;
  });

  it('deve carregar posições com sucesso', () => {
    servicoPatioSpy.listarPosicoes.and.returnValue(of([
      { id: 1, linha: 1, coluna: 2, camadaOperacional: 'A', ocupada: true, codigoConteiner: 'CTN001', statusConteiner: 'RETIDO' }
    ]));

    component.carregarPosicoes();

    expect(component.posicoes.length).toBe(1);
    expect(component.carregando).toBeFalse();
    expect(component.erro).toBeUndefined();
  });

  it('deve informar erro ao falhar no carregamento', () => {
    servicoPatioSpy.listarPosicoes.and.returnValue(throwError(() => new Error('falha')));

    component.carregarPosicoes();

    expect(component.posicoes.length).toBe(0);
    expect(component.carregando).toBeFalse();
    expect(component.erro).toBeDefined();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-posicoes\lista-posicoes.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { PosicaoPatio, ServicoPatioService } from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

@Component({
  selector: 'app-lista-posicoes',
  templateUrl: './lista-posicoes.component.html',
  styleUrls: ['./lista-posicoes.component.css']
})
export class ListaPosicoesComponent implements OnInit {
  posicoes: PosicaoPatio[] = [];
  carregando = false;
  erro?: string;

  constructor(
    private readonly servicoPatio: ServicoPatioService,
    private readonly sanitizador: SanitizadorConteudoService
  ) { }

  ngOnInit(): void {
    this.carregarPosicoes();
  }

  carregarPosicoes(): void {
    this.carregando = true;
    this.erro = undefined;
    this.servicoPatio.listarPosicoes().subscribe({
      next: (posicoes) => {
        this.posicoes = posicoes;
        this.carregando = false;
      },
      error: () => {
        this.erro = 'Não foi possível carregar as posições do pátio. Tente novamente em instantes.';
        this.carregando = false;
      }
    });
  }

  descricaoOcupacao(posicao: PosicaoPatio): string {
    return posicao.ocupada ? 'Ocupada' : 'Livre';
  }

  sanitizar(valor: string | null | undefined): string {
    return this.sanitizador.sanitizar(valor ?? '');
  }

  identificarPosicao(index: number, posicao: PosicaoPatio): number | undefined {
    return posicao?.id ?? index;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-trabalho-patio\lista-trabalho-patio.component.css ----- 
.lista-trabalho-patio {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
}

.cabecalho {
  display: flex;
  justify-content: space-between;
  gap: 1rem;
  flex-wrap: wrap;
}

.cabecalho h1 {
  margin: 0;
  font-size: 1.8rem;
  color: #123354;
}

.cabecalho p {
  margin: 0.25rem 0 0 0;
  color: #48617a;
}

.acoes {
  display: flex;
  align-items: flex-end;
  gap: 0.75rem;
}

.rotulo-filtro {
  font-size: 0.85rem;
  color: #48617a;
}

select {
  padding: 0.5rem;
  border-radius: 6px;
  border: 1px solid #c7d1dc;
  font-size: 0.95rem;
}

button {
  padding: 0.55rem 1rem;
  border: none;
  border-radius: 6px;
  background-color: #0b6efd;
  color: #ffffff;
  cursor: pointer;
  font-weight: 600;
  transition: background-color 0.2s ease;
}

button:disabled {
  background-color: #a7b9d0;
  cursor: not-allowed;
}

.estado {
  margin: 0;
  font-size: 0.95rem;
  color: #48617a;
}

.estado.erro {
  color: #c0392b;
}

.estado.sucesso {
  color: #1e8449;
}

.estado.pequeno {
  font-size: 0.85rem;
}

.cartoes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1rem;
}

.cartao {
  padding: 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background-color: #f8fbff;
}

.cartao-cabecalho {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.75rem;
}

.cartao-cabecalho h2 {
  margin: 0;
  font-size: 1.2rem;
  color: #123354;
}

.status {
  padding: 0.3rem 0.8rem;
  border-radius: 999px;
  font-size: 0.85rem;
  font-weight: 600;
  color: #ffffff;
}

.status.pendente {
  background-color: #f1c40f;
}

.status.execucao {
  background-color: #2980b9;
}

.status.concluida {
  background-color: #27ae60;
}

.detalhes {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 0.75rem;
  margin: 0;
}

.detalhes div {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.detalhes dt {
  font-size: 0.85rem;
  color: #48617a;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.detalhes dd {
  margin: 0;
  font-weight: 600;
  color: #123354;
}

.acoes-cartao {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.botao {
  padding: 0.55rem 1rem;
  border-radius: 6px;
  border: none;
  cursor: pointer;
  font-weight: 600;
}

.botao-primario {
  background-color: #0b6efd;
  color: #ffffff;
}

.botao-primario:disabled {
  background-color: #a7b9d0;
}

.botao-sucesso {
  background-color: #27ae60;
  color: #ffffff;
}

.botao-sucesso:disabled {
  background-color: #a9d5b8;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-trabalho-patio\lista-trabalho-patio.component.html ----- 
<section class="lista-trabalho-patio" aria-live="polite">
  <header class="cabecalho">
    <div>
      <h1>Lista de Trabalho do Pátio</h1>
      <p>O operador consulta as tarefas pendentes e confirma as movimentações assim que concluir a execução física.</p>
    </div>
    <div class="acoes">
      <label for="filtro-status" class="rotulo-filtro">Filtrar por status</label>
      <select id="filtro-status" [value]="filtroStatus ?? ''" (change)="alterarFiltro($event)">
        <option value="">Todos</option>
        <option value="PENDENTE">Pendentes</option>
        <option value="EM_EXECUCAO">Em execução</option>
        <option value="CONCLUIDA">Concluídas</option>
      </select>
      <button type="button" (click)="carregarOrdens(filtroStatus)" [disabled]="carregando">Atualizar lista</button>
    </div>
  </header>

  <p class="estado" *ngIf="carregando">Carregando ordens do pátio...</p>
  <p class="estado erro" *ngIf="mensagemErro">{{ sanitizar(mensagemErro) }}</p>
  <p class="estado sucesso" *ngIf="mensagemSucesso">{{ sanitizar(mensagemSucesso) }}</p>

  <section class="cartoes" *ngIf="!carregando && ordens.length">
    <article class="cartao" *ngFor="let ordem of ordens">
      <header class="cartao-cabecalho">
        <h2>Contêiner {{ sanitizar(ordem.codigoConteiner) }}</h2>
        <span class="status" [ngClass]="{
            'pendente': ordem.statusOrdem === 'PENDENTE',
            'execucao': ordem.statusOrdem === 'EM_EXECUCAO',
            'concluida': ordem.statusOrdem === 'CONCLUIDA'
          }">{{ descricaoStatus(ordem.statusOrdem) }}</span>
      </header>
      <dl class="detalhes">
        <div>
          <dt>Movimento</dt>
          <dd>{{ descricaoMovimento(ordem.tipoMovimento) }}</dd>
        </div>
        <div>
          <dt>Destino operacional</dt>
          <dd>Linha {{ ordem.linhaDestino }}, Coluna {{ ordem.colunaDestino }}, Camada {{ sanitizar(ordem.camadaDestino) }}</dd>
        </div>
        <div>
          <dt>Status após conclusão</dt>
          <dd>{{ sanitizar(ordem.statusConteinerDestino) }}</dd>
        </div>
        <div>
          <dt>Última atualização</dt>
          <dd>{{ ordem.atualizadoEm | date:'dd/MM/yyyy HH:mm' }}</dd>
        </div>
      </dl>
      <footer class="acoes-cartao">
        <button type="button"
                class="botao botao-primario"
                (click)="iniciarOrdem(ordem)"
                [disabled]="!podeIniciar(ordem) || estaAtualizando(ordem)">
          Assumir tarefa
        </button>
        <button type="button"
                class="botao botao-sucesso"
                (click)="concluirOrdem(ordem)"
                [disabled]="!podeConcluir(ordem) || estaAtualizando(ordem)">
          Marcar como concluída
        </button>
      </footer>
      <p class="estado pequeno" *ngIf="estaAtualizando(ordem)">Atualizando ordem...</p>
    </article>
  </section>

  <p class="estado" *ngIf="!carregando && !ordens.length && !mensagemErro">
    Nenhuma ordem foi encontrada para os filtros selecionados.
  </p>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\lista-trabalho-patio\lista-trabalho-patio.component.ts ----- 
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { finalize } from 'rxjs/operators';
import {
  OrdemTrabalhoPatio,
  ServicoListaTrabalhoPatioService,
  StatusOrdemTrabalhoPatio
} from '../../service/servico-lista-trabalho-patio/servico-lista-trabalho-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

@Component({
  selector: 'app-lista-trabalho-patio',
  templateUrl: './lista-trabalho-patio.component.html',
  styleUrls: ['./lista-trabalho-patio.component.css']
})
export class ListaTrabalhoPatioComponent implements OnInit, OnDestroy {
  ordens: OrdemTrabalhoPatio[] = [];
  carregando = false;
  mensagemErro?: string;
  mensagemSucesso?: string;
  ordensEmAtualizacao = new Set<number>();
  filtroStatus?: StatusOrdemTrabalhoPatio;
  private inscricao?: Subscription;

  constructor(
    private readonly servicoListaTrabalho: ServicoListaTrabalhoPatioService,
    private readonly sanitizador: SanitizadorConteudoService
  ) {}

  ngOnInit(): void {
    this.carregarOrdens();
  }

  ngOnDestroy(): void {
    this.inscricao?.unsubscribe();
  }

  carregarOrdens(status?: StatusOrdemTrabalhoPatio): void {
    this.filtroStatus = status;
    this.carregando = true;
    this.mensagemErro = undefined;
    this.mensagemSucesso = undefined;
    this.inscricao?.unsubscribe();
    this.inscricao = this.servicoListaTrabalho.listarOrdens(status)
      .pipe(finalize(() => (this.carregando = false)))
      .subscribe({
        next: (ordens) => {
          this.ordens = ordens;
        },
        error: () => {
          this.mensagemErro = 'Não foi possível carregar a lista de trabalho do pátio.';
          this.ordens = [];
        }
      });
  }

  alterarFiltro(evento: Event): void {
    const alvo = evento.target as HTMLSelectElement;
    const valor = (alvo?.value ?? '').trim();
    const novoStatus = valor === '' ? undefined : (valor as StatusOrdemTrabalhoPatio);
    this.carregarOrdens(novoStatus);
  }

  iniciarOrdem(ordem: OrdemTrabalhoPatio): void {
    if (!this.podeIniciar(ordem)) {
      return;
    }
    this.atualizarStatus(ordem, 'EM_EXECUCAO');
  }

  concluirOrdem(ordem: OrdemTrabalhoPatio): void {
    if (!this.podeConcluir(ordem)) {
      return;
    }
    this.atualizarStatus(ordem, 'CONCLUIDA');
  }

  podeIniciar(ordem: OrdemTrabalhoPatio): boolean {
    return ordem.statusOrdem === 'PENDENTE';
  }

  podeConcluir(ordem: OrdemTrabalhoPatio): boolean {
    return ordem.statusOrdem === 'EM_EXECUCAO';
  }

  estaAtualizando(ordem: OrdemTrabalhoPatio): boolean {
    return this.ordensEmAtualizacao.has(ordem.id);
  }

  descricaoStatus(status: StatusOrdemTrabalhoPatio): string {
    switch (status) {
      case 'PENDENTE':
        return 'Pendente';
      case 'EM_EXECUCAO':
        return 'Em execução';
      case 'CONCLUIDA':
        return 'Concluída';
      default:
        return status;
    }
  }

  descricaoMovimento(tipo: string): string {
    const texto = tipo.replace(/_/g, ' ').toLowerCase();
    return texto.charAt(0).toUpperCase() + texto.slice(1);
  }

  sanitizar(valor?: string): string {
    return this.sanitizador.sanitizar(valor ?? '');
  }

  private atualizarStatus(ordem: OrdemTrabalhoPatio, novoStatus: StatusOrdemTrabalhoPatio): void {
    this.ordensEmAtualizacao.add(ordem.id);
    this.mensagemErro = undefined;
    this.mensagemSucesso = undefined;
    this.servicoListaTrabalho.atualizarStatus(ordem.id, novoStatus)
      .pipe(finalize(() => this.ordensEmAtualizacao.delete(ordem.id)))
      .subscribe({
        next: (atualizada) => {
          const indice = this.ordens.findIndex((item) => item.id === atualizada.id);
          if (indice >= 0) {
            this.ordens[indice] = atualizada;
          }
          this.mensagemSucesso = `Ordem do contêiner ${this.sanitizar(atualizada.codigoConteiner)} atualizada com sucesso.`;
        },
        error: () => {
          this.mensagemErro = 'Não foi possível atualizar o status da ordem.';
        }
      });
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\mapa-patio\mapa-patio.component.css ----- 
.mapa-patio-container {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  padding: 1.5rem;
  background-color: #f5f7fa;
  border-radius: 12px;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
}

.cabecalho h2 {
  margin: 0;
  font-size: 1.8rem;
  color: #1f2b4d;
}

.cabecalho .descricao {
  margin: 0.25rem 0 0;
  color: #4b5563;
}

.status-carregamento {
  color: #1d4ed8;
  margin-top: 0.5rem;
}

.status-erro {
  color: #b91c1c;
  font-weight: 600;
  margin-top: 0.5rem;
}

.status-atualizacao {
  color: #2563eb;
  margin-top: 0.5rem;
}

.painel-filtros {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 1rem;
  background-color: #ffffff;
  padding: 1rem;
  border-radius: 10px;
  border: 1px solid #e5e7eb;
}

.filtro-grupo label {
  display: block;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: #1f2937;
}

.filtro-grupo select {
  width: 100%;
  min-height: 90px;
  border: 1px solid #cbd5f5;
  border-radius: 6px;
  padding: 0.5rem;
  font-size: 0.95rem;
  background-color: #f9fafb;
  color: #1f2937;
}

.painel-mapa {
  background-color: #ffffff;
  border-radius: 12px;
  padding: 1rem;
  border: 1px solid #e2e8f0;
  overflow: auto;
}

.mapa-grid {
  display: grid;
  gap: 0.25rem;
  position: relative;
  background-image: linear-gradient(90deg, rgba(99, 102, 241, 0.08) 1px, transparent 1px),
    linear-gradient(rgba(99, 102, 241, 0.08) 1px, transparent 1px);
  background-size: 72px 72px;
  padding: 0.5rem;
  border-radius: 8px;
}

.mapa-celula {
  border: 1px dashed rgba(99, 102, 241, 0.15);
  border-radius: 6px;
  background-color: rgba(255, 255, 255, 0.8);
}

.mapa-conteiner {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 6px;
  padding: 0.5rem;
  color: #fff;
  font-weight: 600;
  box-shadow: 0 4px 12px rgba(17, 24, 39, 0.2);
}

.mapa-conteiner .conteiner-codigo {
  font-size: 0.95rem;
}

.mapa-conteiner .conteiner-detalhe {
  font-size: 0.75rem;
  font-weight: 400;
}

.mapa-equipamento {
  background-color: rgba(14, 116, 144, 0.85);
  color: #ffffff;
  border-radius: 6px;
  padding: 0.3rem 0.4rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-size: 0.75rem;
  box-shadow: 0 4px 10px rgba(14, 116, 144, 0.25);
}

.equipamento-identificador {
  font-weight: 600;
}

.mapa-vazio {
  text-align: center;
  padding: 1rem;
  background-color: #fff7ed;
  border: 1px solid #f97316;
  border-radius: 8px;
  color: #9a3412;
}

.legenda {
  background-color: #ffffff;
  border-radius: 10px;
  padding: 1rem;
  border: 1px solid #e5e7eb;
}

.legenda h3 {
  margin: 0 0 0.75rem;
  color: #1f2b4d;
}

.legenda ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: grid;
  gap: 0.5rem;
}

.legenda li {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #1f2937;
}

.legenda-cor {
  width: 18px;
  height: 18px;
  border-radius: 4px;
  display: inline-block;
}

.status-aguardando {
  background: linear-gradient(135deg, #10b981, #34d399);
}

.status-inspecionando {
  background: linear-gradient(135deg, #fbbf24, #f59e0b);
}

.status-despachado {
  background: linear-gradient(135deg, #2563eb, #3b82f6);
}

.status-retido {
  background: linear-gradient(135deg, #ef4444, #dc2626);
}

.status-danificado {
  background: linear-gradient(135deg, #7c3aed, #8b5cf6);
}

.status-desconhecido {
  background: linear-gradient(135deg, #6b7280, #9ca3af);
}

@media (max-width: 768px) {
  .mapa-patio-container {
    padding: 1rem;
  }

  .painel-filtros {
    grid-template-columns: 1fr;
  }

  .mapa-grid {
    background-size: 60px 60px;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\mapa-patio\mapa-patio.component.html ----- 
<div class="mapa-patio-container" [formGroup]="formularioFiltros">
  <div class="cabecalho">
    <h2>Mapa 2D do Pátio</h2>
    <p class="descricao">Monitoramento em tempo real com camadas de equipamentos e filtros operacionais.</p>
    <div class="status-carregamento" *ngIf="carregando || carregandoFiltros">Carregando informações do pátio...</div>
    <div class="status-erro" *ngIf="erro">{{ erro }}</div>
    <div class="status-atualizacao" *ngIf="mapaFiltrado">
      Última atualização: {{ mapaFiltrado.atualizadoEm | date: 'dd/MM/yyyy HH:mm:ss' }}
    </div>
  </div>

  <section class="painel-filtros" *ngIf="filtrosDisponiveis">
    <div class="filtro-grupo">
      <label for="filtro-status">Status dos contêineres</label>
      <select id="filtro-status" multiple formControlName="status">
        <option *ngFor="let status of filtrosDisponiveis.statusDisponiveis" [value]="status">{{ sanitizarTexto(status) }}</option>
      </select>
    </div>
    <div class="filtro-grupo">
      <label for="filtro-tipo-carga">Tipo de carga</label>
      <select id="filtro-tipo-carga" multiple formControlName="tiposCarga">
        <option *ngFor="let tipo of filtrosDisponiveis.tiposCargaDisponiveis" [value]="tipo">{{ sanitizarTexto(tipo) }}</option>
      </select>
    </div>
    <div class="filtro-grupo">
      <label for="filtro-destino">Destino</label>
      <select id="filtro-destino" multiple formControlName="destinos">
        <option *ngFor="let destino of filtrosDisponiveis.destinosDisponiveis" [value]="destino">{{ sanitizarTexto(destino) }}</option>
      </select>
    </div>
    <div class="filtro-grupo">
      <label for="filtro-camada">Camada operacional</label>
      <select id="filtro-camada" multiple formControlName="camadas">
        <option *ngFor="let camada of filtrosDisponiveis.camadasOperacionaisDisponiveis" [value]="camada">{{ sanitizarTexto(camada) }}</option>
      </select>
    </div>
    <div class="filtro-grupo">
      <label for="filtro-equipamento">Tipos de equipamento</label>
      <select id="filtro-equipamento" multiple formControlName="tiposEquipamento">
        <option *ngFor="let tipoEquipamento of filtrosDisponiveis.tiposEquipamentoDisponiveis" [value]="tipoEquipamento">{{ sanitizarTexto(tipoEquipamento) }}</option>
      </select>
    </div>
  </section>

  <section class="painel-mapa" *ngIf="mapaFiltrado && mapaFiltrado.totalLinhas > 0 && mapaFiltrado.totalColunas > 0">
    <div class="mapa-grid"
         [style.gridTemplateColumns]="obterTemplateColunas()"
         [style.gridTemplateRows]="obterTemplateLinhas()">
      <div class="mapa-celula" *ngFor="let celula of obterCelulas(); let indice = index"
           [attr.data-linha]="obterLinha(indice) + 1"
           [attr.data-coluna]="obterColuna(indice) + 1">
      </div>
      <div class="mapa-conteiner" *ngFor="let conteiner of mapaFiltrado.conteineres"
           [style.gridRow]="(conteiner.linha + 1)"
           [style.gridColumn]="(conteiner.coluna + 1)"
           [ngClass]="obterClasseStatus(conteiner.status)"
           aria-label="Contêiner {{ conteiner.codigo }}"
           role="button">
        <span class="conteiner-codigo">{{ sanitizarTexto(conteiner.codigo) }}</span>
        <span class="conteiner-detalhe">{{ sanitizarTexto(conteiner.tipoCarga) }}</span>
        <span class="conteiner-detalhe">{{ sanitizarTexto(conteiner.destino) }}</span>
      </div>
      <div class="mapa-equipamento" *ngFor="let equipamento of mapaFiltrado.equipamentos"
           [style.gridRow]="(equipamento.linha + 1)"
           [style.gridColumn]="(equipamento.coluna + 1)"
           aria-label="Equipamento {{ equipamento.identificador }}"
           role="button">
        <span class="equipamento-identificador">{{ sanitizarTexto(equipamento.identificador) }}</span>
        <span class="equipamento-tipo">{{ sanitizarTexto(equipamento.tipoEquipamento) }}</span>
      </div>
    </div>
  </section>

  <div class="mapa-vazio" *ngIf="mapaFiltrado && mapaFiltrado.conteineres.length === 0 && mapaFiltrado.equipamentos.length === 0">
    Nenhum item atende aos filtros selecionados.
  </div>

  <section class="legenda">
    <h3>Legenda operacional</h3>
    <ul>
      <li><span class="legenda-cor status-aguardando"></span> Aguardando retirada</li>
      <li><span class="legenda-cor status-inspecionando"></span> Em inspeção</li>
      <li><span class="legenda-cor status-despachado"></span> Despachado</li>
      <li><span class="legenda-cor status-retido"></span> Retido</li>
      <li><span class="legenda-cor status-danificado"></span> Danificado</li>
    </ul>
  </section>
</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\patio\mapa-patio\mapa-patio.component.ts ----- 
import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { Subscription } from 'rxjs';
import {
  EventoTempoRealMapa,
  FiltrosMapaPatio,
  MapaPatioResposta,
  ServicoPatioService
} from '../../service/servico-patio/servico-patio.service';
import { SanitizadorConteudoService } from '../../service/sanitizacao/sanitizador-conteudo.service';

interface FiltroFormulario {
  status: FormControl<string[]>;
  tiposCarga: FormControl<string[]>;
  destinos: FormControl<string[]>;
  camadas: FormControl<string[]>;
  tiposEquipamento: FormControl<string[]>;
}

@Component({
  selector: 'app-mapa-patio',
  templateUrl: './mapa-patio.component.html',
  styleUrls: ['./mapa-patio.component.css']
})
export class MapaPatioComponent implements OnInit, OnDestroy {
  filtrosDisponiveis?: FiltrosMapaPatio;
  formularioFiltros: FormGroup<FiltroFormulario>;
  mapaCompleto?: MapaPatioResposta;
  mapaFiltrado?: MapaPatioResposta;
  carregando = false;
  carregandoFiltros = false;
  erro?: string;
  inscricaoTempoReal?: Subscription;
  inscricaoFormulario?: Subscription;

  constructor(
    private readonly servicoPatio: ServicoPatioService,
    private readonly formBuilder: FormBuilder,
    private readonly sanitizador: SanitizadorConteudoService
  ) {
    this.formularioFiltros = this.formBuilder.group({
      status: this.formBuilder.control<string[]>([]),
      tiposCarga: this.formBuilder.control<string[]>([]),
      destinos: this.formBuilder.control<string[]>([]),
      camadas: this.formBuilder.control<string[]>([]),
      tiposEquipamento: this.formBuilder.control<string[]>([])
    });
  }

  ngOnInit(): void {
    this.carregarFiltros();
    this.carregarMapaCompleto();
    this.inscricaoTempoReal = this.servicoPatio.iniciarMonitoramentoTempoReal().subscribe({
      next: (evento) => this.processarEventoTempoReal(evento),
      error: (erro) => {
        console.error('Erro ao receber atualizações de pátio', erro);
        this.erro = 'Falha na atualização em tempo real. Atualize a página para reconectar.';
      }
    });
    this.inscricaoFormulario = this.formularioFiltros.valueChanges.subscribe(() => this.aplicarFiltrosLocais());
  }

  ngOnDestroy(): void {
    this.inscricaoTempoReal?.unsubscribe();
    this.inscricaoFormulario?.unsubscribe();
  }

  obterClasseStatus(status: string): string {
    switch ((status ?? '').toUpperCase()) {
      case 'AGUARDANDO_RETIRADA':
        return 'status-aguardando';
      case 'INSPECIONANDO':
        return 'status-inspecionando';
      case 'DESPACHADO':
        return 'status-despachado';
      case 'RETIDO':
        return 'status-retido';
      case 'DANIFICADO':
        return 'status-danificado';
      default:
        return 'status-desconhecido';
    }
  }

  obterCelulas(): number[] {
    const linhas = this.mapaFiltrado?.totalLinhas ?? 0;
    const colunas = this.mapaFiltrado?.totalColunas ?? 0;
    return Array.from({ length: linhas * colunas }, (_, indice) => indice);
  }

  obterLinha(indice: number): number {
    const colunas = this.mapaFiltrado?.totalColunas ?? 1;
    return Math.floor(indice / colunas);
  }

  obterColuna(indice: number): number {
    const colunas = this.mapaFiltrado?.totalColunas ?? 1;
    return indice % colunas;
  }

  obterTemplateColunas(): string {
    const colunas = this.mapaFiltrado?.totalColunas ?? 0;
    return `repeat(${colunas}, minmax(70px, 1fr))`;
  }

  obterTemplateLinhas(): string {
    const linhas = this.mapaFiltrado?.totalLinhas ?? 0;
    return `repeat(${linhas}, minmax(70px, 1fr))`;
  }

  sanitizarTexto(texto: string | null | undefined): string {
    return this.sanitizador.sanitizar(texto ?? '');
  }

  private carregarFiltros(): void {
    this.carregandoFiltros = true;
    this.servicoPatio.obterFiltros().subscribe({
      next: (filtros) => {
        this.filtrosDisponiveis = filtros;
        this.carregandoFiltros = false;
      },
      error: () => {
        this.erro = 'Não foi possível carregar os filtros do pátio.';
        this.carregandoFiltros = false;
      }
    });
  }

  private carregarMapaCompleto(): void {
    this.carregando = true;
    this.servicoPatio.obterMapa({}).subscribe({
      next: (mapa) => {
        this.mapaCompleto = mapa;
        this.aplicarFiltrosLocais();
        this.carregando = false;
      },
      error: () => {
        this.erro = 'Não foi possível carregar o mapa do pátio.';
        this.carregando = false;
      }
    });
  }

  private processarEventoTempoReal(evento: EventoTempoRealMapa): void {
    if (!evento || !evento.mapa) {
      return;
    }
    this.mapaCompleto = evento.mapa;
    this.aplicarFiltrosLocais();
  }

  private aplicarFiltrosLocais(): void {
    if (!this.mapaCompleto) {
      return;
    }
    const valores = this.formularioFiltros.getRawValue();
    const filtrosAtivos = {
      status: new Set((valores.status ?? []).map((valor) => valor.toUpperCase())),
      tiposCarga: new Set((valores.tiposCarga ?? []).map((valor) => valor.toUpperCase())),
      destinos: new Set((valores.destinos ?? []).map((valor) => valor.toUpperCase())),
      camadas: new Set((valores.camadas ?? []).map((valor) => valor.toUpperCase())),
      tiposEquipamento: new Set((valores.tiposEquipamento ?? []).map((valor) => valor.toUpperCase()))
    };

    const conteineresFiltrados = this.mapaCompleto.conteineres.filter((conteiner) => {
      const statusValido = filtrosAtivos.status.size === 0 || filtrosAtivos.status.has((conteiner.status ?? '').toUpperCase());
      const tipoCargaValido = filtrosAtivos.tiposCarga.size === 0 || filtrosAtivos.tiposCarga.has((conteiner.tipoCarga ?? '').toUpperCase());
      const destinoValido = filtrosAtivos.destinos.size === 0 || filtrosAtivos.destinos.has((conteiner.destino ?? '').toUpperCase());
      const camadaValida = filtrosAtivos.camadas.size === 0 || filtrosAtivos.camadas.has((conteiner.camadaOperacional ?? '').toUpperCase());
      return statusValido && tipoCargaValido && destinoValido && camadaValida;
    });

    const equipamentosFiltrados = this.mapaCompleto.equipamentos.filter((equipamento) => {
      return filtrosAtivos.tiposEquipamento.size === 0 || filtrosAtivos.tiposEquipamento.has((equipamento.tipoEquipamento ?? '').toUpperCase());
    });

    this.mapaFiltrado = {
      ...this.mapaCompleto,
      conteineres: conteineresFiltrados,
      equipamentos: equipamentosFiltrados
    };
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\pipes\texto-seguro.pipe.spec.ts ----- 
import { TextoSeguroPipe } from './texto-seguro.pipe';
import { SanitizadorConteudoService } from '../service/sanitizacao/sanitizador-conteudo.service';

describe('TextoSeguroPipe', () => {
  it('deve remover scripts e escapar caracteres perigosos', () => {
    const sanitizador = new SanitizadorConteudoService();
    const pipe = new TextoSeguroPipe(sanitizador);

    const resultado = pipe.transform("<script>alert('xss')</script><b>Texto</b>");

    expect(resultado).toBe('Texto');
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\pipes\texto-seguro.pipe.ts ----- 
import { Pipe, PipeTransform } from '@angular/core';
import { SanitizadorConteudoService } from '../service/sanitizacao/sanitizador-conteudo.service';

@Pipe({
  name: 'textoSeguro'
})
export class TextoSeguroPipe implements PipeTransform {
  constructor(private readonly sanitizadorConteudo: SanitizadorConteudoService) {}

  transform(valor: string | null | undefined): string {
    return this.sanitizadorConteudo.sanitizar(valor);
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\privacidade\privacidade.component.css ----- 
.privacidade {
  padding: 1.5rem;
}

.privacidade ul {
  list-style: none;
  padding: 0;
}

.privacidade li {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem 0;
  border-bottom: 1px solid #ececec;
}

.status {
  font-weight: 600;
}

.status.ativo {
  color: #2d9d4d;
}

.status.inativo {
  color: #c53030;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\privacidade\privacidade.component.html ----- 
<section class="privacidade">
  <h2>Centro de Privacidade</h2>
  <p>Ajuste como seus dados são utilizados dentro da plataforma.</p>
  <div *ngIf="carregando" class="estado-carregamento" aria-live="polite">
    Carregando opções de privacidade...
  </div>

  <div *ngIf="!carregando && mensagemErro" class="estado-erro" role="alert">
    <p>{{ mensagemErro }}</p>
    <button type="button" class="btn primario" (click)="recarregar()">Tentar novamente</button>
  </div>

  <ul *ngIf="!carregando && !mensagemErro">
    <li *ngFor="let opcao of opcoes">
      <span class="status" [class.ativo]="opcao.ativo" [class.inativo]="!opcao.ativo">
        {{ opcao.ativo ? 'Ativo' : 'Inativo' }}
      </span>
      {{ opcao.descricao | textoSeguro }}
    </li>
  </ul>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\privacidade\privacidade.component.ts ----- 
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject, of } from 'rxjs';
import { catchError, finalize, takeUntil } from 'rxjs/operators';
import { OpcaoPrivacidade, PrivacidadeService } from '../service/privacidade/privacidade.service';

@Component({
  selector: 'app-privacidade',
  templateUrl: './privacidade.component.html',
  styleUrls: ['./privacidade.component.css']
})
export class PrivacidadeComponent implements OnInit, OnDestroy {
  opcoes: OpcaoPrivacidade[] = [];
  carregando = false;
  mensagemErro: string | null = null;

  private readonly destruir$ = new Subject<void>();

  constructor(private readonly privacidadeService: PrivacidadeService) {}

  ngOnInit(): void {
    this.carregarOpcoes();
  }

  ngOnDestroy(): void {
    this.destruir$.next();
    this.destruir$.complete();
  }

  recarregar(): void {
    this.carregarOpcoes();
  }

  private carregarOpcoes(): void {
    this.carregando = true;
    this.mensagemErro = null;
    this.privacidadeService
      .listarOpcoes()
      .pipe(
        takeUntil(this.destruir$),
        catchError(() => {
          this.mensagemErro = 'Não foi possível carregar as opções de privacidade. Tente novamente.';
          return of([]);
        }),
        finalize(() => {
          this.carregando = false;
        })
      )
      .subscribe((opcoes) => {
        this.opcoes = opcoes;
      });
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-cadastro\role-cadastro.component.css ----- 
/* role-cadastro.component.css */

.modal {
    position: fixed; 
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); 
    z-index: 1000; 
    display: flex;
    justify-content: center;
    align-items: center;
	
  }
  
  .popup-content {
    position: absolute;
    background-color: #fff; 
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); 

  }
  

  .close {
    position: absolute; 
    top: 10px; 
    right: 10px; 
    font-size: 24px; 
    cursor: pointer; 
    color: #333; 
  }

  .save-button-container {
    text-align: right;
  }

  
  .box {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	margin: auto;
	width: 420px;
	height: 420px;
	background: #ffffff27;
	border-radius: 8px;
	overflow: hidden;
	z-index: 2000; /* Índice de empilhamento alto para sobrepor outros elementos */
	
   
  }

  
.box::before 
{
	content: '';
	z-index: 1;
	position: absolute;
	top: -50%;
	left: -50%;
	width: 380px;
	height: 420px;
	transform-origin: bottom right;
	background: linear-gradient(0deg,transparent,#2b5aa7,#2b5aa7);
	animation: animate 6s linear infinite;
}
.box::after 
{
	content: '';
	z-index: 1;
	position: absolute;
	top: -50%;
	left: -50%;
	width: 380px;
	height: 420px;
	transform-origin: bottom right;
	background: linear-gradient(0deg,transparent,#1a95d9,#1a95d9);
  /* 	background: linear-gradient(0deg,transparent,#45f3ff,#45f3ff); */
	animation: animate 6s linear infinite;
	animation-delay: -3s;
}
@keyframes animate 
{
	0%
	{
		transform: rotate(0deg);
	}
	100%
	{
		transform: rotate(360deg);
	}
}
form 
{
	position: absolute;
	inset: 2px;
	background: #ffffff;
	padding: 50px 40px;
	border-radius: 8px;
	z-index: 2;
	display: flex;
	flex-direction: column;
	overflow-y: auto;
} 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-cadastro\role-cadastro.component.html ----- 
<!-- role-cadastro.component.html -->
<div class="popup-content box">
  <form [formGroup]="form" (ngSubmit)="onSubmit()">
    <span class="close" (click)="closePopup()">&times;</span> <br>
    <h2>Cadastrar ou Editar Role</h2>
    <div class="form-group">
      <label for="roleName">Role Name:</label>
      <input type="text" id="roleName" formControlName="roleName" class="form-control">
    </div>
    <div class="form-group">
      <label for="roleDescricao">Descrição:</label>
      <input type="text" id="roleDescricao" formControlName="roleDescricao" class="form-control">
    </div>
    <br>
    <br>
    <div class="save-button-container">
      <button class="btn btn-primary">Salvar</button>
    </div>
  </form>
</div>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-cadastro\role-cadastro.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RoleCadastroComponent } from './role-cadastro.component';

describe('RoleCadastroComponent', () => {
  let component: RoleCadastroComponent;
  let fixture: ComponentFixture<RoleCadastroComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [RoleCadastroComponent]
    });
    fixture = TestBed.createComponent(RoleCadastroComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-cadastro\role-cadastro.component.ts ----- 
/* role-cadastro.component.ts */
import { Component, Input, OnInit } from '@angular/core';
import { PopupService } from '../../service/popupService';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-role-cadastro',
  templateUrl: './role-cadastro.component.html',
  styleUrls: ['./role-cadastro.component.css']
})
export class RoleCadastroComponent implements OnInit {
  form!: FormGroup;

  showPopup = true;
  entityType = '';
  @Input() show: boolean = true; // Certifique-se de que 'show' é uma entrada

  constructor(
    private formBuilder: FormBuilder,
    private popupService: PopupService) {
    this.popupService.showPopup$.subscribe(popup => {
      console.log('Recebido:', popup); // Adicione este log
      this.entityType = popup.type;
      this.showPopup = popup.show;
    });
  }

  ngOnInit(): void {
    this.form = this.formBuilder.group({
      roleName: ['', Validators.required],
      roleDescricao: ['']
    });
  }

  saveRole() {
    // Lógica para salvar o Role com o nome fornecido
    console.log('Salvando Role com os dados:', this.form.value);
  }

  closePopup() {
    this.popupService.closePopup();
  }

  onSubmit() {}

}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-tabela\role-tabela.component.css ----- 
.role-container {
    max-width: 960px;
    margin: 3em auto;
    padding: 2em;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.role-container h1 {
    color: #303030;
    font-size: 2em;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    margin-bottom: 1em;
}

.role-form label,
.role-form input,
.role-form button {
    display: block;
    margin-bottom: 1em;
}

.role-form button {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.table {
    width: 100%;
    margin-top: 1em;
    border-collapse: collapse;
}

.table th,
.table td {
    padding: 0.5em;  /* alterado o valor de padding para diminuir a altura das linhas */
    border: 1px solid #ddd;
    text-align: center;
    vertical-align: middle;
}

.table th {
    background-color: #f8f8f8;
    color: #333;
}

.table td {
    color: #333;
}

.table tr:hover {
    background-color: #f5f5f5;
}

.table tr.selected {
    background-color: #23498657;
  }
  

.btn-primary {
    color: #fff;
    background-color: #007bff;
    border-color: #007bff;
}

.btn-danger {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
}

.btn {
    padding: 0.5em 1em;
    text-decoration: none;
    border-radius: 4px;
    cursor: pointer;
}

.btn-primary:hover {
    background-color: #0069d9;
    border-color: #0062cc;
}

.btn-danger:hover {
    background-color: #c82333;
    border-color: #bd2130;
}

.invalid-feedback {
    color: red;
}

.alert {
    margin-top: 15px;
}

.spaced-button {
    margin-right: 10px; /* Altere para a quantidade de espaço que você deseja */
}


.popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .popup-content {
    position: relative;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  .close {
    position: absolute;
    top: 10px;
    right: 10px;
    cursor: pointer;
    font-size: 20px;
  }
   
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-tabela\role-tabela.component.html ----- 
<!--role.component.html-->
<app-context-menu #contextMenu (optionSelected)="contextMenuOptionSelected($event)"></app-context-menu>

<app-dynamic-table 
    #gridHoleTable 
    [columns]="['Role ID', 'Role Name']" 
    [data]="roles"
    [selectedTab]="selectedTab"
    (rightClick)="handleRoleRightClick($event, contextMenu)"
    (gridReady)="onGridTableReady($event)">
</app-dynamic-table>




   
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-tabela\role-tabela.component.spec.ts ----- 
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RoleTabelaComponent } from './role-tabela.component';

describe('RoleComponent', () => {
  let component: RoleTabelaComponent;
  let fixture: ComponentFixture<RoleTabelaComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [RoleTabelaComponent]
    });
    fixture = TestBed.createComponent(RoleTabelaComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\role\role-tabela\role-tabela.component.ts ----- 
/* role.component.ts */
import { Component, OnInit, ViewChild  } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';
import { ServicoAutenticacao } from '../../service/servico-autenticacao/servico-autenticacao.service';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';
//import * as XLSX from 'xlsx';
import { ContextMenuComponent } from '../../context-menu/context-menu.component';
import { ChangeDetectorRef } from '@angular/core';
import { TabService } from '../../navbar/TabService';
import { Renderer2 } from '@angular/core';
import { AfterViewInit } from '@angular/core';
import { PopupService } from '../../service/popupService';
import { ModalComponent } from '../../modal/modal.component';
import { GridReadyEvent } from 'ag-grid-community';

function logMethod(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Classe ${target.constructor.name}: Método ${key} chamado.`);
    return originalMethod.apply(this, args);
  };
  return descriptor;
}




@Component({
  selector: 'app-role-tabela',
  templateUrl: './role-tabela.component.html',
  styleUrls: ['./role-tabela.component.css']
})
export class RoleTabelaComponent  implements OnInit, AfterViewInit {

  // Nome do papel
  roleName: string = "";
  showPopup = false;

  // Lista dos papeis
  roles: any[] = [];
  selectedTab: string = 'role';
  @ViewChild(ModalComponent) modal!: ModalComponent; // Referência ao ModalComponent


  constructor(
    private http: HttpClient,
    private servicoAutenticacao: ServicoAutenticacao,
    private tabService: TabService,
    private renderer: Renderer2,
    private popupService: PopupService,
    private configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {

   

  }


  private boundHandleTableContextMenu: any;



  @ViewChild('gridHoleTable', { static: false }) gridTable: any;


  openPopup() {
    this.showPopup = true;
  }
  
  closePopup() {
    this.showPopup = false;
  }
  

  // Método executado quando o componente é inicializado

  ngOnInit() {
    console.log('Classe RoleComponent: Método ngOnInit chamado.');
   
    this.loadRoles();

    
}

onGridTableReady(event: GridReadyEvent) {
  console.log('Classe RoleComponent: Método onGridTableReady chamado.', event);
  const tableElement = this.gridTable.nativeElement; // Referência direta ao elemento da tabela ag-Grid
  this.renderer.listen(tableElement, 'contextmenu', (event) => {
    event.preventDefault(); // Previne o menu de contexto padrão
    this.contextMenu.menuOptions = ['Editar', 'Deletar'];
    this.contextMenu.position = { x: event.clientX, y: event.clientY };
    this.contextMenu.isOpen = true;
    console.warn('Elemento da tabela ag-Grid encontrado');
  });
}







ngAfterViewInit() {
  console.log('Classe RoleComponent: Método ngAfterViewInit chamado.');
   
  if (this.gridTable && this.gridTable.nativeElement) {
    const tableElement = this.gridTable.nativeElement; // Referência direta ao elemento da tabela ag-Grid
    this.renderer.listen(tableElement, 'contextmenu', (event) => {
      event.preventDefault(); // Previne o menu de contexto padrão
      this.contextMenu.menuOptions = ['Editar', 'Deletar'];
      this.contextMenu.position = { x: event.clientX, y: event.clientY };
      this.contextMenu.isOpen = true;
      console.warn('Elemento da tabela ag-Grid encontrado');
    });
  } else {
    console.warn('Elemento da tabela ag-Grid não encontrado');
  }
}



handleDocumentContextMenu(event: MouseEvent) {
  event.preventDefault();
}

handleRoleContextMenu(event: any): void {
  // Implemente a lógica desejada aqui
  event.preventDefault();
}




handleRoleRightClick(event: any, contextMenu: ContextMenuComponent) {
  //console.log("Evento recebido:", event);

  if (event === null || event.event === undefined) {
    this.contextMenu.isOpen = false; // Feche o menu se o evento for nulo
    return; // Deixe o evento de clique com o botão direito do mouse ser processado normalmente
  }

  const rowData = event.row;
  if (rowData && rowData['Role ID'] !== undefined && rowData['Role ID'] !== null) {
    const roleId = typeof rowData['Role ID'] === 'number' ? rowData['Role ID'] : Number(rowData['Role ID']);
    this.selectedRoleIds = isNaN(roleId) ? [] : [roleId];
  } else {
    this.selectedRoleIds = [];
  }

  // Evite o menu de contexto padrão do navegador e exiba o menu personalizado
  event.event.preventDefault();

  console.log("RoleComponent handleRoleRightClick: Manipulando clique com o botão direito do mouse", event); // Depuração
  this.contextMenu.menuOptions = ['Editar', 'Deletar'];
  this.contextMenu.position = { x: event.event.clientX, y: event.event.clientY };
  this.contextMenu.isOpen = true;
}

@logMethod
closeContextMenu(event: MouseEvent) {
  if (this.contextMenu && !this.contextMenu.elementRef.nativeElement.contains(event.target)) {
    this.contextMenu.isOpen = false;
    event.preventDefault();
    console.log(this.contextMenu.isOpen);
    // Deixe o evento de clique com o botão direito do mouse ser processado normalmente
  }
}



  dragging: boolean = false;

  
  @logMethod
  mouseDown(event: MouseEvent, role: any) {
    event.preventDefault();
    this.dragging = true;
    this.toggleSelection(role);
  }

  @logMethod
  mouseUp(event: MouseEvent) {
    this.dragging = false;
  }


  @logMethod
  mouseover(event: MouseEvent, role: any) {
    if (this.dragging) {
      this.toggleSelection(role);
    }
  }


  @logMethod
  toggleSelection(role: any) {
    const roleId = role && role['Role ID'] !== undefined ? role['Role ID'] : null;
    if (roleId === null) {
      return;
    }

    const normalizedRoleId = typeof roleId === 'number' ? roleId : Number(roleId);
    if (isNaN(normalizedRoleId)) {
      return;
    }

    const index = this.selectedRoleIds.indexOf(normalizedRoleId);

    if (index > -1) {
      // Se o ID já está no array, remova-o
      this.selectedRoleIds.splice(index, 1);
    } else {
      // Se o ID não está no array, adicione-o
      this.selectedRoleIds.push(normalizedRoleId);
    }
  }

  // Carrega os papeis do servidor
  @logMethod
  loadRoles() {
    const storedRolesData = this.tabService.getTabContent(this.selectedTab);
    if (storedRolesData) {
      this.roles = storedRolesData;
      return; // Se já temos dados armazenados, não precisamos fazer a chamada HTTP
    }

    const token = this.servicoAutenticacao.obterUsuarioAtual()?.token;

    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
        'Authorization': 'Bearer ' + token
      })
    };

    const url = this.obterUrlRoles();
    this.http.get<any[]>(url, httpOptions)
      .pipe(catchError((error: any) => {
        window.alert(error.message); // Aqui o popup é criado
        return throwError(error);
      }))
      .subscribe(response => {
        this.roles = response.map(role => {
          return {
            'Role ID': role.id,
            'Role Name': role.name
          }
        });
         // Defina o conteúdo da aba após carregar os papéis
      this.tabService.setTabContent(this.selectedTab, this.roles);
      
      });
}


  // Cria um novo papel
  @logMethod
  createRole() {
    const token = this.servicoAutenticacao.obterUsuarioAtual()?.token;

    const httpOptions = {
        headers: new HttpHeaders({
            'Content-Type':  'application/json',
            'Authorization': 'Bearer ' + token
        })
    };

    // Aplica trim(), toUpperCase() e substitui espaços por sublinhados
    const roleName = this.roleName.trim().toUpperCase().replace(' ', '_');

    const createUrl = this.obterUrlRoles();
    this.http.post(createUrl, { name: roleName }, httpOptions)
        .pipe(catchError((error: any) => {
            window.alert(error.message); // Aqui o popup é criado
            return throwError(error);
        }))
        .subscribe(response => {
            console.log('Papel criado:', response);
            this.loadRoles();
        });
  }

  // Edita um papel existente
  @logMethod
  editRole(roleId: number) {
    const token = this.servicoAutenticacao.obterUsuarioAtual()?.token;

    const httpOptions = {
        headers: new HttpHeaders({
            'Content-Type':  'application/json',
            'Authorization': 'Bearer ' + token
        })
    };

    // Aplica trim(), toUpperCase() e substitui espaços por sublinhados roleName
    const roleName = this.roleName.trim().toUpperCase().replace(' ', '_');

    const updateUrl = `${this.obterUrlRoles()}/${roleId}`;
    this.http.put(updateUrl, { name: roleName}, httpOptions)
        .pipe(catchError((error: any) => {
            window.alert(error.message); // Aqui o popup é criado
            return throwError(error);
        }))
        .subscribe(response => {
            console.log('Papel atualizado:', response);
            this.loadRoles();
        });
  }

  // Desativa um papel
  @logMethod
  deactivateRole(roleId: number) {
    const token = this.servicoAutenticacao.obterUsuarioAtual()?.token;

    const httpOptions = {
        headers: new HttpHeaders({
            'Content-Type':  'application/json',
            'Authorization': 'Bearer ' + token
        })
    };

    const deleteUrl = `${this.obterUrlRoles()}/${roleId}`;
    this.http.delete(deleteUrl, httpOptions)
      .pipe(catchError((error: any) => {
          if (error.status === 409) {
              window.alert('Não é possível deletar o Role pois ele ainda está sendo referenciado por um User.'); 
          } else {
              window.alert(error.message);
          }
          return throwError(error);
      }))
      .subscribe(response => {
          console.log('Role deletado:', response);
          this.loadRoles();
      });
    }
    
    
    selectedRoleId: number | null = null;
    selectedRoleIds: number[] = [];
    @ViewChild('contextMenu') contextMenu!: ContextMenuComponent;

    @logMethod
    rightClick(event: MouseEvent, role: any) {
      console.log("RoleComponent rightClick")
      event.preventDefault();
      
      this.contextMenu.menuOptions = ['Editar', 'Deletar']; // Define as opções aqui
      this.contextMenu.position = { x: event.clientX, y: event.clientY };
      this.contextMenu.isOpen = true;
    }


    /*
    leftClick(event: MouseEvent, role: any) {
      event.preventDefault();

      const roleId = role && role['Role ID'] !== undefined ? role['Role ID'] : null;
      if (roleId === null) {
        return;
      }

      const normalizedRoleId = typeof roleId === 'number' ? roleId : Number(roleId);
      if (isNaN(normalizedRoleId)) {
        return;
      }

      const index = this.selectedRoleIds.indexOf(normalizedRoleId);

      if (index > -1) {
        // Se o ID já está no array, remova-o
        this.selectedRoleIds.splice(index, 1);
      } else {
        // Se o ID não está no array, adicione-o
        this.selectedRoleIds.push(normalizedRoleId);
      }
    }

    */
    @logMethod
    contextMenuOptionSelected(option: string) {
      if (this.selectedRoleIds.length === 0) {
        console.error('Nenhum role foi selecionado');
        return;
      }
      
      switch(option) {
        case 'Deletar':
          // Agora desativamos todos os roles selecionados
          for (const id of this.selectedRoleIds) {
            if (id === null || id === undefined) {
              continue;
            }

            const normalizedId = typeof id === 'number' ? id : Number(id);
            if (!isNaN(normalizedId)) {
              this.deactivateRole(normalizedId);
            }
          }
          break;
      }
      this.contextMenu.isOpen = false;
    }

    
    @logMethod
    ngOnDestroy() {
      document.removeEventListener('click', this.closeContextMenu.bind(this));
      document.removeEventListener('contextmenu', this.boundHandleTableContextMenu);
    }

    private obterUrlRoles(): string {
      return this.configuracaoAplicacao.construirUrlApi('/api/roles');
    }

}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\seguranca\seguranca.component.css ----- 
.seguranca {
  padding: 1.5rem;
}

.seguranca h2 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.seguranca ul {
  list-style: disc;
  padding-left: 1.5rem;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\seguranca\seguranca.component.html ----- 
<section class="seguranca">
  <h2>Configurações de Segurança</h2>
  <p>Revise as diretrizes abaixo para manter sua conta protegida:</p>
  <ul>
    <li *ngFor="let dica of dicas">{{ dica }}</li>
  </ul>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\seguranca\seguranca.component.ts ----- 
import { Component } from '@angular/core';

@Component({
  selector: 'app-seguranca',
  templateUrl: './seguranca.component.html',
  styleUrls: ['./seguranca.component.css']
})
export class SegurancaComponent {
  readonly dicas: string[] = [
    'Atualize sua senha periodicamente.',
    'Utilize autenticação multifator sempre que disponível.',
    'Revise os acessos concedidos à sua conta com frequência.'
  ];
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\popupService.ts ----- 
/* popupService.ts */

import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, Subject } from 'rxjs';


function logMethod(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Classe ${target.constructor.name}: Método ${key} chamado.`);
    return originalMethod.apply(this, args);
  };
  return descriptor;
}



export interface PopupState<T = any> {
  type: string;
  show: boolean;
  data?: T;
}

export interface ConfirmacaoModalData {
  titulo?: string;
  mensagem: string;
  textoConfirmar?: string;
  textoCancelar?: string;
}

@Injectable({
    providedIn: 'root'
  })
  export class PopupService {
    private showPopupSource = new BehaviorSubject<PopupState>({type: '', show: false});
    showPopup$ = this.showPopupSource.asObservable();
    private confirmacaoSubject: Subject<boolean> | null = null;


    @logMethod
  openPopup(type: string, data?: any) {
    const newValue: PopupState = {type, show: true, data};
    console.log('Atualizando showPopupSource com:', newValue); // Adicione este log
    this.showPopupSource.next(newValue);
  }

/*
    @logMethod
    openPopup(type: string) {
      this.showPopupSource.next({type, show: true});
    }
    */
  
    @logMethod
    closePopup() {
      this.showPopupSource.next({type: '', show: false});
    }

    @logMethod
    openConfirmacao(data: ConfirmacaoModalData): Observable<boolean> {
      if (this.confirmacaoSubject) {
        this.confirmacaoSubject.complete();
      }

      this.confirmacaoSubject = new Subject<boolean>();
      this.openPopup('confirmacao', data);
      return this.confirmacaoSubject.asObservable();
    }

    @logMethod
    resolveConfirmacao(confirmado: boolean) {
      if (this.confirmacaoSubject) {
        this.confirmacaoSubject.next(confirmado);
        this.confirmacaoSubject.complete();
        this.confirmacaoSubject = null;
      }
      this.closePopup();
    }
  }
   
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\privacidade\privacidade.service.ts ----- 
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export interface OpcaoPrivacidade {
  id: string;
  descricao: string;
  ativo: boolean;
}

@Injectable({ providedIn: 'root' })
export class PrivacidadeService {
  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  listarOpcoes(): Observable<OpcaoPrivacidade[]> {
    const url = this.configuracaoAplicacao.construirUrlApi('/api/configuracoes/privacidade');
    return this.http.get<OpcaoPrivacidade[]>(url);
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\sanitizacao\sanitizador-conteudo.service.ts ----- 
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class SanitizadorConteudoService {
  sanitizar(texto: string | null | undefined): string {
    if (!texto) {
      return '';
    }
    const semScripts = texto.replace(/<script.*?>.*?<\/script>/gis, '');
    const semTags = semScripts.replace(/<[^>]+>/g, '');
    return semTags.replace(/["'`]/g, '').trim();
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-autenticacao\auth.guard.ts ----- 
import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, CanLoad, Route, UrlSegment } from '@angular/router';

import { ServicoAutenticacao } from './servico-autenticacao.service';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate, CanActivateChild, CanLoad {
    constructor(
        private router: Router,
        private servicoAutenticacao: ServicoAutenticacao
    ) { }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        const currentUser = this.servicoAutenticacao.obterUsuarioAtual();
        if (currentUser) {
            // logged in so return true
            return true;
        }

        // not logged in so redirect to login page with the return url
        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
        return false;
    }

    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
        return this.canActivate(childRoute, state);
    }

    canLoad(route: Route, segments: UrlSegment[]): boolean {
        const currentUser = this.servicoAutenticacao.obterUsuarioAtual();
        if (currentUser) {
            return true;
        }
        const returnUrl = '/' + segments.map(segment => segment.path).join('/');
        this.router.navigate(['/login'], { queryParams: { returnUrl } });
        return false;
    }
} 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-autenticacao\error.interceptor.ts ----- 
import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

import { ServicoAutenticacao } from './servico-autenticacao.service';


@Injectable()
export class ErrorInterceptor implements HttpInterceptor {
    constructor(private servicoAutenticacao: ServicoAutenticacao) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).pipe(catchError(err => {
            if (err.status === 401) {
                // auto logout if 401 response returned from api
                this.servicoAutenticacao.encerrarSessao();
                location.reload(); // corrected here
            }

            const error = err.error.message || err.statusText;
            return throwError(error);
        }))
    }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-autenticacao\jwt.interceptor.ts ----- 

import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable } from 'rxjs';

import { ServicoAutenticacao } from './servico-autenticacao.service';
import { User } from '../../model/user.model';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(private servicoAutenticacao: ServicoAutenticacao) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const token = this.resolveToken();

        if (token) {
            request = request.clone({
                setHeaders: {
                    Authorization: `Bearer ${token}`
                }
            });
        }

        return next.handle(request);
    }

    private resolveToken(): string | null {
        const currentUser = this.servicoAutenticacao.obterUsuarioAtual() as (User & { [key: string]: any }) | null;

        if (!currentUser) {
            return null;
        }

        if (currentUser.token) {
            return currentUser.token;
        }

        const dynamicToken = currentUser['data']?.token
            ?? currentUser['accessToken']
            ?? currentUser['jwt'];

        return dynamicToken ?? null;
    }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-autenticacao\servico-autenticacao.service.ts ----- 
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { User } from '../../model/user.model';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

@Injectable({ providedIn: 'root' })
export class ServicoAutenticacao {
    private readonly usuarioAtual$: BehaviorSubject<User | null>;
    public readonly usuarioAtualObservavel: Observable<User | null>;
    private readonly statusMenu$: BehaviorSubject<boolean>;
    public readonly statusMenuObservavel: Observable<boolean>;

    constructor(
        private readonly http: HttpClient,
        private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
    ) {
        const dadosArmazenados = localStorage.getItem('usuarioAtual');
        const usuarioArmazenado = dadosArmazenados ? JSON.parse(dadosArmazenados) : null;
        const usuarioAtual = usuarioArmazenado ? this.mapearParaUsuario(usuarioArmazenado) : null;
        this.usuarioAtual$ = new BehaviorSubject<User | null>(usuarioAtual);
        this.usuarioAtualObservavel = this.usuarioAtual$.asObservable();
        this.statusMenu$ = new BehaviorSubject<boolean>(this.deveExibirMenu(usuarioAtual?.roles ?? []));
        this.statusMenuObservavel = this.statusMenu$.asObservable();
    }

    public obterUsuarioAtual(): User | null {
        return this.usuarioAtual$.getValue();
    }

    autenticar(login: string, senha: string) {
        const url = this.configuracaoAplicacao.construirUrlApi('/auth/login');
        const loginSanitizado = this.sanitizarTextoSimples(login);
        const senhaSanitizada = this.sanitizarTextoSimples(senha);
        return this.http.post<any>(url, { login: loginSanitizado, senha: senhaSanitizada })
            .pipe(map(resposta => {
                const usuario = this.mapearParaUsuario(resposta);
                localStorage.setItem('usuarioAtual', JSON.stringify(usuario));
                this.usuarioAtual$.next(usuario);
                this.atualizarStatusMenu(this.deveExibirMenu(usuario.roles));
                return usuario;
            }));
    }

    encerrarSessao() {
        this.atualizarStatusMenu(false);
        localStorage.removeItem('usuarioAtual');
        localStorage.removeItem('nomeUsuario');
        this.usuarioAtual$.next(null);
    }

    definirNomeUsuario(nomeUsuario: string) {
        const valorSanitizado = this.sanitizarTextoSimples(nomeUsuario);
        localStorage.setItem('nomeUsuario', JSON.stringify(valorSanitizado));
    }

    obterNomeUsuario(): string | null {
        const dadosArmazenados = localStorage.getItem('nomeUsuario');
        const valor = dadosArmazenados ? JSON.parse(dadosArmazenados) : null;
        return typeof valor === 'string' ? this.sanitizarTextoSimples(valor) : null;
    }

    atualizarStatusMenu(status: boolean) {
        this.statusMenu$.next(status);
    }

    obterStatusMenuAtual(): boolean {
        return this.statusMenu$.getValue();
    }

    possuiPapel(papel: string): boolean {
        const normalizado = papel?.startsWith('ROLE_') ? papel : `ROLE_${(papel ?? '').toUpperCase()}`;
        return this.obterPapeisAtuais().includes(normalizado);
    }

    possuiAlgumPapel(...papeis: string[]): boolean {
        if (!papeis || papeis.length === 0) {
            return false;
        }
        return papeis.some(papel => this.possuiPapel(papel));
    }

    obterPapeisAtuais(): string[] {
        return this.usuarioAtual$.getValue()?.roles ?? [];
    }

    private deveExibirMenu(papeis: string[]): boolean {
        const papeisNormalizados = this.normalizarPapeis(papeis);
        const papeisPermitidos = [
            'ROLE_ADMIN_PORTO',
            'ROLE_PLANEJADOR',
            'ROLE_OPERADOR_GATE',
            'ROLE_TRANSPORTADORA'
        ];
        return papeisNormalizados.some(papel => papeisPermitidos.includes(papel));
    }

    private mapearParaUsuario(dados: any): User {
        if (!dados) {
            return new User();
        }

        const origem = dados.data ?? dados;
        const token = origem.token
            ?? dados.token
            ?? origem.accessToken
            ?? dados.accessToken
            ?? '';
        const decodificado = this.decodificarToken(token);
        const papeisResposta = Array.isArray(origem.roles)
            ? origem.roles
            : (origem.roles ? [origem.roles] : []);
        const papeisToken = Array.isArray(decodificado?.roles)
            ? decodificado.roles
            : (decodificado?.role ? [decodificado.role] : []);
        const papeis = this.normalizarPapeis([...(papeisResposta || []), ...(papeisToken || [])]);
        const perfil = decodificado?.perfil ?? origem.perfil ?? dados.perfil ?? (papeis.length > 0 ? papeis[0] : '');
        const nome = decodificado?.nome ?? origem.nome ?? origem.name ?? origem.login ?? dados.nome ?? dados.login ?? '';
        const id = decodificado?.userId ?? origem.id ?? dados.id ?? origem.userId ?? dados.userId ?? '';
        const transportadoraDocumento = decodificado?.transportadoraDocumento ?? origem.transportadoraDocumento ?? null;
        const transportadoraNome = decodificado?.transportadoraNome ?? origem.transportadoraNome ?? null;

        return new User(
            id,
            nome,
            token,
            origem.email ?? dados.email ?? '',
            origem.senha ?? dados.senha ?? '',
            perfil,
            papeis,
            transportadoraDocumento,
            transportadoraNome
        );
    }

    private decodificarToken(token: string | undefined): any | null {
        if (!token) {
            return null;
        }
        const segmentos = token.split('.');
        if (segmentos.length < 2) {
            return null;
        }
        try {
            const cargaUtil = segmentos[1]
                .replace(/-/g, '+')
                .replace(/_/g, '/');
            const payloadDecodificado = decodeURIComponent(atob(cargaUtil)
                .split('')
                .map(caractere => '%' + ('00' + caractere.charCodeAt(0).toString(16)).slice(-2))
                .join(''));
            return JSON.parse(payloadDecodificado);
        } catch (erro) {
            console.warn('Falha ao decodificar token JWT', erro);
            return null;
        }
    }

    private normalizarPapeis(papeis: string[] | undefined): string[] {
        if (!papeis) {
            return [];
        }
        const normalizados = papeis
            .filter(papel => !!papel)
            .map(papel => papel.startsWith('ROLE_') ? papel : `ROLE_${papel.toUpperCase()}`);
        return Array.from(new Set(normalizados));
    }

    private sanitizarTextoSimples(valor: string): string {
        if (!valor) {
            return '';
        }
        return valor
            .normalize('NFKC')
            .replace(/[<>"'`\\]/g, '')
            .trim();
    }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-autenticacao\usuarios.service.ts ----- 
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, map } from 'rxjs';

import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export interface UsuarioResumo {
  id: string;
  nome: string;
  email: string;
  status: string;
}

@Injectable({ providedIn: 'root' })
export class UsuariosService {
  constructor(
    private http: HttpClient,
    private configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  listarUsuarios(): Observable<UsuarioResumo[]> {
    const url = this.configuracaoAplicacao.construirUrlApi('/api/usuarios');
    return this.http.get<UsuarioResumo[]>(url).pipe(
      map((usuarios) =>
        (usuarios ?? []).map((usuario) => ({
          ...usuario,
          status: usuario.status ?? 'Ativo'
        }))
        .sort((a, b) => a.nome.localeCompare(b.nome, 'pt-BR', { sensitivity: 'base' }))
      )
    );
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-ferrovia\servico-ferrovia.service.ts ----- 
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export type StatusOperacaoConteinerVisita = 'PENDENTE' | 'CONCLUIDO';

export interface OperacaoConteinerVisita {
  codigoConteiner: string;
  statusOperacao: StatusOperacaoConteinerVisita;
}

export interface OperacaoConteinerVisitaEnvio {
  codigoConteiner: string;
  statusOperacao?: StatusOperacaoConteinerVisita;
}

export interface AtualizacaoStatusOperacaoConteiner {
  statusOperacao: StatusOperacaoConteinerVisita;
}

export interface VisitaTrem {
  id: number;
  identificadorTrem: string;
  operadoraFerroviaria: string;
  horaChegadaPrevista: string;
  horaPartidaPrevista: string;
  statusVisita: string;
  listaDescarga: OperacaoConteinerVisita[];
  listaCarga: OperacaoConteinerVisita[];
}

export interface VisitaTremRequisicao {
  identificadorTrem: string;
  operadoraFerroviaria: string;
  horaChegadaPrevista: string;
  horaPartidaPrevista: string;
  statusVisita: string;
}

@Injectable({
  providedIn: 'root'
})
export class ServicoFerroviaService {
  private static readonly CAMINHO_BASE = '/rail/ferrovia/visitas';

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  listarVisitasProximosDias(dias: number): Observable<VisitaTrem[]> {
    const diasAjustado = this.normalizarJanela(dias);
    const params = new HttpParams().set('dias', diasAjustado.toString());
    return this.http.get<VisitaTrem[]>(this.construirUrl(''), { params });
  }

  obterVisita(id: number): Observable<VisitaTrem> {
    return this.http.get<VisitaTrem>(this.construirUrl(`/${id}`));
  }

  registrarVisita(payload: VisitaTremRequisicao): Observable<VisitaTrem> {
    return this.http.post<VisitaTrem>(this.construirUrl(''), payload);
  }

  atualizarVisita(id: number, payload: VisitaTremRequisicao): Observable<VisitaTrem> {
    return this.http.put<VisitaTrem>(this.construirUrl(`/${id}`), payload);
  }

  adicionarConteinerDescarga(idVisita: number, payload: OperacaoConteinerVisitaEnvio): Observable<VisitaTrem> {
    return this.http.post<VisitaTrem>(this.construirUrl(`/${idVisita}/descarga`), payload);
  }

  adicionarConteinerCarga(idVisita: number, payload: OperacaoConteinerVisitaEnvio): Observable<VisitaTrem> {
    return this.http.post<VisitaTrem>(this.construirUrl(`/${idVisita}/carga`), payload);
  }

  removerConteinerDescarga(idVisita: number, codigoConteiner: string): Observable<VisitaTrem> {
    return this.http.delete<VisitaTrem>(this.construirUrl(`/${idVisita}/descarga/${encodeURIComponent(codigoConteiner)}`));
  }

  removerConteinerCarga(idVisita: number, codigoConteiner: string): Observable<VisitaTrem> {
    return this.http.delete<VisitaTrem>(this.construirUrl(`/${idVisita}/carga/${encodeURIComponent(codigoConteiner)}`));
  }

  atualizarStatusDescarga(idVisita: number,
                          codigoConteiner: string,
                          payload: AtualizacaoStatusOperacaoConteiner): Observable<VisitaTrem> {
    return this.http.patch<VisitaTrem>(
      this.construirUrl(`/${idVisita}/descarga/${encodeURIComponent(codigoConteiner)}/status`),
      payload
    );
  }

  atualizarStatusCarga(idVisita: number,
                       codigoConteiner: string,
                       payload: AtualizacaoStatusOperacaoConteiner): Observable<VisitaTrem> {
    return this.http.patch<VisitaTrem>(
      this.construirUrl(`/${idVisita}/carga/${encodeURIComponent(codigoConteiner)}/status`),
      payload
    );
  }

  private construirUrl(caminho: string): string {
    return this.configuracaoAplicacao.construirUrlApi(`${ServicoFerroviaService.CAMINHO_BASE}${caminho}`);
  }

  private normalizarJanela(dias: number): number {
    if (!Number.isFinite(dias)) {
      return 7;
    }
    const inteiro = Math.floor(Math.abs(dias));
    if (inteiro < 1) {
      return 1;
    }
    if (inteiro > 30) {
      return 30;
    }
    return inteiro;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\agendamento-comprovante.service.ts ----- 
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Agendamento } from '../../model/gate/agendamento.model';

@Injectable({
  providedIn: 'root'
})
export class AgendamentoComprovanteService {
  constructor(private readonly translate: TranslateService) {}

  gerar(agendamento: Agendamento): Blob {
    const linhas: string[] = [];
    const titulo = this.translate.instant('gate.agendamentoDetalhe.comprovanteTitulo');
    const legenda = this.translate.instant('gate.agendamentoDetalhe.comprovanteLegenda', {
      data: new Date().toLocaleString()
    });
    const campos = this.translate.instant('gate.agendamentoDetalhe.comprovanteCampos') as Record<string, string>;
    const semDocumentos = this.translate.instant('gate.agendamentoDetalhe.comprovanteSemDocumentos');
    const semRevalidacao = this.translate.instant('gate.agendamentoDetalhe.comprovanteSemRevalidacao');
    linhas.push(titulo);
    linhas.push(legenda);
    linhas.push(''.padEnd(50, '='));
    linhas.push(`${campos.codigo}: ${agendamento.codigo}`);
    linhas.push(`${campos.transportadora}: ${agendamento.transportadoraNome ?? '—'}`);
    linhas.push(`${campos.motorista}: ${agendamento.motoristaNome ?? '—'}`);
    linhas.push(`${campos.placa}: ${agendamento.placaVeiculo ?? '—'}`);
    linhas.push(`${campos.janela}: ${this.formatarJanela(agendamento)}`);
    linhas.push(`${campos.status}: ${agendamento.statusDescricao ?? agendamento.status}`);
    linhas.push(`${campos.documentos}:`);
    const documentos = agendamento.documentos ?? [];
    if (!documentos.length) {
      linhas.push(` - ${semDocumentos}`);
    } else {
      const labelRevalidacao = this.translate.instant('gate.agendamentoDetalhe.ultimaRevalidacao');
      documentos.forEach((doc) => {
        const ultimaRevalidacao = doc.ultimaRevalidacao
          ? new Date(doc.ultimaRevalidacao).toLocaleString()
          : semRevalidacao;
        linhas.push(` - ${doc.nomeArquivo} (${doc.tipoDocumento}) - ${labelRevalidacao}: ${ultimaRevalidacao}`);
      });
    }
    const observacao = this.translate.instant('gate.agendamentoDetalhe.comprovanteObservacao');
    linhas.push('');
    linhas.push(observacao);
    return new Blob([linhas.join('\n')], { type: 'text/plain;charset=utf-8' });
  }

  private formatarJanela(agendamento: Agendamento): string {
    if (!agendamento.dataJanela) {
      return '—';
    }
    const data = new Date(agendamento.dataJanela).toLocaleDateString();
    const inicio = agendamento.horaInicioJanela ?? '—';
    const fim = agendamento.horaFimJanela ?? '—';
    return `${data} ${inicio} - ${fim}`;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\agendamento-realtime.service.ts ----- 
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export type AgendamentoRealtimeEventType =
  | 'snapshot'
  | 'status-atualizado'
  | 'janela-proxima'
  | 'documentos-atualizados'
  | 'documentos-revalidados'
  | 'gate-pass-atualizado'
  | 'conexao-estabelecida'
  | 'conexao-perdida'
  | 'reconectando';

export interface AgendamentoRealtimeEvent<T = unknown> {
  type: AgendamentoRealtimeEventType;
  data: T;
}

interface ReconexaoPayload {
  tentativa: number;
  delayMs: number;
}

@Injectable({
  providedIn: 'root'
})
export class AgendamentoRealtimeService {
  private readonly sources = new Map<number, EventSource>();
  private readonly retryTimers = new Map<number, number>();
  private readonly retryAttempts = new Map<number, number>();

  constructor(
    private readonly zone: NgZone,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  conectar(agendamentoId: number): Observable<AgendamentoRealtimeEvent> {
    return new Observable<AgendamentoRealtimeEvent>((subscriber) => {
      let disposed = false;

      const limparTimer = (): void => {
        const timer = this.retryTimers.get(agendamentoId);
        if (timer !== undefined) {
          clearTimeout(timer);
          this.retryTimers.delete(agendamentoId);
        }
      };

      const fecharFonte = (): void => {
        const source = this.sources.get(agendamentoId);
        if (source) {
          source.close();
          this.sources.delete(agendamentoId);
        }
      };

      const agendarReconexao = (): void => {
        if (disposed) {
          return;
        }
        const tentativaAtual = (this.retryAttempts.get(agendamentoId) ?? 0) + 1;
        this.retryAttempts.set(agendamentoId, tentativaAtual);
        const delayMs = Math.min(30000, Math.pow(2, tentativaAtual) * 1000);
        const payload: ReconexaoPayload = { tentativa: tentativaAtual, delayMs };
        this.zone.run(() => subscriber.next({ type: 'reconectando', data: payload }));
        const timer = window.setTimeout(() => {
          this.retryTimers.delete(agendamentoId);
          iniciar();
        }, delayMs);
        this.retryTimers.set(agendamentoId, timer);
      };

      const iniciar = (): void => {
        if (disposed) {
          return;
        }
        limparTimer();
        fecharFonte();

        const url = this.configuracaoAplicacao.construirUrlApi(`/gate/agendamentos/${agendamentoId}/stream`);
        const eventSource = new EventSource(url, { withCredentials: true });
        this.sources.set(agendamentoId, eventSource);

        const eventos: AgendamentoRealtimeEventType[] = [
          'snapshot',
          'status-atualizado',
          'janela-proxima',
          'documentos-atualizados',
          'documentos-revalidados',
          'gate-pass-atualizado'
        ];

        eventSource.onopen = () => {
          this.retryAttempts.set(agendamentoId, 0);
          this.zone.run(() => subscriber.next({ type: 'conexao-estabelecida', data: null }));
        };

        eventos.forEach((tipo) => {
          eventSource.addEventListener(tipo, (event: MessageEvent) => {
            this.zone.run(() => {
              try {
                const data = event.data ? JSON.parse(event.data) : null;
                subscriber.next({ type: tipo, data });
              } catch (error) {
                subscriber.error(error);
              }
            });
          });
        });

        eventSource.onerror = () => {
          if (disposed) {
            return;
          }
          this.zone.run(() => subscriber.next({ type: 'conexao-perdida', data: null }));
          fecharFonte();
          agendarReconexao();
        };
      };

      iniciar();

      return () => {
        disposed = true;
        limparTimer();
        fecharFonte();
        this.retryAttempts.delete(agendamentoId);
      };
    });
  }

  desconectar(agendamentoId: number): void {
    const source = this.sources.get(agendamentoId);
    if (source) {
      source.close();
      this.sources.delete(agendamentoId);
    }
    const timer = this.retryTimers.get(agendamentoId);
    if (timer !== undefined) {
      clearTimeout(timer);
      this.retryTimers.delete(agendamentoId);
    }
    this.retryAttempts.delete(agendamentoId);
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\gate-api.service.spec.ts ----- 
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { GateApiService } from './gate-api.service';

describe('GateApiService', () => {
  let service: GateApiService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [GateApiService]
    });

    service = TestBed.inject(GateApiService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('deve enviar filtros na listagem de agendamentos', () => {
    service.listarAgendamentos({ codigo: 'AG01', pagina: 2 }).subscribe();

    const req = httpMock.expectOne((request) => request.url.includes('/gate/agendamentos'));
    expect(req.request.params.get('codigo')).toBe('AG01');
    expect(req.request.params.get('pagina')).toBe('2');
    req.flush({});
  });

  it('deve montar FormData com metadados ao enviar documentos', (done) => {
    const arquivo = new File(['conteudo'], 'comprovante.pdf', { type: 'application/pdf' });
    service.uploadDocumentoAgendamento(5, arquivo).subscribe();

    const req = httpMock.expectOne((request) => request.url.includes('/gate/agendamentos/5/documentos'));
    expect(req.request.method).toBe('POST');
    const formData = req.request.body as FormData;
    const metadata = formData.get('metadata') as Blob;
    expect(metadata).toBeTruthy();
    metadata.text().then((texto) => {
      const json = JSON.parse(texto);
      expect(json.tipoDocumento).toBe('application/pdf');
      done();
    });
    expect(formData.get('arquivo')).toBeTruthy();
    req.flush({});
  });
});

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\gate-api.service.ts ----- 
import { Injectable } from '@angular/core';
import { HttpClient, HttpEvent, HttpParams } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';
import {
  Agendamento,
  AgendamentoFiltro,
  AgendamentoRequest,
  DocumentoAgendamento,
  GateEnumOption,
  Page,
  CentralAcaoAgendamentoResposta,
  AcaoCentralAgendamento
} from '../../model/gate/agendamento.model';
import {
  JanelaAtendimento,
  JanelaAtendimentoRequest,
  JanelaFiltro
} from '../../model/gate/janela.model';

@Injectable({
  providedIn: 'root'
})
export class GateApiService {
  private readonly agendamentosSegmento = '/agendamentos';
  private readonly janelasSegmento = '/janelas';
  private readonly configSegmento = '/config';

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  private get baseUrl(): string {
    return this.configuracaoAplicacao.construirUrlApi('/gate');
  }

  listarAgendamentos(filtro?: AgendamentoFiltro): Observable<Page<Agendamento>> {
    const params = this.buildParams(filtro);
    return this.http.get<Page<Agendamento>>(this.construirUrlAgendamentos(), { params });
  }

  obterAgendamentoPorId(id: number): Observable<Agendamento> {
    return this.http.get<Agendamento>(`${this.construirUrlAgendamentos()}/${id}`);
  }

  confirmarChegadaAntecipada(id: number): Observable<Agendamento> {
    return this.http.post<Agendamento>(`${this.baseUrl}/agendamentos/${id}/confirmar-chegada`, {});
  }

  criarAgendamento(request: AgendamentoRequest): Observable<Agendamento> {
    return this.http.post<Agendamento>(this.construirUrlAgendamentos(), request);
  }

  atualizarAgendamento(id: number, request: AgendamentoRequest): Observable<Agendamento> {
    return this.http.put<Agendamento>(`${this.construirUrlAgendamentos()}/${id}`, request);
  }

  cancelarAgendamento(id: number): Observable<void> {
    return this.http.delete<void>(`${this.construirUrlAgendamentos()}/${id}`);
  }

  listarJanelas(filtro?: JanelaFiltro): Observable<Page<JanelaAtendimento>> {
    const params = this.buildParams(filtro);
    return this.http.get<Page<JanelaAtendimento>>(this.construirUrlJanelas(), { params });
  }

  obterJanelaPorId(id: number): Observable<JanelaAtendimento> {
    return this.http.get<JanelaAtendimento>(`${this.construirUrlJanelas()}/${id}`);
  }

  criarJanela(request: JanelaAtendimentoRequest): Observable<JanelaAtendimento> {
    return this.http.post<JanelaAtendimento>(this.construirUrlJanelas(), request);
  }

  atualizarJanela(id: number, request: JanelaAtendimentoRequest): Observable<JanelaAtendimento> {
    return this.http.put<JanelaAtendimento>(`${this.construirUrlJanelas()}/${id}`, request);
  }

  removerJanela(id: number): Observable<void> {
    return this.http.delete<void>(`${this.construirUrlJanelas()}/${id}`);
  }

  listarTiposOperacao(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/tipos-operacao`);
  }

  listarStatusAgendamento(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/status-agendamento`);
  }

  obterCentralAcaoAgendamentos(): Observable<CentralAcaoAgendamentoResposta> {
    return this.http.get<CentralAcaoAgendamentoResposta>(`${this.construirUrlAgendamentos()}/visao-completa`);
  }

  executarAcaoCentral(acao: AcaoCentralAgendamento): Observable<unknown> {
    if (!acao || !acao.rotaApiRelativa || !acao.habilitada) {
      return throwError(() => new Error('Ação inválida ou indisponível.'));
    }
    if (/^https?:/i.test(acao.rotaApiRelativa)) {
      return throwError(() => new Error('Rota de ação inválida.'));
    }

    const metodo = (acao.metodoHttp || 'POST').toUpperCase();
    const rotaNormalizada = acao.rotaApiRelativa.startsWith('/')
      ? acao.rotaApiRelativa
      : `/${acao.rotaApiRelativa}`;
    const url = this.configuracaoAplicacao.construirUrlApi(rotaNormalizada);

    switch (metodo) {
      case 'POST':
        return this.http.post<unknown>(url, {});
      case 'PUT':
        return this.http.put<unknown>(url, {});
      case 'PATCH':
        return this.http.patch<unknown>(url, {});
      case 'DELETE':
        return this.http.delete<unknown>(url);
      default:
        return this.http.get<unknown>(url);
    }
  }

  listarStatusGate(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/status-gate`);
  }

  listarMotivosExcecao(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/motivos-excecao`);
  }

  listarCanaisEntrada(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/canais-entrada`);
  }

  listarTiposOcorrencia(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/tipos-ocorrencia`);
  }

  listarNiveisEvento(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.construirUrlConfig()}/niveis-evento`);
  }

  uploadDocumentoAgendamento(id: number, arquivo: File): Observable<HttpEvent<DocumentoAgendamento>> {
    const formData = new FormData();
    const metadata = {
      tipoDocumento: this.inferirTipoDocumento(arquivo),
      numero: null
    };
    formData.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    formData.append('file', arquivo, arquivo.name);
    return this.http.post<DocumentoAgendamento>(`${this.construirUrlAgendamentos()}/${id}/documentos`, formData, {
      reportProgress: true,
      observe: 'events'
    });
  }

  private inferirTipoDocumento(arquivo: File): string {
    if (arquivo.type) {
      return arquivo.type;
    }
    const partesNome = arquivo.name?.split('.') ?? [];
    if (partesNome.length > 1) {
      return partesNome.pop()!.toUpperCase();
    }
    return 'ARQUIVO';
  }

  private buildParams(filters?: Record<string, string | number | boolean | undefined | null>): HttpParams {
    let params = new HttpParams();
    if (!filters) {
      return params;
    }

    Object.entries(filters)
      .filter(([, value]) => value !== undefined && value !== null)
      .forEach(([key, value]) => {
        params = params.set(key, String(value));
      });

    return params;
  }

  private construirUrlAgendamentos(): string {
    return `${this.baseUrl}${this.agendamentosSegmento}`;
  }

  private construirUrlJanelas(): string {
    return `${this.baseUrl}${this.janelasSegmento}`;
  }

  private construirUrlConfig(): string {
    return `${this.baseUrl}${this.configSegmento}`;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\gate-dashboard.service.spec.ts ----- 
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { GateDashboardService } from './gate-dashboard.service';

describe('GateDashboardService', () => {
  let service: GateDashboardService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [GateDashboardService]
    });

    service = TestBed.inject(GateDashboardService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('deve enviar filtros como parâmetros de consulta ao buscar o resumo', () => {
    const filtro = {
      inicio: '2024-01-01',
      fim: '2024-01-02',
      transportadoraId: 10,
      tipoOperacao: 'ENTRADA'
    };

    service.consultarResumo(filtro).subscribe();

    const req = httpMock.expectOne((request) => request.url.includes('/gate/dashboard'));
    expect(req.request.method).toBe('GET');
    expect(req.request.params.get('inicio')).toBe('2024-01-01');
    expect(req.request.params.get('fim')).toBe('2024-01-02');
    expect(req.request.params.get('transportadoraId')).toBe('10');
    expect(req.request.params.get('tipoOperacao')).toBe('ENTRADA');
    req.flush({});
  });

  it('deve abrir stream com query string construída a partir do filtro', () => {
    const originalEventSource = (window as any).EventSource;
    const instances: any[] = [];
    (window as any).EventSource = function(url: string) {
      this.url = url;
      instances.push(this);
    } as any;

    const filtro = { tipoOperacao: 'SAIDA', transportadoraId: 12 };
    const eventSource = service.registrarStream(filtro);

    expect((eventSource as any).url).toContain('tipoOperacao=SAIDA');
    expect((eventSource as any).url).toContain('transportadoraId=12');

    (window as any).EventSource = originalEventSource;
  });
});

 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\gate-dashboard.service.ts ----- 
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';
import { DashboardFiltro, DashboardResumo } from '../../model/gate/dashboard.model';
import { GateEnumOption } from '../../model/gate/agendamento.model';

@Injectable({
  providedIn: 'root'
})
export class GateDashboardService {
  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  consultarResumo(filtro?: DashboardFiltro): Observable<DashboardResumo> {
    const params = this.buildParams(filtro);
    return this.http.get<DashboardResumo>(this.obterDashboardUrl(), { params });
  }

  exportarResumo(formato: 'csv' | 'xlsx', filtro?: DashboardFiltro): Observable<Blob> {
    const params = this.buildParams(filtro);
    const endpoint = `${this.obterDashboardUrl()}/relatorios/${formato}`;
    const headers = formato === 'csv'
      ? { Accept: 'text/csv' }
      : { Accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' };
    return this.http.get(endpoint, {
      params,
      headers,
      responseType: 'blob'
    });
  }

  listarTiposOperacao(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.obterConfigUrl()}/tipos-operacao`);
  }

  listarTransportadoras(): Observable<GateEnumOption[]> {
    return this.http.get<GateEnumOption[]>(`${this.obterConfigUrl()}/transportadoras`);
  }

  registrarStream(filtro?: DashboardFiltro): EventSource {
    const params = this.buildParams(filtro);
    const query = params.toString();
    const urlBase = this.obterDashboardUrl();
    const url = query ? `${urlBase}/stream?${query}` : `${urlBase}/stream`;
    return new EventSource(url, { withCredentials: true });
  }

  private buildParams(filters?: DashboardFiltro): HttpParams {
    let params = new HttpParams();
    if (!filters) {
      return params;
    }

    Object.entries(filters)
      .filter(([, value]) => value !== undefined && value !== null && value !== '')
      .forEach(([key, value]) => {
        params = params.set(key, String(value));
      });

    return params;
  }
  private obterDashboardUrl(): string {
    return this.configuracaoAplicacao.construirUrlApi('/gate/dashboard');
  }

  private obterConfigUrl(): string {
    return this.configuracaoAplicacao.construirUrlApi('/gate/config');
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\gate-operador.service.ts ----- 
import { Injectable, OnDestroy } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, Subject, map, tap } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';
import { GateApiService } from './gate-api.service';
import {
  GateBloqueioRequest,
  GateLiberacaoManualRequest,
  GateNivelEvento,
  GateOcorrenciaRequest,
  GateOperadorEvento,
  GateOperadorPainel
} from '../../model/gate/operador.model';
import { GateEnumOption } from '../../model/gate/agendamento.model';

@Injectable({
  providedIn: 'root'
})
export class GateOperadorService implements OnDestroy {
  private readonly painelSubject = new BehaviorSubject<GateOperadorPainel | null>(null);
  private readonly eventosSubject = new BehaviorSubject<GateOperadorEvento[]>([]);
  private readonly alertasSubject = new Subject<GateOperadorEvento>();
  private readonly conexaoStatusSubject = new BehaviorSubject<'conectado' | 'desconectado' | 'conectando'>('desconectado');

  readonly painel$ = this.painelSubject.asObservable().pipe(map((painel) => painel ?? {
    filasEntrada: [],
    filasSaida: [],
    veiculosAtendimento: [],
    historico: [],
    ultimaAtualizacao: new Date().toISOString()
  }));
  readonly eventos$ = this.eventosSubject.asObservable();
  readonly alertas$ = this.alertasSubject.asObservable();
  readonly statusConexao$ = this.conexaoStatusSubject.asObservable();

  private eventSource: EventSource | null = null;
  private reconexaoTimer: ReturnType<typeof setTimeout> | null = null;

  constructor(
    private readonly http: HttpClient,
    private readonly gateApi: GateApiService,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  carregarPainel(): Observable<GateOperadorPainel> {
    return this.http.get<GateOperadorPainel>(this.obterPainelUrl()).pipe(
      tap((painel) => {
        this.painelSubject.next(painel);
        if (painel.historico) {
          this.eventosSubject.next(painel.historico);
        }
      })
    );
  }

  atualizarHistorico(): Observable<GateOperadorEvento[]> {
    return this.http.get<GateOperadorEvento[]>(this.obterEventosUrl()).pipe(
      tap((eventos) => this.eventosSubject.next(eventos))
    );
  }

  conectarEventos(): void {
    if (this.eventSource || typeof window === 'undefined') {
      return;
    }

    this.conexaoStatusSubject.next('conectando');
    const streamUrl = `${this.obterEventosUrl()}/stream`;

    try {
      this.eventSource = new EventSource(streamUrl);
      this.eventSource.onopen = () => this.conexaoStatusSubject.next('conectado');
      this.eventSource.onmessage = (event) => {
        try {
          const payload: GateOperadorEvento = JSON.parse(event.data);
          this.alertasSubject.next(payload);
          const historicoAtual = [payload, ...this.eventosSubject.value];
          this.eventosSubject.next(historicoAtual.slice(0, 100));
          this.recarregarPainelComEvento();
          if (this.deveEmitirAlertaSonoro(payload.nivel)) {
            this.emitirAlertaSonoro();
          }
        } catch (erro) {
          console.warn('Não foi possível interpretar o evento recebido do Gate.', erro);
        }
      };
      this.eventSource.onerror = () => {
        this.conexaoStatusSubject.next('desconectado');
        this.desconectarEventos();
        this.agendarReconexao();
      };
    } catch (erro) {
      console.error('Falha ao conectar no canal de eventos do Gate.', erro);
      this.conexaoStatusSubject.next('desconectado');
      this.agendarReconexao();
    }
  }

  desconectarEventos(): void {
    if (this.eventSource) {
      this.eventSource.close();
      this.eventSource = null;
    }
    if (this.reconexaoTimer) {
      clearTimeout(this.reconexaoTimer);
      this.reconexaoTimer = null;
    }
    this.conexaoStatusSubject.next('desconectado');
  }

  liberarVeiculo(veiculoId: number, payload: GateLiberacaoManualRequest): Observable<void> {
    return this.http.post<void>(`${this.obterOperadorUrl()}/veiculos/${veiculoId}/liberacao`, payload).pipe(
      tap(() => this.recarregarPainelComEvento())
    );
  }

  bloquearVeiculo(veiculoId: number, payload: GateBloqueioRequest): Observable<void> {
    return this.http.post<void>(`${this.obterOperadorUrl()}/veiculos/${veiculoId}/bloqueio`, payload).pipe(
      tap(() => this.recarregarPainelComEvento())
    );
  }

  registrarOcorrencia(payload: GateOcorrenciaRequest): Observable<void> {
    return this.http.post<void>(`${this.obterOperadorUrl()}/ocorrencias`, payload).pipe(
      tap(() => this.recarregarPainelComEvento())
    );
  }

  imprimirComprovante(veiculoId: number): Observable<void> {
    return this.http.get(`${this.obterOperadorUrl()}/veiculos/${veiculoId}/comprovante`, {
      responseType: 'blob'
    }).pipe(
      tap((blob) => {
        if (typeof window === 'undefined') {
          return;
        }
        const fileUrl = window.URL.createObjectURL(blob);
        const printWindow = window.open(fileUrl);
        if (printWindow) {
          printWindow.addEventListener('load', () => {
            printWindow.focus();
            printWindow.print();
          });
        }
        setTimeout(() => {
          window.URL.revokeObjectURL(fileUrl);
          printWindow?.close();
        }, 5000);
      }),
      map(() => void 0)
    );
  }

  listarMotivosExcecao(): Observable<GateEnumOption[]> {
    return this.gateApi.listarMotivosExcecao();
  }

  listarCanaisEntrada(): Observable<GateEnumOption[]> {
    return this.gateApi.listarCanaisEntrada();
  }

  listarTiposOcorrencia(): Observable<GateEnumOption[]> {
    return this.gateApi.listarTiposOcorrencia();
  }

  listarNiveisEvento(): Observable<GateEnumOption[]> {
    return this.gateApi.listarNiveisEvento();
  }

  ngOnDestroy(): void {
    this.desconectarEventos();
    this.painelSubject.complete();
    this.eventosSubject.complete();
    this.alertasSubject.complete();
    this.conexaoStatusSubject.complete();
  }

  private obterOperadorUrl(): string {
    return this.configuracaoAplicacao.construirUrlApi('/gate/operador');
  }

  private obterPainelUrl(): string {
    return `${this.obterOperadorUrl()}/painel`;
  }

  private obterEventosUrl(): string {
    return `${this.obterOperadorUrl()}/eventos`;
  }

  private recarregarPainelComEvento(): void {
    this.carregarPainel().subscribe({
      error: (erro) => console.warn('Não foi possível atualizar o painel do Gate.', erro)
    });
  }

  private agendarReconexao(): void {
    if (this.reconexaoTimer) {
      return;
    }
    this.reconexaoTimer = setTimeout(() => {
      this.reconexaoTimer = null;
      this.conectarEventos();
    }, 5000);
  }

  private deveEmitirAlertaSonoro(nivel: GateNivelEvento): boolean {
    const nivelNormalizado = (nivel || '').toUpperCase();
    return nivelNormalizado === 'CRITICA' || nivelNormalizado === 'ALTA' || nivelNormalizado === 'ALERTA';
  }

  private emitirAlertaSonoro(): void {
    if (typeof window === 'undefined' || typeof AudioContext === 'undefined') {
      return;
    }

    try {
      const contexto = new AudioContext();
      const oscilador = contexto.createOscillator();
      const ganho = contexto.createGain();
      oscilador.type = 'sine';
      oscilador.frequency.value = 880;
      ganho.gain.setValueAtTime(0.0001, contexto.currentTime);
      ganho.gain.exponentialRampToValueAtTime(0.4, contexto.currentTime + 0.05);
      ganho.gain.exponentialRampToValueAtTime(0.0001, contexto.currentTime + 0.8);
      oscilador.connect(ganho);
      ganho.connect(contexto.destination);
      oscilador.start();
      oscilador.stop(contexto.currentTime + 0.8);
    } catch (erro) {
      console.warn('Não foi possível reproduzir o alerta sonoro.', erro);
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\historico-conteiner.service.ts ----- 
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, throwError } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export interface DetalheConteiner {
  identificador: number;
  identificacao: string;
  posicaoPatio: string;
  tipoCarga: string;
  pesoToneladas: number;
  restricoes: string | null;
  statusOperacional: string;
  ultimaAtualizacao: string;
}

export interface HistoricoConteiner {
  tipoOperacao: string;
  descricao: string;
  posicaoAnterior: string | null;
  posicaoAtual: string | null;
  responsavel: string | null;
  dataRegistro: string;
}

@Injectable({
  providedIn: 'root'
})
export class HistoricoConteinerService {
  private readonly detalhesEndpoint = '/yard/conteineres/por-codigo';
  private readonly historicoEndpoint = '/yard/conteineres/por-codigo/historico';

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  obterDetalhePorCodigo(codigoConteiner: string): Observable<DetalheConteiner> {
    const params = this.construirParametros(codigoConteiner);
    if (!params) {
      return throwError(() => new Error('Código do contêiner inválido.'));
    }
    return this.http.get<DetalheConteiner>(
      this.configuracaoAplicacao.construirUrlApi(this.detalhesEndpoint),
      { params }
    );
  }

  obterHistoricoPorCodigo(codigoConteiner: string): Observable<HistoricoConteiner[]> {
    const params = this.construirParametros(codigoConteiner);
    if (!params) {
      return throwError(() => new Error('Código do contêiner inválido.'));
    }
    return this.http.get<HistoricoConteiner[]>(
      this.configuracaoAplicacao.construirUrlApi(this.historicoEndpoint),
      { params }
    );
  }

  private construirParametros(codigoConteiner: string): HttpParams | null {
    const codigo = (codigoConteiner ?? '').trim();
    if (!codigo) {
      return null;
    }
    return new HttpParams().set('codigo', codigo.toUpperCase());
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-gate\push-notification.service.ts ----- 
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class PushNotificationService {
  private registrationPromise: Promise<ServiceWorkerRegistration | null> | null = null;

  constructor() {
    if ('serviceWorker' in navigator) {
      this.registrationPromise = navigator.serviceWorker
        .register('/assets/sw.js')
        .then(() => navigator.serviceWorker.ready)
        .catch(async () => {
          try {
            return await navigator.serviceWorker.ready;
          } catch {
            return null;
          }
        });
    }
  }

  async requestPermission(): Promise<boolean> {
    if (!('Notification' in window)) {
      return false;
    }
    try {
      const permission = await Notification.requestPermission();
      return permission === 'granted';
    } catch {
      return false;
    }
  }

  async showNotification(title: string, options?: NotificationOptions): Promise<void> {
    if (!('Notification' in window)) {
      return;
    }
    let permission: NotificationPermission;
    if (Notification.permission === 'granted') {
      permission = 'granted';
    } else {
      try {
        permission = await Notification.requestPermission();
      } catch {
        permission = 'denied';
      }
    }
    if (permission !== 'granted') {
      throw new Error('notification-permission-denied');
    }
    const registration = await this.registrationPromise;
    if (registration) {
      await registration.showNotification(title, options);
    } else {
      new Notification(title, options);
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-lista-trabalho-patio\servico-lista-trabalho-patio.service.ts ----- 
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export type StatusOrdemTrabalhoPatio = 'PENDENTE' | 'EM_EXECUCAO' | 'CONCLUIDA';
export type TipoMovimentoPatio = 'ALOCACAO' | 'ATUALIZACAO' | 'REMOCAO';

export interface OrdemTrabalhoPatio {
  id: number;
  codigoConteiner: string;
  tipoCarga: string;
  destino: string;
  linhaDestino: number;
  colunaDestino: number;
  camadaDestino: string;
  tipoMovimento: TipoMovimentoPatio;
  statusOrdem: StatusOrdemTrabalhoPatio;
  statusConteinerDestino: string;
  criadoEm: string;
  atualizadoEm: string;
  concluidoEm?: string;
}

export interface NovaOrdemTrabalhoPatio {
  codigoConteiner: string;
  tipoCarga: string;
  destino: string;
  linhaDestino: number;
  colunaDestino: number;
  camadaDestino: string;
  tipoMovimento: TipoMovimentoPatio;
  statusConteinerDestino: string;
}

export interface AtualizacaoStatusOrdemTrabalhoPatio {
  statusOrdem: StatusOrdemTrabalhoPatio;
}

@Injectable({ providedIn: 'root' })
export class ServicoListaTrabalhoPatioService {
  private static readonly CAMINHO_BASE = '/yard/patio/ordens';

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  listarOrdens(status?: StatusOrdemTrabalhoPatio): Observable<OrdemTrabalhoPatio[]> {
    const params = this.criarParametros(status);
    return this.http.get<OrdemTrabalhoPatio[]>(this.construirUrl(''), { params });
  }

  registrarOrdem(payload: NovaOrdemTrabalhoPatio): Observable<OrdemTrabalhoPatio> {
    return this.http.post<OrdemTrabalhoPatio>(this.construirUrl(''), payload);
  }

  atualizarStatus(id: number, status: StatusOrdemTrabalhoPatio): Observable<OrdemTrabalhoPatio> {
    const corpo: AtualizacaoStatusOrdemTrabalhoPatio = { statusOrdem: status };
    return this.http.patch<OrdemTrabalhoPatio>(this.construirUrl(`/${encodeURIComponent(id)}/status`), corpo);
  }

  private construirUrl(caminho: string): string {
    return this.configuracaoAplicacao.construirUrlApi(`${ServicoListaTrabalhoPatioService.CAMINHO_BASE}${caminho}`);
  }

  private criarParametros(status?: StatusOrdemTrabalhoPatio): HttpParams {
    let params = new HttpParams();
    if (status) {
      params = params.set('status', status);
    }
    return params;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-lista-trabalho-trem\servico-lista-trabalho-trem.service.ts ----- 
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';

export type StatusOrdemMovimentacao = 'PENDENTE' | 'EM_EXECUCAO' | 'CONCLUIDA';
export type TipoMovimentacaoOrdem = 'DESCARGA_TREM' | 'CARGA_TREM';

export interface OrdemMovimentacao {
  id: number;
  idVisitaTrem: number;
  codigoConteiner: string;
  tipoMovimentacao: TipoMovimentacaoOrdem;
  statusMovimentacao: StatusOrdemMovimentacao;
  criadoEm: string;
  atualizadoEm: string;
}

export interface AtualizacaoStatusOrdemMovimentacao {
  statusMovimentacao: StatusOrdemMovimentacao;
}

@Injectable({ providedIn: 'root' })
export class ServicoListaTrabalhoTremService {
  private static readonly CAMINHO_BASE = '/rail/ferrovia/lista-trabalho';

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  listarOrdens(visitaId: number, status?: StatusOrdemMovimentacao): Observable<OrdemMovimentacao[]> {
    const params = this.criarParametros(status);
    return this.http.get<OrdemMovimentacao[]>(
      this.construirUrl(`/visitas/${encodeURIComponent(visitaId)}/ordens`),
      { params }
    );
  }

  atualizarStatus(visitaId: number,
                  ordemId: number,
                  status: StatusOrdemMovimentacao): Observable<OrdemMovimentacao> {
    const payload: AtualizacaoStatusOrdemMovimentacao = { statusMovimentacao: status };
    return this.http.patch<OrdemMovimentacao>(
      this.construirUrl(`/visitas/${encodeURIComponent(visitaId)}/ordens/${encodeURIComponent(ordemId)}/status`),
      payload
    );
  }

  private construirUrl(caminho: string): string {
    return this.configuracaoAplicacao.construirUrlApi(`${ServicoListaTrabalhoTremService.CAMINHO_BASE}${caminho}`);
  }

  private criarParametros(status?: StatusOrdemMovimentacao): HttpParams {
    let params = new HttpParams();
    if (status) {
      params = params.set('status', status);
    }
    return params;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-patio\cliente-stomp-basico.ts ----- 
export type ManipuladorMensagem = (corpo: string) => void;
export type ManipuladorErro = (erro: unknown) => void;

interface CabecalhosFrame {
  [chave: string]: string;
}

export class ClienteStompBasico {
  private websocket?: WebSocket;
  private conectado = false;
  private manipuladorMensagem?: ManipuladorMensagem;
  private manipuladorErro?: ManipuladorErro;
  private destinoAtual?: string;
  private idAssinatura?: string;

  constructor(private readonly url: string) {}

  conectar(destino: string, manipuladorMensagem: ManipuladorMensagem, manipuladorErro?: ManipuladorErro): void {
    this.destinoAtual = destino;
    this.manipuladorMensagem = manipuladorMensagem;
    this.manipuladorErro = manipuladorErro;
    this.idAssinatura = `sub-${Date.now()}`;

    this.websocket = new WebSocket(this.url);
    this.websocket.onopen = () => {
      this.enviarFrame('CONNECT', {
        'accept-version': '1.2',
        'heart-beat': '0,0'
      });
    };

    this.websocket.onmessage = (evento) => {
      this.processarMensagem(evento.data);
    };

    this.websocket.onerror = (evento) => {
      if (this.manipuladorErro) {
        this.manipuladorErro(evento);
      }
    };

    this.websocket.onclose = () => {
      this.conectado = false;
    };
  }

  desconectar(): void {
    if (this.websocket && this.conectado) {
      this.enviarFrame('DISCONNECT', {});
    }
    this.websocket?.close();
    this.conectado = false;
  }

  private enviarFrame(comando: string, cabecalhos: CabecalhosFrame, corpo?: string): void {
    const linhas = [comando];
    Object.entries(cabecalhos).forEach(([chave, valor]) => linhas.push(`${chave}:${valor}`));
    linhas.push('');
    const frame = `${linhas.join('\n')}${corpo ?? ''}\u0000`;
    this.websocket?.send(frame);
  }

  private processarMensagem(payload: string): void {
    const frames = payload.split('\u0000').filter((item) => item.trim().length > 0);
    frames.forEach((frame) => this.processarFrame(frame));
  }

  private processarFrame(frame: string): void {
    const linhas = frame.split('\n');
    const comando = linhas.shift()?.trim();
    if (!comando) {
      return;
    }

    const cabecalhos: CabecalhosFrame = {};
    let corpo = '';
    let linhaAtual: string | undefined;
    while ((linhaAtual = linhas.shift()) !== undefined) {
      if (linhaAtual.trim() === '') {
        corpo = linhas.join('\n');
        break;
      }
      const indiceSeparador = linhaAtual.indexOf(':');
      if (indiceSeparador > -1) {
        const chave = linhaAtual.substring(0, indiceSeparador);
        const valor = linhaAtual.substring(indiceSeparador + 1);
        cabecalhos[chave] = valor;
      }
    }

    switch (comando) {
      case 'CONNECTED':
        this.conectado = true;
        if (this.destinoAtual && this.idAssinatura) {
          this.enviarFrame('SUBSCRIBE', {
            id: this.idAssinatura,
            destination: this.destinoAtual,
            ack: 'auto'
          });
        }
        break;
      case 'MESSAGE':
        if (this.manipuladorMensagem) {
          this.manipuladorMensagem(corpo);
        }
        break;
      case 'ERROR':
        if (this.manipuladorErro) {
          this.manipuladorErro(corpo);
        }
        break;
      default:
        break;
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\service\servico-patio\servico-patio.service.ts ----- 
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { ConfiguracaoAplicacaoService } from '../../../configuracao/configuracao-aplicacao.service';
import { ClienteStompBasico, ManipuladorErro, ManipuladorMensagem } from './cliente-stomp-basico';

export interface ConteinerMapa {
  id?: number;
  codigo: string;
  linha: number;
  coluna: number;
  status: string;
  tipoCarga: string;
  destino: string;
  camadaOperacional: string;
}

export interface EquipamentoMapa {
  id?: number;
  identificador: string;
  tipoEquipamento: string;
  linha: number;
  coluna: number;
  statusOperacional: string;
}

export interface PosicaoPatio {
  id: number;
  linha: number;
  coluna: number;
  camadaOperacional: string;
  ocupada: boolean;
  codigoConteiner?: string;
  statusConteiner?: string;
}

export interface MovimentoPatio {
  id: number;
  codigoConteiner?: string;
  tipoMovimento: string;
  descricao: string;
  destino?: string;
  linha?: number;
  coluna?: number;
  camadaOperacional?: string;
  registradoEm: string;
}

export interface OpcoesCadastroPatio {
  statusConteiner: string[];
  tiposEquipamento: string[];
  statusEquipamento: string[];
  tiposMovimento: string[];
}

export interface MapaPatioResposta {
  conteineres: ConteinerMapa[];
  equipamentos: EquipamentoMapa[];
  totalLinhas: number;
  totalColunas: number;
  atualizadoEm: string;
}

export interface FiltrosMapaPatio {
  statusDisponiveis: string[];
  tiposCargaDisponiveis: string[];
  destinosDisponiveis: string[];
  camadasOperacionaisDisponiveis: string[];
  tiposEquipamentoDisponiveis: string[];
}

export interface FiltroConsultaMapa {
  status?: string[];
  tiposCarga?: string[];
  destinos?: string[];
  camadas?: string[];
  tiposEquipamento?: string[];
}

export interface EventoTempoRealMapa {
  tipoEvento: string;
  mapa: MapaPatioResposta;
}

@Injectable({
  providedIn: 'root'
})
export class ServicoPatioService implements OnDestroy {
  private clienteStomp?: ClienteStompBasico;
  private sujeitoAtualizacoes = new Subject<EventoTempoRealMapa>();
  private conectado = false;

  constructor(
    private readonly http: HttpClient,
    private readonly configuracaoAplicacao: ConfiguracaoAplicacaoService
  ) {}

  obterMapa(filtro: FiltroConsultaMapa): Observable<MapaPatioResposta> {
    const params = this.construirParametros(filtro);
    return this.http.get<MapaPatioResposta>(this.construirUrl('/mapa'), { params });
  }

  obterFiltros(): Observable<FiltrosMapaPatio> {
    return this.http.get<FiltrosMapaPatio>(this.construirUrl('/filtros'));
  }

  listarPosicoes(): Observable<PosicaoPatio[]> {
    return this.http.get<PosicaoPatio[]>(this.construirUrl('/posicoes'));
  }

  listarConteineres(): Observable<ConteinerMapa[]> {
    return this.http.get<ConteinerMapa[]>(this.construirUrl('/conteineres'));
  }

  listarMovimentacoes(): Observable<MovimentoPatio[]> {
    return this.http.get<MovimentoPatio[]>(this.construirUrl('/movimentacoes'));
  }

  obterOpcoesCadastro(): Observable<OpcoesCadastroPatio> {
    return this.http.get<OpcoesCadastroPatio>(this.construirUrl('/opcoes'));
  }

  salvarConteiner(payload: ConteinerMapa): Observable<ConteinerMapa> {
    return this.http.post<ConteinerMapa>(this.construirUrl('/conteineres'), payload);
  }

  salvarEquipamento(payload: EquipamentoMapa): Observable<EquipamentoMapa> {
    return this.http.post<EquipamentoMapa>(this.construirUrl('/equipamentos'), payload);
  }

  iniciarMonitoramentoTempoReal(): Observable<EventoTempoRealMapa> {
    if (!this.conectado) {
      this.conectarTempoReal();
    }
    return this.sujeitoAtualizacoes.asObservable();
  }

  ngOnDestroy(): void {
    this.clienteStomp?.desconectar();
    this.sujeitoAtualizacoes.complete();
  }

  private conectarTempoReal(): void {
    this.clienteStomp = new ClienteStompBasico(this.obterUrlWebsocket());
    const manipuladorMensagem: ManipuladorMensagem = (corpo) => {
      try {
        const evento: EventoTempoRealMapa = JSON.parse(corpo);
        this.sujeitoAtualizacoes.next(evento);
      } catch (erro) {
        console.error('Falha ao interpretar mensagem do mapa do pátio', erro);
      }
    };
    const manipuladorErro: ManipuladorErro = (erro) => {
      console.error('Erro no canal de tempo real do pátio', erro);
      this.conectado = false;
    };

    this.clienteStomp.conectar('/topico/patio', manipuladorMensagem, manipuladorErro);
    this.conectado = true;
  }

  private construirUrl(caminho: string): string {
    return this.configuracaoAplicacao.construirUrlApi(`/yard/patio${caminho}`);
  }

  private obterUrlWebsocket(): string {
    return this.configuracaoAplicacao.construirUrlWebsocket('/ws/patio');
  }

  private construirParametros(filtro: FiltroConsultaMapa): HttpParams {
    let params = new HttpParams();

    if (filtro.status) {
      filtro.status.filter((valor) => valor).forEach((valor) => {
        params = params.append('status', valor);
      });
    }
    if (filtro.tiposCarga) {
      filtro.tiposCarga.filter((valor) => valor).forEach((valor) => {
        params = params.append('tipoCarga', valor);
      });
    }
    if (filtro.destinos) {
      filtro.destinos.filter((valor) => valor).forEach((valor) => {
        params = params.append('destino', valor);
      });
    }
    if (filtro.camadas) {
      filtro.camadas.filter((valor) => valor).forEach((valor) => {
        params = params.append('camada', valor);
      });
    }
    if (filtro.tiposEquipamento) {
      filtro.tiposEquipamento.filter((valor) => valor).forEach((valor) => {
        params = params.append('tipoEquipamento', valor);
      });
    }

    return params;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\tab-content\tab-content.component.css ----- 
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\tab-content\tab-content.component.html ----- 
<!-- tab-content.component.html 
<div>
  {{ data }}
  oi<br>kk<br>


  <div>
    {{ content }}
  </div>

  <router-outlet></router-outlet> 
</div>
--> 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\tab-content\customreusestrategy.ts ----- 
import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';

export class CustomReuseStrategy implements RouteReuseStrategy {
  private handlers: { [key: string]: DetachedRouteHandle } = {};

  // Adicione um conjunto para armazenar as rotas marcadas para destruição
  private routesToDestroy: Set<string> = new Set();

  // Adicione um método para marcar uma rota para destruição
  markForDestruction(path: string): void {
    this.routesToDestroy.add(path);
  }

  shouldDetach(route: ActivatedRouteSnapshot): boolean {
    return true;
  }

  // Modifique o método store para não armazenar rotas marcadas para destruição
  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {
    if (route.routeConfig && route.routeConfig.path) {
      if (this.routesToDestroy.has(route.routeConfig.path)) {
        // Se a rota estiver marcada para destruição, não a armazene
        this.routesToDestroy.delete(route.routeConfig.path);
      } else {
        this.handlers[route.routeConfig.path] = handle;
      }
    }
  }

  shouldAttach(route: ActivatedRouteSnapshot): boolean {
    return route.routeConfig && route.routeConfig.path ? !!this.handlers[route.routeConfig.path] : false;
  }

  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {
    return route.routeConfig && route.routeConfig.path ? this.handlers[route.routeConfig.path] : null;
  }

  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {
    return future.
    routeConfig === curr.routeConfig;
  }

  clearHandlers() {
    this.handlers = {};
  }
  
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\tab-content\tab-content.component.spec.ts ----- 
/*

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TabContentComponent } from './tab-content.component';

describe('TabContentComponent', () => {
  let component: TabContentComponent;
  let fixture: ComponentFixture<TabContentComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [TabContentComponent]
    });
    fixture = TestBed.createComponent(TabContentComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
*/ 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\tab-content\tab-content.component.ts ----- 
/*
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-tab-content',
  templateUrl: './tab-content.component.html'
})
export class TabContentComponent {
  @Input() data: any; // Marque a propriedade 'data' como uma entrada
  
  get content() {
    return this.data ? this.data.message : '';
  }
}
*/ 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\usuarios-lista\usuarios-lista.component.css ----- 
.usuarios-lista {
  padding: 1.5rem;
}

.usuarios-lista table {
  width: 100%;
  border-collapse: collapse;
}

.usuarios-lista th,
.usuarios-lista td {
  border-bottom: 1px solid #e0e0e0;
  padding: 0.75rem 0;
}

.usuarios-lista .ativo {
  color: #2d9d4d;
}

.usuarios-lista .inativo {
  color: #c53030;
}

.usuarios-lista .estado {
  margin: 1rem 0;
  font-weight: 500;
}

.usuarios-lista .estado-carregamento {
  color: #2f80ed;
}

.usuarios-lista .estado-erro {
  color: #c53030;
}

.usuarios-lista .estado-vazio {
  color: #4a5568;
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\usuarios-lista\usuarios-lista.component.html ----- 
<section class="usuarios-lista">
  <h2>Lista de Usuários</h2>
  <p>Resumo dos usuários cadastrados no sistema.</p>
  <div *ngIf="estaCarregando" class="estado estado-carregamento">Carregando usuários...</div>
  <div *ngIf="!estaCarregando && erroCarregamento" class="estado estado-erro">{{ erroCarregamento }}</div>
  <p *ngIf="!estaCarregando && !erroCarregamento && usuarios.length === 0" class="estado estado-vazio">
    Nenhum usuário cadastrado até o momento.
  </p>

  <table *ngIf="!estaCarregando && !erroCarregamento && usuarios.length > 0">
    <thead>
      <tr>
        <th>Nome</th>
        <th>E-mail</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let usuario of usuarios">
        <td>{{ usuario.nome }}</td>
        <td>{{ usuario.email }}</td>
        <td>
          <span [class.ativo]="usuario.status === 'Ativo'" [class.inativo]="usuario.status !== 'Ativo'">
            {{ usuario.status }}
          </span>
        </td>
      </tr>
    </tbody>
  </table>
</section>
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\componentes\usuarios-lista\usuarios-lista.component.ts ----- 
import { Component, OnInit } from '@angular/core';
import { finalize } from 'rxjs/operators';

import { UsuariosService, UsuarioResumo } from '../service/servico-autenticacao/usuarios.service';

@Component({
  selector: 'app-usuarios-lista',
  templateUrl: './usuarios-lista.component.html',
  styleUrls: ['./usuarios-lista.component.css']
})
export class UsuariosListaComponent implements OnInit {
  usuarios: UsuarioResumo[] = [];
  estaCarregando = false;
  erroCarregamento: string | null = null;

  constructor(private readonly usuariosService: UsuariosService) {}

  ngOnInit(): void {
    this.carregarUsuarios();
  }

  private carregarUsuarios(): void {
    this.estaCarregando = true;
    this.erroCarregamento = null;
    this.usuariosService
      .listarUsuarios()
      .pipe(finalize(() => (this.estaCarregando = false)))
      .subscribe({
        next: (usuarios) => {
          this.usuarios = usuarios;
        },
        error: (erro) => {
          this.erroCarregamento = this.resolverMensagemErro(erro);
          this.usuarios = [];
        }
      });
  }

  private resolverMensagemErro(erro: any): string {
    const mensagem = erro?.error?.message ?? erro?.message;
    return mensagem && typeof mensagem === 'string'
      ? mensagem
      : 'Não foi possível carregar os usuários. Tente novamente em instantes.';
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\app\configuracao\configuracao-aplicacao.service.ts ----- 
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';

export interface ConfiguracaoAplicacao {
  baseApiUrl: string;
}

export const CONFIGURACAO_APLICACAO_TOKEN = new InjectionToken<ConfiguracaoAplicacao>('CONFIGURACAO_APLICACAO_TOKEN');

@Injectable({
  providedIn: 'root'
})
export class ConfiguracaoAplicacaoService {
  private configuracao?: ConfiguracaoAplicacao;

  constructor(
    @Optional()
    @Inject(CONFIGURACAO_APLICACAO_TOKEN)
    configuracaoInicial?: ConfiguracaoAplicacao
  ) {
    if (configuracaoInicial) {
      this.definirConfiguracao(configuracaoInicial);
    }
  }

  definirConfiguracao(configuracao: ConfiguracaoAplicacao): void {
    if (!configuracao || typeof configuracao.baseApiUrl !== 'string') {
      throw new Error('Configuração inválida: "baseApiUrl" deve ser informada.');
    }
    const baseNormalizada = configuracao.baseApiUrl.trim();
    if (!baseNormalizada) {
      throw new Error('Configuração inválida: "baseApiUrl" deve ser informada.');
    }
    this.configuracao = {
      baseApiUrl: baseNormalizada.replace(/\/+$/, '')
    };
  }

  obterConfiguracao(): ConfiguracaoAplicacao {
    if (!this.configuracao) {
      throw new Error('A configuração da aplicação não foi carregada.');
    }
    return this.configuracao;
  }

  obterUrlBaseApi(): string {
    return this.obterConfiguracao().baseApiUrl;
  }

  construirUrlApi(caminhoRelativo: string): string {
    const base = this.obterUrlBaseApi();
    const caminhoNormalizado = caminhoRelativo.startsWith('/')
      ? caminhoRelativo
      : `/${caminhoRelativo}`;
    const urlConcatenada = `${base}${caminhoNormalizado}`;
    return urlConcatenada.replace(/([^:]\/)\/+/g, '$1');
  }

  construirUrlWebsocket(caminhoRelativo: string): string {
    const urlHttp = this.construirUrlApi(caminhoRelativo);
    if (urlHttp.startsWith('https://')) {
      return `wss://${urlHttp.substring('https://'.length)}`;
    }
    if (urlHttp.startsWith('http://')) {
      return `ws://${urlHttp.substring('http://'.length)}`;
    }
    return urlHttp;
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\sw.js ----- 
self.addEventListener('push', (event) => {
  const defaultOptions = {
    icon: 'assets/icons/bell.svg',
    badge: 'assets/icons/bell.svg'
  };
  let payload = {};
  if (event.data) {
    try {
      payload = event.data.json();
    } catch (error) {
      payload = { body: event.data.text() };
    }
  }
  const { title, ...optionPayload } = payload;
  const notificationTitle = title || 'CloudPort';
  const options = Object.assign({}, defaultOptions, optionPayload);
  event.waitUntil(self.registration.showNotification(notificationTitle, options));
});

self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  const destino = (event.notification && event.notification.data && event.notification.data.url) || '/';
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
      for (const client of clientList) {
        if ('focus' in client) {
          if ('navigate' in client && destino) {
            client.navigate(destino);
          }
          return client.focus();
        }
      }
      if (clients.openWindow && destino) {
        return clients.openWindow(destino);
      }
      return undefined;
    })
  );
});
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\configuracao.exemplo.json ----- 
{
  "baseApiUrl": "https://api.cloudport.exemplo"
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\configuracao.json ----- 
{
  "baseApiUrl": "http://localhost:8080"
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\i18n\en.json ----- 
{
  "gate": {
    "agendamentoDetalhe": {
      "selecione": "Select a booking to view its details.",
      "operacao": "Operation",
      "janela": "Time slot",
      "motorista": "Driver",
      "placa": "License plate",
      "chegadaPrevista": "Expected arrival",
      "saidaPrevista": "Expected departure",
      "documentosAnexados": "Uploaded documents",
      "quantidadeDocumentos": "{{quantidade}} documents",
      "nenhumDocumento": "No documents uploaded yet.",
      "adicionarDocumentos": "Add documents",
      "selecionarArquivos": "Select files",
      "enviarDocumentos": "Upload documents",
      "uploadConcluido": "Completed",
      "uploadErro": "Error",
      "confirmarChegada": "Confirm early arrival",
      "downloadComprovante": "Download receipt",
      "downloadInstrucoes": "Download instructions",
      "imprimir": "Print",
      "instrucoesTitulo": "Driver instructions",
      "instrucoes": [
        "Present the QR Code at the self-service kiosk upon arrival.",
        "Keep the mandatory documents accessible for inspection.",
        "Respect the scheduled window. Early arrivals over 30 minutes must wait in the staging area.",
        "If you have questions, contact the gate support team."
      ],
      "janelaProxima": "Window starts in {{minutos}} minutes.",
      "statusAtualizado": "Status updated to {{status}}.",
      "pushPermissionDenied": "Browser notifications were denied by the user.",
      "notificacaoJanelaTitulo": "Upcoming slot",
      "realtimeErro": "Real-time connection failed. Refresh the page to try again.",
      "comprovanteTitulo": "CloudPort Gate booking receipt",
      "comprovanteLegenda": "Document generated on {{data}}",
      "comprovanteObservacao": "Bring this receipt printed or in digital format to speed up clearance.",
      "comprovanteCampos": {
        "codigo": "Code",
        "transportadora": "Carrier",
        "motorista": "Driver",
        "placa": "License plate",
        "janela": "Time slot",
        "status": "Status",
        "documentos": "Documents"
      },
      "comprovanteSemDocumentos": "No documents registered.",
      "comprovanteSemRevalidacao": "Not revalidated",
      "documentoProcessando": "Documento {{nome}} enviado para validação automática.",
      "documentoValidado": "Documento {{nome}} validado automaticamente!",
      "documentoFalhou": "Falha na validação do documento {{nome}}.{{motivo}}",
      "motoristaPass": {
        "titulo": "Driver pass",
        "subtitulo": "Show this QR Code to access the gate",
        "codigo": "Pass code",
        "status": "Pass status",
        "atualizadoEm": "Updated on {{data}}"
      },
      "historicoConteiner": {
        "titulo": "Histórico do contêiner {{codigo}}",
        "statusAtual": "Status atual: {{status}}",
        "posicaoAtual": "Posição no pátio: {{posicao}}",
        "ultimaAtualizacao": "Última atualização: {{data}}",
        "carregando": "Carregando histórico do contêiner...",
        "erroCarregamento": "Não foi possível carregar o histórico do contêiner. Tente novamente em instantes.",
        "vazio": "Nenhuma movimentação registrada para este contêiner ainda.",
        "responsavel": "Responsável: {{responsavel}}",
        "posicaoMovimentacao": "Posição registrada: {{posicao}}",
        "descargaTrem": "Descarga do trem concluída",
        "cargaTrem": "Carga no trem concluída",
        "alocacao": "Alocação registrada",
        "transferencia": "Transferência realizada",
        "inspecao": "Inspeção registrada",
        "liberacao": "Liberação registrada",
        "atualizacaoCadastral": "Atualização cadastral"
      },
      "realtime": {
        "titulo": "Real-time status",
        "status": {
          "conectando": "Connecting to the real-time stream...",
          "conectado": "Live connection active. Updates will arrive instantly.",
          "reconectando": "Retrying connection (attempt {{tentativa}}) in {{segundos}}s...",
          "desconectado": "Connection lost. Waiting for a new attempt..."
        }
      },
      "instrucoesArquivoTitulo": "Driver instructions - Booking {{codigo}}",
      "ultimaRevalidacao": "Last revalidation",
      "abrirDocumento": "Open"
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\i18n\es.json ----- 
{
  "gate": {
    "agendamentoDetalhe": {
      "selecione": "Seleccione una cita para ver los detalles.",
      "operacao": "Operación",
      "janela": "Franja",
      "motorista": "Conductor",
      "placa": "Matrícula",
      "chegadaPrevista": "Llegada prevista",
      "saidaPrevista": "Salida prevista",
      "documentosAnexados": "Documentos cargados",
      "quantidadeDocumentos": "{{quantidade}} documentos",
      "nenhumDocumento": "Todavía no se cargaron documentos.",
      "adicionarDocumentos": "Agregar documentos",
      "selecionarArquivos": "Seleccionar archivos",
      "enviarDocumentos": "Enviar documentos",
      "uploadConcluido": "Completado",
      "uploadErro": "Error",
      "confirmarChegada": "Confirmar llegada anticipada",
      "downloadComprovante": "Descargar comprobante",
      "downloadInstrucoes": "Descargar instrucciones",
      "imprimir": "Imprimir",
      "instrucoesTitulo": "Instrucciones para el conductor",
      "instrucoes": [
        "Presente el código QR en el tótem de autoservicio al llegar.",
        "Mantenga los documentos obligatorios accesibles para la inspección.",
        "Respete la franja horaria. Las llegadas con más de 30 minutos de anticipación deben esperar en la zona designada.",
        "Ante dudas, contacte al equipo de soporte del gate."
      ],
      "janelaProxima": "La franja comienza en {{minutos}} minutos.",
      "statusAtualizado": "Estado actualizado a {{status}}.",
      "pushPermissionDenied": "Las notificaciones del navegador fueron rechazadas por el usuario.",
      "notificacaoJanelaTitulo": "Franja próxima",
      "realtimeErro": "Fallo la conexión en tiempo real. Actualice la página para intentarlo nuevamente.",
      "comprovanteTitulo": "Comprobante de cita Gate CloudPort",
      "comprovanteLegenda": "Documento generado el {{data}}",
      "comprovanteObservacao": "Lleve este comprobante impreso o digital para agilizar la liberación.",
      "comprovanteCampos": {
        "codigo": "Código",
        "transportadora": "Transportista",
        "motorista": "Conductor",
        "placa": "Matrícula",
        "janela": "Franja",
        "status": "Estado",
        "documentos": "Documentos"
      },
      "comprovanteSemDocumentos": "No hay documentos registrados.",
      "comprovanteSemRevalidacao": "Sin revalidar",
      "documentoProcessando": "Documento {{nome}} enviado para validação automática.",
      "documentoValidado": "Documento {{nome}} validado automaticamente!",
      "documentoFalhou": "Falha na validação do documento {{nome}}.{{motivo}}",
      "motoristaPass": {
        "titulo": "Pase del conductor",
        "subtitulo": "Muestre este código QR para acceder al gate",
        "codigo": "Código del pase",
        "status": "Estado del pase",
        "atualizadoEm": "Actualizado el {{data}}"
      },
      "historicoConteiner": {
        "titulo": "Histórico del contenedor {{codigo}}",
        "statusAtual": "Estado actual: {{status}}",
        "posicaoAtual": "Ubicación en patio: {{posicao}}",
        "ultimaAtualizacao": "Última actualización: {{data}}",
        "carregando": "Cargando histórico del contenedor...",
        "erroCarregamento": "No fue posible cargar el histórico del contenedor. Intente nuevamente.",
        "vazio": "Aún no hay movimientos registrados para este contenedor.",
        "responsavel": "Responsable: {{responsavel}}",
        "posicaoMovimentacao": "Ubicación registrada: {{posicao}}",
        "descargaTrem": "Descarga del tren concluida",
        "cargaTrem": "Carga en el tren concluida",
        "alocacao": "Asignación registrada",
        "transferencia": "Transferencia registrada",
        "inspecao": "Inspección registrada",
        "liberacao": "Liberación registrada",
        "atualizacaoCadastral": "Actualización de registro"
      },
      "realtime": {
        "titulo": "Estado en tiempo real",
        "status": {
          "conectando": "Conectando al flujo en tiempo real...",
          "conectado": "Conexión activa. Las actualizaciones llegarán al instante.",
          "reconectando": "Reintentando la conexión (intento {{tentativa}}) en {{segundos}}s...",
          "desconectado": "Conexión perdida. Esperando un nuevo intento..."
        }
      },
      "instrucoesArquivoTitulo": "Instrucciones para el conductor - Turno {{codigo}}",
      "ultimaRevalidacao": "Última revalidación",
      "abrirDocumento": "Abrir"
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\assets\i18n\pt.json ----- 
{
  "gate": {
    "agendamentoDetalhe": {
      "selecione": "Selecione um agendamento para visualizar os detalhes.",
      "operacao": "Operação",
      "janela": "Janela",
      "motorista": "Motorista",
      "placa": "Placa",
      "chegadaPrevista": "Chegada prevista",
      "saidaPrevista": "Saída prevista",
      "documentosAnexados": "Documentos anexados",
      "quantidadeDocumentos": "{{quantidade}} documentos",
      "nenhumDocumento": "Nenhum documento enviado ainda.",
      "adicionarDocumentos": "Adicionar documentos",
      "selecionarArquivos": "Selecionar arquivos",
      "enviarDocumentos": "Enviar documentos",
      "uploadConcluido": "Concluído",
      "uploadErro": "Erro",
      "confirmarChegada": "Confirmar chegada antecipada",
      "downloadComprovante": "Download do comprovante",
      "downloadInstrucoes": "Download das instruções",
      "imprimir": "Imprimir",
      "instrucoesTitulo": "Instruções ao motorista",
      "instrucoes": [
        "Apresente o QR Code no totem de autoatendimento ao chegar ao porto.",
        "Mantenha os documentos obrigatórios acessíveis para checagem.",
        "Respeite o horário da janela. Chegadas com mais de 30 minutos de antecedência devem aguardar no bolsão.",
        "Em caso de dúvida, procure a equipe de suporte do gate."
      ],
      "janelaProxima": "Janela iniciando em {{minutos}} minutos.",
      "statusAtualizado": "Status atualizado para {{status}}.",
      "pushPermissionDenied": "Notificações de navegador desativadas pelo usuário.",
      "notificacaoJanelaTitulo": "Janela próxima",
      "realtimeErro": "Falha na conexão em tempo real. Atualize a página para tentar novamente.",
      "comprovanteTitulo": "Comprovante de agendamento Gate CloudPort",
      "comprovanteLegenda": "Documento gerado em {{data}}",
      "comprovanteObservacao": "Leve este comprovante impresso ou em formato digital para facilitar a liberação.",
      "comprovanteCampos": {
        "codigo": "Código",
        "transportadora": "Transportadora",
        "motorista": "Motorista",
        "placa": "Placa",
        "janela": "Janela",
        "status": "Status",
        "documentos": "Documentos"
      },
      "comprovanteSemDocumentos": "Nenhum documento cadastrado.",
      "comprovanteSemRevalidacao": "Não revalidado",
      "documentoProcessando": "Documento {{nome}} enviado para validação automática.",
      "documentoValidado": "Documento {{nome}} validado automaticamente!",
      "documentoFalhou": "Falha na validação do documento {{nome}}.{{motivo}}",
      "motoristaPass": {
        "titulo": "Passe do motorista",
        "subtitulo": "Mostre este QR Code para acessar o gate",
        "codigo": "Código do passe",
        "status": "Status do passe",
        "atualizadoEm": "Atualizado em {{data}}"
      },
      "historicoConteiner": {
        "titulo": "Histórico do contêiner {{codigo}}",
        "statusAtual": "Status atual: {{status}}",
        "posicaoAtual": "Posição no pátio: {{posicao}}",
        "ultimaAtualizacao": "Última atualização: {{data}}",
        "carregando": "Carregando histórico do contêiner...",
        "erroCarregamento": "Não foi possível carregar o histórico do contêiner. Tente novamente em instantes.",
        "vazio": "Nenhuma movimentação registrada para este contêiner ainda.",
        "responsavel": "Responsável: {{responsavel}}",
        "posicaoMovimentacao": "Posição registrada: {{posicao}}",
        "descargaTrem": "Descarga do trem concluída",
        "cargaTrem": "Carga no trem concluída",
        "alocacao": "Alocação registrada",
        "transferencia": "Transferência realizada",
        "inspecao": "Inspeção registrada",
        "liberacao": "Liberação registrada",
        "atualizacaoCadastral": "Atualização cadastral"
      },
      "realtime": {
        "titulo": "Atualização em tempo real",
        "status": {
          "conectando": "Conectando ao fluxo em tempo real...",
          "conectado": "Conexão ativa. Eventos serão recebidos instantaneamente.",
          "reconectando": "Tentando reconectar (tentativa {{tentativa}}) em {{segundos}}s...",
          "desconectado": "Conexão perdida. Aguardando nova tentativa..."
        }
      },
      "instrucoesArquivoTitulo": "Instruções ao motorista - Agendamento {{codigo}}",
      "ultimaRevalidacao": "Última revalidação",
      "abrirDocumento": "Abrir"
    }
  }
}
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\environments\environment.prod.ts ----- 
export const environment = {
  production: true,
  /**
   * A URL base da API é definida em tempo de execução via arquivo assets/configuracao.json.
   * Esta propriedade permanece apenas para compatibilidade de build e não deve ser utilizada diretamente.
   */
  baseApiUrl: ''
};
 
----- C:\Users\diogo\IdeaProjects\CloudPort\frontend\cloudport\src\environments\environment.ts ----- 
export const environment = {
  production: false,
  /**
   * A URL base da API é definida em tempo de execução via arquivo assets/configuracao.json.
   * Esta propriedade permanece apenas para compatibilidade de build e não deve ser utilizada diretamente.
   */
  baseApiUrl: ''
};
 
