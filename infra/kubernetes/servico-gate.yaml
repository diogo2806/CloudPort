apiVersion: v1
kind: Namespace
metadata:
  name: cloudport-gate
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: servico-gate-config
  namespace: cloudport-gate
  labels:
    app: servico-gate
    tier: backend
    component: gate
  annotations:
    cloudport.io/description: "Configurações do servico-gate"
data:
  GATE_SERVER_PORT: "8082"
  GATE_DB_URL: jdbc:postgresql://servico-gate-postgres.cloudport-gate.svc.cluster.local:5432/servico_gate
  GATE_DB_SCHEMA: public
  TOS_API_BASE_URL: https://tos-api.cloudport.internal
  AUTH_API_BASE_URL: https://auth.cloudport.internal
  DOCUMENT_STORAGE_PROVIDER: s3
  DOCUMENT_STORAGE_BUCKET: cloudport-documents
  DOCUMENT_STORAGE_REGION: us-east-1
  GATE_EVENT_EXCHANGE: gate.events
  GATE_DEAD_LETTER_EXCHANGE: gate.events.dlx
  GATE_INBOUND_QUEUE: gate.in.process
  GATE_OUTBOUND_QUEUE: gate.out.process
  GATE_INBOUND_DLQ: gate.in.dead-letter
  GATE_OUTBOUND_DLQ: gate.out.dead-letter
  GATE_METRICS_ENDPOINT: http://localhost:8082/actuator/prometheus
---
apiVersion: v1
kind: Secret
metadata:
  name: servico-gate-secrets
  namespace: cloudport-gate
  labels:
    app: servico-gate
stringData:
  GATE_DB_USERNAME: gate_user
  GATE_DB_PASSWORD: gate_password
  GATE_RABBIT_USERNAME: gate_user
  GATE_RABBIT_PASSWORD: gate_password
  TOS_API_CLIENT_ID: gate-service
  TOS_API_CLIENT_SECRET: super-segredo
  JWT_SECRET: super-chave-jwt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servico-gate
  namespace: cloudport-gate
  labels:
    app: servico-gate
spec:
  replicas: 2
  selector:
    matchLabels:
      app: servico-gate
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: servico-gate
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8082"
    spec:
      containers:
        - name: servico-gate
          image: ${CI_DOCKER_IMAGE:-registry.example.com/cloudport/servico-gate:latest}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
          envFrom:
            - configMapRef:
                name: servico-gate-config
            - secretRef:
                name: servico-gate-secrets
          env:
            - name: GATE_RABBIT_HOST
              value: rabbitmq.cloudport-gate.svc.cluster.local
            - name: GATE_RABBIT_PORT
              value: "5672"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://otel-collector.observability.svc.cluster.local:4318
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8082
            initialDelaySeconds: 15
            periodSeconds: 10
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1"
              memory: "2Gi"
      restartPolicy: Always
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: servico-gate-hpa
  namespace: cloudport-gate
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: servico-gate
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Pods
      pods:
        metric:
          name: rabbitmq_queue_backlog
        target:
          type: AverageValue
          averageValue: "50"
---
apiVersion: v1
kind: Service
metadata:
  name: servico-gate
  namespace: cloudport-gate
spec:
  selector:
    app: servico-gate
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8082
---
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: gate-in-process
  namespace: cloudport-gate
spec:
  name: gate.in.process
  autoDelete: false
  durable: true
  rabbitmqClusterReference:
    name: rabbitmq
  arguments:
    x-dead-letter-exchange: gate.events.dlx
    x-dead-letter-routing-key: gate.in.dead-letter
---
apiVersion: rabbitmq.com/v1beta1
kind: Queue
metadata:
  name: gate-out-process
  namespace: cloudport-gate
spec:
  name: gate.out.process
  autoDelete: false
  durable: true
  rabbitmqClusterReference:
    name: rabbitmq
  arguments:
    x-dead-letter-exchange: gate.events.dlx
    x-dead-letter-routing-key: gate.out.dead-letter
---
apiVersion: v1
kind: Service
metadata:
  name: servico-gate-postgres
  namespace: cloudport-gate
spec:
  selector:
    app: servico-gate-postgres
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: servico-gate-postgres
  namespace: cloudport-gate
spec:
  serviceName: servico-gate-postgres
  replicas: 1
  selector:
    matchLabels:
      app: servico-gate-postgres
  template:
    metadata:
      labels:
        app: servico-gate-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:14
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: servico_gate
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: servico-gate-secrets
                  key: GATE_DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: servico-gate-secrets
                  key: GATE_DB_PASSWORD
          volumeMounts:
            - name: servico-gate-postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: servico-gate-postgres-data
          persistentVolumeClaim:
            claimName: servico-gate-postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: servico-gate-postgres-pvc
  namespace: cloudport-gate
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: servico-gate-redis
  namespace: cloudport-gate
spec:
  selector:
    app: servico-gate-redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servico-gate-redis
  namespace: cloudport-gate
spec:
  replicas: 1
  selector:
    matchLabels:
      app: servico-gate-redis
  template:
    metadata:
      labels:
        app: servico-gate-redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          args: ["--save","20","1","--loglevel","warning"]
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "250m"
              memory: "512Mi"
